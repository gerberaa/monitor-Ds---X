#!/usr/bin/env python3
"""
Twitter Monitor Adapter –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –±–æ—Ç–æ–º

–¶–µ–π –º–æ–¥—É–ª—å –∞–¥–∞–ø—Ç—É—î twitter_monitor –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—ñ,
–∑–∞–º—ñ–Ω—é—é—á–∏ Selenium –ø—ñ–¥—Ö—ñ–¥ –Ω–∞ –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∏–π API –ø—ñ–¥—Ö—ñ–¥.
"""

import asyncio
import logging
import json
import os
import time
from datetime import datetime
from typing import Set, List, Dict, Optional
from pathlib import Path

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ twitter_monitor –º–æ–¥—É–ª—ñ
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), 'twitter_monitor'))

from twscrape import API
from twscrape.models import Tweet, User

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TwitterMonitorAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó twitter_monitor –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –±–æ—Ç–æ–º"""
    
    def __init__(self, accounts_db_path: str = None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        
        Args:
            accounts_db_path: –®–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ twitter_monitor
        """
        self.accounts_db_path = accounts_db_path or "./twitter_monitor/accounts.db"
        self.api = None
        self.monitoring_accounts = set()
        self.seen_tweets = {}  # account -> set of tweet_ids
        self.sent_tweets = {}  # account -> set of sent tweet_ids
        self.monitoring_active = False
        self.seen_tweets_file = "twitter_monitor_seen_tweets.json"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É twitter_monitor —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        twitter_monitor_dir = Path("twitter_monitor")
        twitter_monitor_dir.mkdir(exist_ok=True)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ seen_tweets
        self.load_seen_tweets()
        
        # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤
        self.account_projects = {}  # username -> project_name
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ API
        self._init_api()
        
    def _init_api(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ API twitter_monitor"""
        try:
            if os.path.exists(self.accounts_db_path):
                self.api = API(pool=self.accounts_db_path)
                logger.info(f"Twitter Monitor API —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –±–∞–∑–æ—é: {self.accounts_db_path}")
                return True
            else:
                logger.warning(f"–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {self.accounts_db_path}")
                logger.info("–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –±–∞–∑—É –¥–∞–Ω–∏—Ö...")
                self.api = API()
                return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó API: {e}")
            return False
    
    def is_twitter_link_valid(self, tweet_text: str, username: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Ç–≤—ñ—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–æ–µ–∫—Ç—É"""
        if not tweet_text:
            return True
            
        # –®—É–∫–∞—î–º–æ –≤—Å—ñ Twitter –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Ç–µ–∫—Å—Ç—ñ
        import re
        twitter_links = re.findall(r'https?://(?:twitter\.com|x\.com)/\w+/status/\d+', tweet_text)
        
        if not twitter_links:
            return True  # –ù–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω—å - —Ç–≤—ñ—Ç –≤–∞–ª—ñ–¥–Ω–∏–π
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        for link in twitter_links:
            # –í–∏—Ç—è–≥—É—î–º–æ username –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            if '/status/' in link:
                link_username = link.split('/')[3]  # twitter.com/username/status/...
            else:
                continue
                
            # –Ø–∫—â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ - —Ç–≤—ñ—Ç –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π
            if link_username.lower() != username.lower():
                logger.info(f"üö´ Twitter Monitor: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–≤—ñ—Ç–∞: –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ {link_username} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–æ–µ–∫—Ç—É {username}")
                return False
                
        return True
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        if self._init_api():
            logger.info("Twitter Monitor –∞–¥–∞–ø—Ç–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        else:
            logger.warning("Twitter Monitor –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏")
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é"""
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ seen_tweets –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º
        self.save_seen_tweets()
        logger.info("Twitter Monitor –∞–¥–∞–ø—Ç–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ")
        
    def add_account(self, username: str) -> bool:
        """–î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        try:
            clean_username = username.replace('@', '').strip()
            
            # –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ Twitter –∞–∫–∞—É–Ω—Ç–∞ (–∞–ª–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
            if clean_username.lower() in ['twitter', 'x']:
                logger.warning(f"‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ Twitter –∞–∫–∞—É–Ω—Ç–∞: {clean_username}")
                # –í–∏–¥–∞–ª—è—î–º–æ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —è–∫—â–æ –≤–∂–µ –¥–æ–¥–∞–Ω–æ
                if clean_username in self.monitoring_accounts:
                    self.monitoring_accounts.discard(clean_username)
                if clean_username in self.sent_tweets:
                    del self.sent_tweets[clean_username]
                if clean_username in self.seen_tweets:
                    del self.seen_tweets[clean_username]
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
                self.save_seen_tweets()
                return False
                
            if clean_username:
                self.monitoring_accounts.add(clean_username)
                if clean_username not in self.seen_tweets:
                    self.seen_tweets[clean_username] = set()
                if clean_username not in self.sent_tweets:
                    self.sent_tweets[clean_username] = set()
                logger.info(f"–î–æ–¥–∞–Ω–æ –∞–∫–∞—É–Ω—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {clean_username}")
                return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ {username}: {e}")
        return False
        
    def get_monitoring_accounts(self) -> List[str]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        return list(self.monitoring_accounts)
        
    async def get_user_tweets(self, username: str, limit: int = 5) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–≤—ñ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ twitter_monitor API"""
        if not self.api:
            logger.error("Twitter Monitor API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return []
            
        try:
            clean_username = username.replace('@', '').strip()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = await self.api.user_by_login(clean_username)
            if not user:
                logger.error(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{clean_username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return []
            
            logger.info(f"–û—Ç—Ä–∏–º—É—î–º–æ —Ç–≤—ñ—Ç–∏ –¥–ª—è @{clean_username} (ID: {user.id})")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–≤—ñ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            tweets = []
            async for tweet in self.api.user_tweets(user.id, limit=limit):
                tweet_data = self._convert_tweet_to_dict(tweet, clean_username)
                if tweet_data:
                    tweets.append(tweet_data)
            
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤—ñ—Ç—ñ–≤ –¥–ª—è {clean_username}")
            return tweets
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–≤—ñ—Ç—ñ–≤ –¥–ª—è {username}: {e}")
            return []
    
    def _convert_tweet_to_dict(self, tweet: Tweet, username: str) -> Optional[Dict]:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ Tweet –æ–±'—î–∫—Ç –≤ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –±–æ—Ç–æ–º"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–µ–∫—Å—Ç —Ç–≤—ñ—Ç–∞ –≤–∞–ª—ñ–¥–Ω–∏–π –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if tweet.rawContent and len(tweet.rawContent) > 10:
                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–≤—ñ—Ç–∏ –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
                if not self.is_twitter_link_valid(tweet.rawContent, username):
                    logger.debug(f"Twitter Monitor: –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ç–≤—ñ—Ç –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –¥–ª—è {username}: {tweet.rawContent[:50]}...")
                    return None
            
            # –í–∏—Ç—è–≥—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            images = []
            if tweet.media:
                # –§–æ—Ç–æ
                for photo in tweet.media.photos:
                    images.append(photo.url)
                # –í—ñ–¥–µ–æ (thumbnail)
                for video in tweet.media.videos:
                    images.append(video.thumbnailUrl)
                # GIF
                for gif in tweet.media.animated:
                    images.append(gif.thumbnailUrl)
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ç–µ–∫—Å—Ç–∏ (–∞–ª–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ç–≤—ñ—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ —Ñ–æ—Ç–æ)
            if len(tweet.rawContent) < 5 and not images:
                return None
            
            return {
                'id': str(tweet.id),
                'text': tweet.rawContent,
                'url': tweet.url,
                'images': images,
                'created_at': tweet.date.isoformat(),
                'user': {
                    'screen_name': username,
                    'name': tweet.user.displayname if tweet.user else username
                }
            }
            
        except Exception as e:
            logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ç–≤—ñ—Ç–∞: {e}")
            return None
    
    async def check_new_tweets(self) -> List[Dict]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        if not self.api:
            logger.warning("Twitter Monitor API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return []
            
        new_tweets = []
        
        for username in self.monitoring_accounts:
            try:
                # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–Ω–æ–∂–∏–Ω–∏ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
                if username not in self.seen_tweets:
                    self.seen_tweets[username] = set()
                if username not in self.sent_tweets:
                    self.sent_tweets[username] = set()
                
                tweets = await self.get_user_tweets(username, limit=5)
                
                for tweet in tweets:
                    tweet_id = tweet.get('id')
                    tweet_text = tweet.get('text', '').strip()
                    
                    if tweet_id:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ–π —Ç–≤—ñ—Ç –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞ ID
                        if tweet_id in self.sent_tweets[username]:
                            continue
                        
                        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–≤—ñ—Ç–∏ –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
                        if not self.is_twitter_link_valid(tweet_text, username):
                            logger.info(f"üö´ Twitter Monitor: –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ç–≤—ñ—Ç –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –¥–ª—è {username}")
                            continue
                        
                        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                        if tweet_text:
                            import hashlib
                            content_hash = hashlib.md5(f"{username}_{tweet_text}".encode('utf-8')).hexdigest()[:12]
                            content_key = f"content_{content_hash}"
                            if content_key in self.sent_tweets[username]:
                                logger.info(f"Twitter Monitor: –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–≤—ñ—Ç–∞ –¥–ª—è {username} –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                                continue
                            
                        # –î–æ–¥–∞—î–º–æ –¥–æ –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤
                        if tweet_id not in self.seen_tweets[username]:
                            logger.info(f"üÜï Twitter Monitor: –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–π —Ç–≤—ñ—Ç –≤—ñ–¥ {username}: {tweet_text[:50]}...")
                            new_tweets.append(tweet)
                            self.seen_tweets[username].add(tweet_id)
                            self.sent_tweets[username].add(tweet_id)
                            
                            # –î–æ–¥–∞—î–º–æ —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö
                            if tweet_text:
                                import hashlib
                                content_hash = hashlib.md5(f"{username}_{tweet_text}".encode('utf-8')).hexdigest()[:12]
                                content_key = f"content_{content_hash}"
                                self.sent_tweets[username].add(content_key)
                        
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–≤—ñ—Ç—ñ–≤ –¥–ª—è {username}: {e}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ —Ç–≤—ñ—Ç–∏ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if new_tweets:
            self.save_seen_tweets()
                
        return new_tweets
    
    def format_tweet_notification(self, tweet: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç–≤—ñ—Ç"""
        try:
            username = tweet.get('user', {}).get('screen_name', 'unknown')
            name = tweet.get('user', {}).get('name', username)
            tweet_id = tweet.get('id', '')
            url = tweet.get('url', f"https://twitter.com/{username}/status/{tweet_id}")
            created_at = tweet.get('created_at', '')
            text = tweet.get('text', '')
            images = tweet.get('images', [])
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            try:
                from datetime import datetime
                if created_at:
                    dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    formatted_date = dt.strftime("%d %B, %H:%M UTC")
                    time_ago = self._get_time_ago(dt)
                else:
                    formatted_date = "–ù–µ –≤—ñ–¥–æ–º–æ"
                    time_ago = ""
            except:
                formatted_date = created_at
                time_ago = ""
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ —Ç–µ–∫—Å—Ç —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(text) > 200:
                text = text[:200] + "..."
            
            notification = f"""üê¶ **–ù–æ–≤–∏–π —Ç–≤—ñ—Ç –∑ Twitter**
‚Ä¢ –ü—Ä–æ—Ñ—ñ–ª—å: @{username}
‚Ä¢ –ê–≤—Ç–æ—Ä: {name}
‚Ä¢ –î–∞—Ç–∞: {formatted_date} ({time_ago})
‚Ä¢ –¢–µ–∫—Å—Ç: {text}
üîó [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–≤—ñ—Ç–∞]({url})"""
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫—â–æ —î
            if images:
                notification += f"\nüì∑ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}"
            
            return notification
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
            return f"üê¶ –ù–æ–≤–∏–π —Ç–≤—ñ—Ç –∑ Twitter: {tweet.get('text', '–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è')}"
    
    def _get_time_ago(self, dt: datetime) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å —Ç–æ–º—É"""
        try:
            from datetime import datetime, timezone
            now = datetime.now(timezone.utc)
            
            # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ dt –º–∞—î timezone
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=timezone.utc)
            
            diff = now - dt
            
            total_seconds = int(diff.total_seconds())
            
            if total_seconds < 0:
                return "—â–æ–π–Ω–æ"
            elif total_seconds < 60:
                return f"{total_seconds} —Å–µ–∫—É–Ω–¥ —Ç–æ–º—É"
            elif total_seconds < 3600:
                minutes = total_seconds // 60
                return f"{minutes} —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É"
            elif total_seconds < 86400:
                hours = total_seconds // 3600
                return f"{hours} –≥–æ–¥–∏–Ω —Ç–æ–º—É"
            else:
                days = total_seconds // 86400
                return f"{days} –¥–Ω—ñ–≤ —Ç–æ–º—É"
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∞—Å—É: {e}")
            return ""
    
    def save_seen_tweets(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ç–≤—ñ—Ç—ñ–≤"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ set —É list –¥–ª—è JSON —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            data_to_save = {}
            for account, tweet_ids in self.seen_tweets.items():
                if isinstance(tweet_ids, set):
                    data_to_save[account] = list(tweet_ids)
                else:
                    data_to_save[account] = tweet_ids
            
            with open(self.seen_tweets_file, 'w', encoding='utf-8') as f:
                json.dump(data_to_save, f, ensure_ascii=False, indent=2)
            logger.debug(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ seen_tweets –¥–ª—è {len(data_to_save)} –∞–∫–∞—É–Ω—Ç—ñ–≤")
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è seen_tweets: {e}")
            return False
    
    def load_seen_tweets(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ç–≤—ñ—Ç—ñ–≤"""
        try:
            if os.path.exists(self.seen_tweets_file):
                with open(self.seen_tweets_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ list –Ω–∞–∑–∞–¥ —É set
                for account, tweet_ids in data.items():
                    if isinstance(tweet_ids, list):
                        self.seen_tweets[account] = set(tweet_ids)
                    else:
                        self.seen_tweets[account] = set()
                
                logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ seen_tweets –¥–ª—è {len(self.seen_tweets)} –∞–∫–∞—É–Ω—Ç—ñ–≤")
            else:
                logger.info("–§–∞–π–ª twitter_monitor_seen_tweets.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Å–ø–∏—Å–∫—É")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è seen_tweets: {e}")
            self.seen_tweets = {}

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
async def main():
    """–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è TwitterMonitorAdapter"""
    async with TwitterMonitorAdapter() as monitor:
        # –î–æ–¥–∞—î–º–æ –∞–∫–∞—É–Ω—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        monitor.add_account("pilk_xz")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–≤—ñ—Ç–∏
        tweets = await monitor.get_user_tweets("pilk_xz", limit=5)
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤—ñ—Ç—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏
        new_tweets = await monitor.check_new_tweets()
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(new_tweets)} –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤")

if __name__ == "__main__":
    asyncio.run(main())
