import logging
import asyncio
import threading
import requests
import tempfile
import os
import json
from datetime import datetime
from typing import List, Dict, Optional, Any, Set
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, JobQueue
from security_manager import SecurityManager
from project_manager import ProjectManager
from discord_monitor import DiscordMonitor
from twitter_monitor import TwitterMonitor
from twitter_monitor_adapter import TwitterMonitorAdapter
from access_manager import access_manager
from config import BOT_TOKEN, ADMIN_PASSWORD, SECURITY_TIMEOUT, MESSAGES, DISCORD_AUTHORIZATION, MONITORING_INTERVAL, TWITTER_AUTH_TOKEN, TWITTER_CSRF_TOKEN, TWITTER_MONITORING_INTERVAL

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è - —Ç—ñ–ª—å–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
import logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.ERROR
)

# –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
logging.getLogger('twitter_monitor').setLevel(logging.WARNING)
logging.getLogger('twitter_monitor_adapter').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
security_manager = SecurityManager(SECURITY_TIMEOUT)
project_manager = ProjectManager()
discord_monitor = DiscordMonitor(DISCORD_AUTHORIZATION) if DISCORD_AUTHORIZATION else None
twitter_monitor = TwitterMonitor(TWITTER_AUTH_TOKEN, TWITTER_CSRF_TOKEN) if TWITTER_AUTH_TOKEN and TWITTER_CSRF_TOKEN else None
twitter_monitor_adapter = None  # Twitter Monitor Adapter (–∑–∞–º—ñ–Ω–∞ Selenium)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–æ—á—ñ–∫—É—é—Ç—å –ø–∞—Ä–æ–ª—å)
waiting_for_password = {}

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤
user_states: Dict[int, Dict[str, Any]] = {}  # user_id -> {'state': 'adding_project', 'data': {...}}

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
bot_instance = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö —Ç–≤—ñ—Ç—ñ–≤
global_sent_tweets: Dict[str, Set[str]] = {}  # account -> set of sent tweet_ids

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è UI
user_states = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ñ–æ—Ä–º
waiting_for_password = {}  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é
main_menu_messages = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –≥–æ–ª–æ–≤–Ω–∏—Ö –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –º–∞—î –±—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
def require_auth(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.effective_user or not update.message:
            return
        
        user_id = update.effective_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
        if not access_manager.is_authorized(user_id):
            await update.message.reply_text(
                "üîê **–î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ!**\n\n"
                "–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è.\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.",
            )
            return
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        return await func(update, context)
    
    return wrapper

# ===================== –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤ –∑ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ =====================
def clean_forbidden_accounts():
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –∑ –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤"""
    forbidden_accounts = ['twitter', 'x']
    
    # –û—á–∏—â–∞—î–º–æ Twitter –º–æ–Ω—ñ—Ç–æ—Ä
    if twitter_monitor:
        for account in forbidden_accounts:
            if account in twitter_monitor.monitoring_accounts:
                twitter_monitor.monitoring_accounts.discard(account)
                if account in twitter_monitor.sent_tweets:
                    del twitter_monitor.sent_tweets[account]
                if account in twitter_monitor.seen_tweets:
                    del twitter_monitor.seen_tweets[account]
                logger.info(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π Twitter –∞–∫–∞—É–Ω—Ç: {account}")
        twitter_monitor.save_seen_tweets()
    
    # –û—á–∏—â–∞—î–º–æ Twitter Monitor Adapter
    if twitter_monitor_adapter:
        for account in forbidden_accounts:
            if account in twitter_monitor_adapter.monitoring_accounts:
                twitter_monitor_adapter.monitoring_accounts.discard(account)
                if account in twitter_monitor_adapter.sent_tweets:
                    del twitter_monitor_adapter.sent_tweets[account]
                if account in twitter_monitor_adapter.seen_tweets:
                    del twitter_monitor_adapter.seen_tweets[account]
                logger.info(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç: {account}")
        twitter_monitor_adapter.save_seen_tweets()

def sync_monitors_with_projects() -> None:
    """–ó–≤–µ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –¥–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç—ñ–≤"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—â–∞—î–º–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏
        clean_forbidden_accounts()
        
        # –ó–±–∏—Ä–∞—î–º–æ —Ü—ñ–ª—å–æ–≤—ñ Twitter usernames —ñ–∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤
        project_usernames = set()
        discord_channels = {}  # channel_id -> original_url
        
        logger.info("üîç –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏...")
        for user_id, projects in project_manager.data.get('projects', {}).items():
            logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}: {len(projects)} –ø—Ä–æ–µ–∫—Ç—ñ–≤")
            for p in projects:
                if p.get('platform') == 'twitter':
                    url = p.get('url', '')
                    sync_username = extract_twitter_username(url)
                    logger.info(f"   üê¶ Twitter –ø—Ä–æ–µ–∫—Ç: URL='{url}' -> username='{sync_username}'")
                    if sync_username and sync_username.lower() not in ['twitter', 'x', 'elonmusk']:
                        project_usernames.add(sync_username)
                    elif sync_username and sync_username.lower() in ['twitter', 'x', 'elonmusk']:
                        logger.warning(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π Twitter –∞–∫–∞—É–Ω—Ç: {sync_username}")
                elif p.get('platform') == 'discord':
                    url = p.get('url', '')
                    channel_id = extract_discord_channel_id(url)
                    logger.info(f"   üí¨ Discord –ø—Ä–æ–µ–∫—Ç: URL='{url}' -> channel_id='{channel_id}'")
                    if channel_id:
                        discord_channels[channel_id] = url  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π URL
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É:")
        logger.info(f"   üê¶ –ó–Ω–∞–π–¥–µ–Ω–æ Twitter usernames: {list(project_usernames)}")
        logger.info(f"   üí¨ –ó–Ω–∞–π–¥–µ–Ω–æ Discord channels: {list(discord_channels.keys())}")

        # –î–æ–¥–∞—î–º–æ —è–≤–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç–∏ (—è–∫—â–æ —â–µ —î)
        twitter_adapter_saved = set(project_manager.get_selenium_accounts() or [])  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É –∂ —Ñ—É–Ω–∫—Ü—ñ—é
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏
        twitter_adapter_saved = {acc for acc in twitter_adapter_saved if acc.lower() not in ['twitter', 'x']}
        target_usernames = project_usernames.union(twitter_adapter_saved)

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Twitter API –º–æ–Ω—ñ—Ç–æ—Ä–∞
        global twitter_monitor
        if twitter_monitor is not None:
            current = set(getattr(twitter_monitor, 'monitoring_accounts', set()))
            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ
            for username in list(current - target_usernames):
                try:
                    if username:
                        twitter_monitor.remove_account(username)
                        logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ Twitter –∞–∫–∞—É–Ω—Ç –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {username}")
                except Exception:
                    pass
            # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ (—ñ–∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤/selenium_saved)
            for username in list(target_usernames - current):
                try:
                    twitter_monitor.add_account(username)
                    logger.info(f"‚ûï –î–æ–¥–∞–Ω–æ Twitter –∞–∫–∞—É–Ω—Ç –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {username}")
                except Exception:
                    pass

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Twitter Monitor Adapter (–æ—Å–Ω–æ–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥)
        global twitter_monitor_adapter
        if twitter_monitor_adapter is not None:
            current = set(getattr(twitter_monitor_adapter, 'monitoring_accounts', set()))
            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ
            for username in list(current - target_usernames):
                twitter_monitor_adapter.monitoring_accounts.discard(username)
                logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {username}")
            # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ
            for username in list(target_usernames - current):
                twitter_monitor_adapter.add_account(username)
                logger.info(f"‚ûï –î–æ–¥–∞–Ω–æ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {username}")

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Discord –º–æ–Ω—ñ—Ç–æ—Ä–∞
        global discord_monitor
        if discord_monitor is not None:
            current_channels = set(str(ch) for ch in getattr(discord_monitor, 'monitoring_channels', []))
            logger.info(f"üîÑ Discord –º–æ–Ω—ñ—Ç–æ—Ä: –ø–æ—Ç–æ—á–Ω—ñ –∫–∞–Ω–∞–ª–∏ = {list(current_channels)}")
            logger.info(f"üîÑ Discord –º–æ–Ω—ñ—Ç–æ—Ä: —Ü—ñ–ª—å–æ–≤—ñ –∫–∞–Ω–∞–ª–∏ = {list(discord_channels.keys())}")
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–∞–Ω–∞–ª–∏
            for channel_id, original_url in discord_channels.items():
                if channel_id not in current_channels:
                    try:
                        discord_monitor.add_channel(original_url)  # –ü–µ—Ä–µ–¥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π URL
                        logger.info(f"‚ûï –î–æ–¥–∞–Ω–æ Discord –∫–∞–Ω–∞–ª –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {channel_id} ({original_url})")
                    except Exception as e:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É {channel_id}: {e}")
            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –∫–∞–Ω–∞–ª–∏
            for channel_id in current_channels - set(discord_channels.keys()):
                try:
                    discord_monitor.remove_channel(channel_id)
                    logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ Discord –∫–∞–Ω–∞–ª –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {channel_id}")
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É {channel_id}: {e}")
        else:
            logger.warning("‚ö†Ô∏è Discord –º–æ–Ω—ñ—Ç–æ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (DISCORD_AUTHORIZATION –≤—ñ–¥—Å—É—Ç–Ω—ñ–π?)")

        if target_usernames:
            logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {len(target_usernames)} –∞–∫–∞—É–Ω—Ç—ñ–≤")
        if discord_channels:
            logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {len(discord_channels)} –∫–∞–Ω–∞–ª—ñ–≤")
            
        # –ó–∞–≤–∂–¥–∏ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...")
        auto_start_monitoring()
        
        if target_usernames or discord_channels:
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {len(target_usernames)} Twitter + {len(discord_channels)} Discord")
        else:
            logger.info("‚ÑπÔ∏è –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É, –∞–ª–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ —Ä–æ–±–æ—Ç–∏")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤: {e}")

def auto_start_monitoring() -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏"""
    try:
        global twitter_monitor, discord_monitor, twitter_monitor_adapter
        import threading
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Twitter API –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        if twitter_monitor and hasattr(twitter_monitor, 'monitoring_accounts'):
            accounts = getattr(twitter_monitor, 'monitoring_accounts', set())
            if accounts and TWITTER_AUTH_TOKEN:
                logger.info(f"üê¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ Twitter API –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {len(accounts)} –∞–∫–∞—É–Ω—Ç—ñ–≤")
                try:
                    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ —è–∫—â–æ —â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ
                    if not hasattr(auto_start_monitoring, '_twitter_started'):
                        twitter_thread = threading.Thread(target=lambda: asyncio.run(start_twitter_monitoring()))
                        twitter_thread.daemon = True
                        twitter_thread.start()
                        auto_start_monitoring._twitter_started = True
                        logger.info("‚úÖ Twitter API –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ (–æ—Å–Ω–æ–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥)
        if twitter_monitor_adapter and hasattr(twitter_monitor_adapter, 'monitoring_accounts'):
            accounts = getattr(twitter_monitor_adapter, 'monitoring_accounts', set())
            if accounts:
                logger.info(f"üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {len(accounts)} –∞–∫–∞—É–Ω—Ç—ñ–≤")
                try:
                    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ —è–∫—â–æ —â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ
                    if not hasattr(auto_start_monitoring, '_twitter_adapter_started'):
                        twitter_adapter_thread = threading.Thread(target=lambda: asyncio.run(start_twitter_monitor_adapter()))
                        twitter_adapter_thread.daemon = True
                        twitter_adapter_thread.start()
                        auto_start_monitoring._twitter_adapter_started = True
                        logger.info("‚úÖ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        logger.info(f"üí¨ Discord –º–æ–Ω—ñ—Ç–æ—Ä: {'‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ' if discord_monitor else '‚ùå –ù–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ'}")
        if discord_monitor:
            logger.info(f"üí¨ Discord –º–æ–Ω—ñ—Ç–æ—Ä –º–∞—î –∞—Ç—Ä–∏–±—É—Ç 'monitoring_channels': {'‚úÖ –¢–∞–∫' if hasattr(discord_monitor, 'monitoring_channels') else '‚ùå –ù—ñ'}")
            if hasattr(discord_monitor, 'monitoring_channels'):
                channels = getattr(discord_monitor, 'monitoring_channels', [])
                logger.info(f"üí¨ Discord –º–æ–Ω—ñ—Ç–æ—Ä: –∑–Ω–∞–π–¥–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª—ñ–≤: {channels}")
                logger.info(f"üí¨ Discord AUTHORIZATION: {'‚úÖ –Ñ' if DISCORD_AUTHORIZATION else '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
                
                if channels and DISCORD_AUTHORIZATION:
                    logger.info(f"üí¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {len(channels)} –∫–∞–Ω–∞–ª—ñ–≤")
                    try:
                        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ —è–∫—â–æ —â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ
                        if not hasattr(auto_start_monitoring, '_discord_started'):
                            discord_thread = threading.Thread(target=lambda: asyncio.run(start_discord_monitoring()))
                            discord_thread.daemon = True
                            discord_thread.start()
                            auto_start_monitoring._discord_started = True
                            logger.info("‚úÖ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                elif not channels:
                    logger.info("‚ÑπÔ∏è Discord –º–æ–Ω—ñ—Ç–æ—Ä: –Ω–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
                elif not DISCORD_AUTHORIZATION:
                    logger.warning("‚ö†Ô∏è Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π DISCORD_AUTHORIZATION")
            else:
                logger.warning("‚ö†Ô∏è Discord –º–æ–Ω—ñ—Ç–æ—Ä –Ω–µ –º–∞—î –∞—Ç—Ä–∏–±—É—Ç–∞ 'monitoring_channels'")
        else:
            logger.warning("‚ö†Ô∏è Discord –º–æ–Ω—ñ—Ç–æ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (DISCORD_AUTHORIZATION –≤—ñ–¥—Å—É—Ç–Ω—ñ–π?)")
        
        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")

# ===================== –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è Telegram chat_id =====================
def normalize_chat_id(chat_id_value: str) -> str:
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ chat_id: –¥–æ–¥–∞—î -100 –¥–ª—è –∫–∞–Ω–∞–ª—ñ–≤/—Å—É–ø–µ—Ä–≥—Ä—É–ø, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.
    –ü—Ä–∏–π–º–∞—î —Ä—è–¥–æ–∫ –∑ —Ü–∏—Ñ—Ä–∞–º–∏ –∞–±–æ –≤–∂–µ –≤–∞–ª—ñ–¥–Ω–∏–π –≤—ñ–¥'—î–º–Ω–∏–π chat_id."""
    try:
        val = str(chat_id_value).strip()
        original_val = val
        
        if val.startswith('@'):
            logger.debug(f"üîç Chat ID {original_val} –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —è–∫ username")
            return val  # username, –Ω–µ—Ö–∞–π Telegram –æ–±—Ä–æ–±–∏—Ç—å
        # –Ø–∫—â–æ –≤–∂–µ –≤—ñ–¥'—î–º–Ω–∏–π - –∑–∞–ª–∏—à–∞—î–º–æ
        if val.startswith('-'):
            logger.debug(f"üîç Chat ID {original_val} –≤–∂–µ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
            return val
        # –Ø–∫—â–æ —Ü–µ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ (–π–º–æ–≤—ñ—Ä–Ω–æ, –∫–∞–Ω–∞–ª/—Å—É–ø–µ—Ä–≥—Ä—É–ø–∞, —â–æ –ø–æ—Ç—Ä–µ–±—É—î -100)
        if val.isdigit():
            result = '-100' + val
            logger.debug(f"üîç Chat ID {original_val} –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–æ {result}")
            return result
        
        logger.debug(f"üîç Chat ID {original_val} –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω")
        return val
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó chat_id {chat_id_value}: {e}")
        return str(chat_id_value)

def create_project_thread_sync(bot_token: str, chat_id: str, project_name: str, project_tag: str, user_id: str = None) -> Optional[int]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ thread –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É –≤ –≥—Ä—É–ø—ñ"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î thread –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
        if user_id:
            existing_thread_id = get_project_thread_id(user_id, project_name, chat_id)
            if existing_thread_id:
                logger.info(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π thread {existing_thread_id} –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É '{project_name}'")
                return existing_thread_id
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–º—É –≤ –≥—Ä—É–ø—ñ –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
        url = f"https://api.telegram.org/bot{bot_token}/createForumTopic"
        data = {
            'chat_id': normalize_chat_id(chat_id),
            'name': f"{project_tag} {project_name}",
            'icon_color': 0x6FB9F0,  # –°–∏–Ω—ñ–π –∫–æ–ª—ñ—Ä
        }
        
        response = requests.post(url, data=data, timeout=10)
        
        # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –ø—ñ—Å–ª—è –∑–∞–ø–∏—Ç—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limit
        import time
        time.sleep(1)  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —à–≤–∏–¥—à–æ—ó —Ä–æ–±–æ—Ç–∏
        
        logger.info(f"üîß API –∑–∞–ø–∏—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è thread: {url}")
        logger.info(f"üîß API –¥–∞–Ω—ñ: {data}")
        logger.info(f"üîß API –≤—ñ–¥–ø–æ–≤—ñ–¥—å status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            logger.info(f"üîß API –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result}")
            if result.get('ok'):
                thread_id = result['result']['message_thread_id']
                logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ thread {thread_id} –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É '{project_name}' –∑ —Ç–µ–≥–æ–º {project_tag}")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ mapping thread_id –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É
                if user_id:
                    save_project_thread_id(user_id, project_name, chat_id, thread_id)
                
                return thread_id
            else:
                logger.error(f"‚ùå Telegram API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ thread: {result}")
                logger.error(f"‚ùå –ú–æ–∂–ª–∏–≤–æ –∫–∞–Ω–∞–ª {chat_id} –Ω–µ —î —Ñ–æ—Ä—É–º –≥—Ä—É–ø–æ—é. Forum —Ç–æ–ø—ñ–∫–∏ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ —Ñ–æ—Ä—É–º –≥—Ä—É–ø–∞—Ö.")
                return None
        else:
            try:
                result = response.json()
                logger.error(f"‚ùå HTTP {response.status_code} –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ thread: {result}")
            except:
                logger.error(f"‚ùå HTTP {response.status_code} –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ thread (–Ω–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å)")
            return None
            
        if response.status_code == 429:
            logger.warning(f"‚ö†Ô∏è Rate limit –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ thread, —á–µ–∫–∞—î–º–æ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –ø—ñ—Å–ª—è rate limit
            response2 = requests.post(url, data=data, timeout=10)
            if response2.status_code == 200:
                result2 = response2.json()
                if result2.get('ok'):
                    thread_id = result2['result']['message_thread_id']
                    logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ thread {thread_id} –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É '{project_name}' –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏")
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ mapping thread_id –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É
                    if user_id:
                        save_project_thread_id(user_id, project_name, chat_id, thread_id)
                    
                    return thread_id
            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ thread –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏: {response2.status_code}")
        else:
            logger.error(f"‚ùå HTTP –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ thread: {response.status_code}")
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è thread –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É '{project_name}': {e}")
        return None

async def create_project_thread(bot_token: str, chat_id: str, project_name: str, project_tag: str, user_id: str = None) -> Optional[int]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ thread –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É –≤ –≥—Ä—É–ø—ñ"""
    return create_project_thread_sync(bot_token, chat_id, project_name, project_tag, user_id)

def send_message_to_thread_sync(bot_token: str, chat_id: str, thread_id: int, text: str, project_tag: str = "") -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ thread –∑ —Ç–µ–≥–æ–º"""
    try:
        # –î–æ–¥–∞—î–º–æ —Ç–µ–≥ –¥–æ –ø–æ—á–∞—Ç–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if project_tag and not text.startswith(project_tag):
            tagged_text = f"{project_tag}\n\n{text}"
        else:
            tagged_text = text
            
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': normalize_chat_id(chat_id),
            'message_thread_id': thread_id,
            'text': tagged_text,
            'parse_mode': 'HTML'
        }
        
        logger.info(f"üîç –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ thread: chat_id={data['chat_id']}, thread_id={thread_id}, —Ç–µ–∫—Å—Ç –¥–æ–≤–∂–∏–Ω–æ—é {len(tagged_text)} —Å–∏–º–≤–æ–ª—ñ–≤")
        logger.debug(f"üîç –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {repr(tagged_text)}")
        
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ thread {thread_id} –∑ —Ç–µ–≥–æ–º {project_tag}")
                # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limit
                import time
                time.sleep(0.7)  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —à–≤–∏–¥—à–æ—ó —Ä–æ–±–æ—Ç–∏
                return True
            else:
                logger.error(f"‚ùå Telegram API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ thread: {result}")
        elif response.status_code == 429:
            # –û–±—Ä–æ–±–∫–∞ rate limit
            try:
                error_response = response.json()
                retry_after = error_response.get('parameters', {}).get('retry_after', 15)
                logger.warning(f"‚ö†Ô∏è Rate limit –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ thread, —á–µ–∫–∞—î–º–æ {retry_after} —Å–µ–∫—É–Ω–¥...")
                import time
                time.sleep(retry_after + 1)
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞
                response2 = requests.post(url, data=data, timeout=10)
                if response2.status_code == 200:
                    result2 = response2.json()
                    if result2.get('ok'):
                        logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ thread {thread_id} –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏")
                        time.sleep(1)
                        return True
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ rate limit: {e}")
        else:
            logger.error(f"‚ùå HTTP –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ thread: {response.status_code}")
            try:
                error_response = response.json()
                logger.error(f"‚ùå –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {error_response}")
            except:
                logger.error(f"‚ùå –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.text}")
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ thread {thread_id}: {e}")
        return False

async def send_message_to_thread(bot_token: str, chat_id: str, thread_id: int, text: str, project_tag: str = "") -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ thread –∑ —Ç–µ–≥–æ–º"""
    return send_message_to_thread_sync(bot_token, chat_id, thread_id, text, project_tag)

def send_photo_to_thread_sync(bot_token: str, chat_id: str, thread_id: int, photo_url: str, caption: str = "", project_tag: str = "") -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –≤ thread –∑ —Ç–µ–≥–æ–º"""
    try:
        # –î–æ–¥–∞—î–º–æ —Ç–µ–≥ –¥–æ –ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—Å—É
        if project_tag and caption and not caption.startswith(project_tag):
            tagged_caption = f"{project_tag} {caption}"
        elif project_tag and not caption:
            tagged_caption = project_tag
        else:
            tagged_caption = caption
            
        # –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        }
        
        response = requests.get(photo_url, headers=headers, timeout=15)
        response.raise_for_status()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ Telegram API
        url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
        
        files = {'photo': ('image.jpg', response.content, 'image/jpeg')}
        data = {
            'chat_id': normalize_chat_id(chat_id),
            'message_thread_id': thread_id,
            'caption': tagged_caption[:1024] if tagged_caption else '',  # –û–±–º–µ–∂–µ–Ω–Ω—è Telegram
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, files=files, data=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                logger.info(f"‚úÖ –§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ thread {thread_id} –∑ —Ç–µ–≥–æ–º {project_tag}")
                # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limit
                import time
                time.sleep(1)  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —à–≤–∏–¥—à–æ—ó —Ä–æ–±–æ—Ç–∏
                return True
            else:
                logger.error(f"‚ùå Telegram API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ç–æ –≤ thread: {result}")
        elif response.status_code == 429:
            # –û–±—Ä–æ–±–∫–∞ rate limit
            try:
                error_response = response.json()
                retry_after = error_response.get('parameters', {}).get('retry_after', 15)
                logger.warning(f"‚ö†Ô∏è Rate limit –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ç–æ –≤ thread, —á–µ–∫–∞—î–º–æ {retry_after} —Å–µ–∫—É–Ω–¥...")
                import time
                time.sleep(retry_after + 2)
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞
                response2 = requests.post(url, files=files, data=data, timeout=30)
                if response2.status_code == 200:
                    result2 = response2.json()
                    if result2.get('ok'):
                        logger.info(f"‚úÖ –§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ thread {thread_id} –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏")
                        time.sleep(1.5)
                        return True
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ rate limit –¥–ª—è —Ñ–æ—Ç–æ: {e}")
        else:
            logger.error(f"‚ùå HTTP –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ç–æ –≤ thread: {response.status_code}")
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ thread {thread_id}: {e}")
        return False

async def send_photo_to_thread(bot_token: str, chat_id: str, thread_id: int, photo_url: str, caption: str = "", project_tag: str = "") -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –≤ thread –∑ —Ç–µ–≥–æ–º"""
    return send_photo_to_thread_sync(bot_token, chat_id, thread_id, photo_url, caption, project_tag)

def send_message_with_photos_to_thread_sync(bot_token: str, chat_id: str, thread_id: int, text: str, photo_urls: List[str], project_tag: str = "") -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏ –≤ thread (—Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ)"""
    try:
        # –î–æ–¥–∞—î–º–æ —Ç–µ–≥ –¥–æ –ø–æ—á–∞—Ç–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if project_tag and not text.startswith(project_tag):
            tagged_text = f"{project_tag}\n\n{text}"
        else:
            tagged_text = text
        
        if not photo_urls:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            return send_message_to_thread_sync(bot_token, chat_id, thread_id, tagged_text, project_tag)
        
        # –Ø–∫—â–æ —î —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–µ —Ñ–æ—Ç–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sendPhoto –∑ caption
        if len(photo_urls) == 1:
            try:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                }
                
                response = requests.get(photo_urls[0], headers=headers, timeout=15)
                response.raise_for_status()
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ sendPhoto –∑ —Ç–µ–∫—Å—Ç–æ–º —è–∫ caption
                url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
                
                files = {'photo': ('image.jpg', response.content, 'image/jpeg')}
                data = {
                    'chat_id': normalize_chat_id(chat_id),
                    'message_thread_id': thread_id,
                    'caption': tagged_text[:1024] if tagged_text else '',  # –û–±–º–µ–∂–µ–Ω–Ω—è Telegram –¥–ª—è caption
                    'parse_mode': 'HTML'
                }
                
                response = requests.post(url, files=files, data=data, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('ok'):
                        logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ thread {thread_id}")
                        import time
                        time.sleep(1.5)
                        return True
                elif response.status_code == 429:
                    # –û–±—Ä–æ–±–∫–∞ rate limit
                    error_response = response.json()
                    retry_after = error_response.get('parameters', {}).get('retry_after', 15)
                    logger.warning(f"‚ö†Ô∏è Rate limit, —á–µ–∫–∞—î–º–æ {retry_after} —Å–µ–∫—É–Ω–¥...")
                    import time
                    time.sleep(retry_after + 2)
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞
                    response2 = requests.post(url, files=files, data=data, timeout=30)
                    if response2.status_code == 200:
                        result2 = response2.json()
                        if result2.get('ok'):
                            logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏")
                            time.sleep(1.5)
                            return True
                
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ: {response.status_code}")
                return False
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–¥–Ω–∏–º —Ñ–æ—Ç–æ: {e}")
                return False
        
        else:
            # –Ø–∫—â–æ –∫—ñ–ª—å–∫–∞ —Ñ–æ—Ç–æ, —Å–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç, –ø–æ—Ç—ñ–º –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É
            # –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            success = send_message_to_thread_sync(bot_token, chat_id, thread_id, tagged_text, "")
            if not success:
                return False
                
            # –ü–æ—Ç—ñ–º –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É –∑ —Ñ–æ—Ç–æ
            try:
                media = []
                for i, photo_url in enumerate(photo_urls[:10]):  # Telegram –¥–æ–∑–≤–æ–ª—è—î –º–∞–∫—Å–∏–º—É–º 10 –º–µ–¥—ñ–∞ –≤ –≥—Ä—É–ø—ñ
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    }
                    
                    response = requests.get(photo_url, headers=headers, timeout=15)
                    response.raise_for_status()
                    
                    media.append({
                        'type': 'photo',
                        'media': f'attach://photo{i}',
                        'caption': f'üì∑ {i+1}/{len(photo_urls)}' if i == 0 else ''  # Caption —Ç—ñ–ª—å–∫–∏ –Ω–∞ –ø–µ—Ä—à–æ–º—É —Ñ–æ—Ç–æ
                    })
                
                url = f"https://api.telegram.org/bot{bot_token}/sendMediaGroup"
                
                # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                files = {}
                for i, photo_url in enumerate(photo_urls[:10]):
                    response = requests.get(photo_url, headers=headers, timeout=15)
                    files[f'photo{i}'] = ('image.jpg', response.content, 'image/jpeg')
                
                data = {
                    'chat_id': normalize_chat_id(chat_id),
                    'message_thread_id': thread_id,
                    'media': json.dumps(media)
                }
                
                response = requests.post(url, files=files, data=data, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('ok'):
                        logger.info(f"‚úÖ –ú–µ–¥—ñ–∞-–≥—Ä—É–ø–∞ –∑ {len(photo_urls)} —Ñ–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ thread {thread_id}")
                        import time
                        time.sleep(2)
                        return True
                elif response.status_code == 429:
                    # –û–±—Ä–æ–±–∫–∞ rate limit
                    error_response = response.json()
                    retry_after = error_response.get('parameters', {}).get('retry_after', 15)
                    logger.warning(f"‚ö†Ô∏è Rate limit –¥–ª—è –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏, —á–µ–∫–∞—î–º–æ {retry_after} —Å–µ–∫—É–Ω–¥...")
                    import time
                    time.sleep(retry_after + 2)
                
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É: {response.status_code}")
                return False
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏: {e}")
                return False
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏ –≤ thread {thread_id}: {e}")
        return False

# ===================== –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤ –∑–∞ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ =====================
def get_users_tracking_discord_channel(channel_id: str) -> List[Dict]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ –ø—Ä–æ–µ–∫—Ç—ñ–≤, —â–æ –º–∞—é—Ç—å –ø—Ä–æ–µ–∫—Ç –∑ —Ü–∏–º Discord channel_id."""
    try:
        tracked_data: List[Dict] = []
        target = (channel_id or '').strip()
        for user_id_str, projects in project_manager.data.get('projects', {}).items():
            for p in projects:
                if p.get('platform') == 'discord':
                    cid = extract_discord_channel_id(p.get('url', ''))
                    if cid == target:
                        try:
                            tracked_data.append({
                                'user_id': int(user_id_str),
                                'project': p
                            })
                        except:
                            pass
        return tracked_data
    except Exception:
        return []

def get_discord_server_name(channel_id: str, guild_id: str) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É Discord —Å–µ—Ä–≤–µ—Ä–∞ –∑ –ø—Ä–æ–µ–∫—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –®—É–∫–∞—î–º–æ –ø—Ä–æ–µ–∫—Ç –∑ —Ü–∏–º channel_id
        for user_id_str, projects in project_manager.data.get('projects', {}).items():
            for project in projects:
                if project.get('platform') == 'discord':
                    project_channel_id = extract_discord_channel_id(project.get('url', ''))
                    if project_channel_id == channel_id:
                        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É —è–∫ –Ω–∞–∑–≤—É —Å–µ—Ä–≤–µ—Ä–∞
                        project_name = project.get('name', 'Discord')
                        # –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å "Discord", –Ω–µ –¥—É–±–ª—é—î–º–æ
                        if 'Discord' in project_name:
                            return project_name
                        else:
                            return f"Discord Server ({project_name})"
        
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑ guild_id
        return f"Discord Server ({guild_id})"
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ Discord —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return f"Discord Server ({guild_id})"

# ===================== –°–∏—Å—Ç–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è mapping'—É –≥—ñ–ª–æ–∫ =====================
def load_threads_mapping() -> Dict:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ mapping –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–æ thread_id"""
    try:
        with open('threads_mapping.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_threads_mapping(mapping: Dict) -> None:
    """–ó–±–µ—Ä–µ–≥—Ç–∏ mapping –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–æ thread_id"""
    try:
        with open('threads_mapping.json', 'w', encoding='utf-8') as f:
            json.dump(mapping, f, ensure_ascii=False, indent=2)
        logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ mapping –≥—ñ–ª–æ–∫: {len(mapping)} –∑–∞–ø–∏—Å—ñ–≤")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è mapping'—É –≥—ñ–ª–æ–∫: {e}")

def get_project_thread_id(user_id: str, project_name: str, chat_id: str) -> Optional[int]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ thread_id –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É"""
    mapping = load_threads_mapping()
    key = f"{user_id}_{project_name}_{chat_id}"
    thread_id = mapping.get(key)
    if thread_id:
        logger.debug(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ thread_id –¥–ª—è {project_name}: {thread_id}")
    else:
        logger.debug(f"üîç –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ thread_id –¥–ª—è {project_name}")
    return thread_id

def save_project_thread_id(user_id: str, project_name: str, chat_id: str, thread_id: int) -> None:
    """–ó–±–µ—Ä–µ–≥—Ç–∏ thread_id –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É"""
    mapping = load_threads_mapping()
    key = f"{user_id}_{project_name}_{chat_id}"
    mapping[key] = thread_id
    save_threads_mapping(mapping)
    logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ thread_id {thread_id} –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name}")

# ===================== –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤ –∑–∞ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ =====================
def get_users_tracking_twitter(username: str) -> List[Dict]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ –ø—Ä–æ–µ–∫—Ç—ñ–≤, —â–æ –º–∞—é—Ç—å –ø—Ä–æ–µ–∫—Ç –∑ —Ü–∏–º Twitter username."""
    try:
        tracked_data: List[Dict] = []
        target = (username or '').replace('@', '').strip().lower()
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"üîç –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è Twitter –∞–∫–∞—É–Ω—Ç–∞: '{target}'")
        
        for user_id_str, projects in project_manager.data.get('projects', {}).items():
            for p in projects:
                if p.get('platform') == 'twitter':
                    u = extract_twitter_username(p.get('url', '') or '')
                    if u:
                        project_username = u.replace('@', '').strip().lower()
                        logger.debug(f"   –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ '{project_username}' –∑ '{target}' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_str}")
                        if project_username == target:
                            tracked_data.append({
                                'user_id': int(user_id_str),
                                'project': p
                            })
                            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_str} –¥–ª—è Twitter –∞–∫–∞—É–Ω—Ç–∞ {target}")
                            break
        
        if not tracked_data:
            logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è Twitter –∞–∫–∞—É–Ω—Ç–∞ '{target}' - —Ç–≤—ñ—Ç –±—É–¥–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        
        return tracked_data
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ get_users_tracking_twitter –¥–ª—è {username}: {e}")
        return []


@require_auth
async def handle_forwarded_channel_setup(update: Update, context: ContextTypes.DEFAULT_TYPE, fwd_chat) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É –∑–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∑ –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–∏."""
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    try:
        chat_type = getattr(fwd_chat, 'type', '')
        chat_id = getattr(fwd_chat, 'id', None)
        title = getattr(fwd_chat, 'title', '') or getattr(fwd_chat, 'username', '') or 'Unknown'
        if not chat_id:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–∞–Ω–∞–ª—É —ñ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            return
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        channel_id_str = str(chat_id)
        project_manager.set_forward_channel(user_id, channel_id_str)
        # –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∫–∞–Ω–∞–ª
        try:
            await context.bot.send_message(
                chat_id=normalize_chat_id(channel_id_str),
                text=f"‚úÖ –ö–∞–Ω–∞–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{update.effective_user.username or user_id} –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å—é–¥–∏.")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∫–∞–Ω–∞–ª: {e}")
        await update.message.reply_text(
            f"‚úÖ –ê–≤—Ç–æ–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–ö–∞–Ω–∞–ª: {title}\nID: `{normalize_chat_id(channel_id_str)}`",
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {e}")

# ===================== –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è =====================
@require_auth
async def forward_enable_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    if project_manager.enable_forward(user_id):
        status = project_manager.get_forward_status(user_id)
        channel_id = status.get('channel_id') or '‚Äî'
        await update.message.reply_text(
            f"üü¢ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ü–æ—Ç–æ—á–Ω–∏–π –∫–∞–Ω–∞–ª: `{channel_id}`",
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.")

@require_auth
async def forward_disable_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    if project_manager.disable_forward(user_id):
        await update.message.reply_text("üî¥ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.")

@require_auth
async def forward_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    status = project_manager.get_forward_status(user_id)
    enabled = status.get('enabled', False)
    channel_id = status.get('channel_id') or '‚Äî'
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if enabled else 'üî¥ –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª: `{channel_id}`\n\n"
        f"–Ø–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª: –¥–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø—É —Ç–∞ –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–∞–º: @" + context.bot.username + " ping",
    )

@require_auth
async def forward_set_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text(
            "–í–∫–∞–∂—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É. –ü—Ä–∏–∫–ª–∞–¥: /forward_set_channel -1001234567890\n\n–ü—ñ–¥–∫–∞–∑–∫–∞: –ø—Ä–æ—Å—Ç—ñ—à–µ ‚Äî –∑–∞–π–¥—ñ—Ç—å —É –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –∫–∞–Ω–∞–ª —Ç–∞ –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: @"
            + context.bot.username + " ping (–±–æ—Ç –∑–±–µ—Ä–µ ID –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)")
        return
    channel_id = context.args[0]
    if project_manager.set_forward_channel(user_id, str(channel_id)):
        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: `{channel_id}`",
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–∞–Ω–∞–ª.")

@require_auth
async def forward_test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    channel_id = project_manager.get_forward_channel(user_id)
    if not channel_id:
        await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /forward_set_channel –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —É –∫–∞–Ω–∞–ª—ñ: @" + context.bot.username + " ping")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∂–∏–º thread'—ñ–≤
    forward_status = project_manager.get_forward_status(user_id)
    use_threads = forward_status.get('use_threads', True)
    
    try:
        if use_threads:
            # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ —Ä–µ–∂–∏–º—ñ thread'—ñ–≤
            user_projects = project_manager.get_user_projects(user_id)
            if not user_projects:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è thread'—ñ–≤")
                return
            
            # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç—É
            test_project = user_projects[0]
            project_id = test_project.get('id')
            project_name = test_project.get('name', 'Test Project')
            project_tag = test_project.get('tag', f"#test_{project_id}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ thread
            thread_id = project_manager.get_project_thread(user_id, project_id)
            
            if not thread_id:
                thread_id = create_project_thread_sync(BOT_TOKEN, channel_id, project_name, project_tag, str(user_id))
                
                if thread_id:
                    project_manager.set_project_thread(user_id, project_id, thread_id)
            
            if thread_id:
                test_text = (
                    f"üß™ **–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è thread'–∞**\n\n"
                    f"‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {project_name}\n"
                    f"‚Ä¢ –¢–µ–≥: {project_tag}\n"
                    f"‚Ä¢ Thread ID: {thread_id}\n"
                    f"‚Ä¢ –ß–∞—Å: {datetime.now().strftime('%H:%M:%S')}\n\n"
                    f"‚úÖ –Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º—ñ–π –≥—ñ–ª—Ü—ñ, —Ç–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
                )
                
                success = send_message_to_thread_sync(BOT_TOKEN, channel_id, thread_id, test_text, project_tag)
                
                if success:
                    await update.message.reply_text(f"‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—ñ–ª–∫—É '{project_name}' (Thread {thread_id})")
                else:
                    await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ thread {thread_id}")
            else:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –∑–Ω–∞–π—Ç–∏ thread")
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ—Å—Ç –±–µ–∑ thread'—ñ–≤
            text = (
                "#test_message\n\n"
                "‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
                "–¶–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤ —Ä–µ–∂–∏–º—ñ —Ç–µ–≥—ñ–≤."
            )
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {'chat_id': normalize_chat_id(channel_id), 'text': text}
            r = requests.post(url, data=data, timeout=5)
            if r.status_code == 200:
                await update.message.reply_text("‚úÖ –¢–µ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É –≤–∞—à –∫–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –∑ —Ç–µ–≥–æ–º.")
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —É –∫–∞–Ω–∞–ª: {r.status_code}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –í–∏–Ω—è—Ç–æ–∫: {e}")

@require_auth  
async def thread_test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ thread'–∞ –ø—Ä–æ–µ–∫—Ç—É"""
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            "üß™ **–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—ñ–ª–æ–∫ –ø—Ä–æ–µ–∫—Ç—ñ–≤**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /thread_test [project_id]\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
            "‚Ä¢ `/thread_test 1` - —Ç–µ—Å—Ç –ø–µ—Ä—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É\n"
            "‚Ä¢ `/thread_test` - —Ç–µ—Å—Ç –≤—Å—ñ—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤\n\n"
            "–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–≤–æ—Ä–∏—Ç—å –∞–±–æ –∑–Ω–∞–π–¥–µ –≥—ñ–ª–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        )
        return
    
    try:
        project_id = int(context.args[0])
        project = project_manager.get_project_by_id(user_id, project_id)
        
        if not project:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–µ–∫—Ç –∑ ID {project_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        forward_channel = project_manager.get_forward_channel(user_id)
        if not forward_channel:
            await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return
        
        project_name = project.get('name', 'Test Project')
        project_tag = project.get('tag', f"#test_{project_id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ thread
        thread_id = project_manager.get_project_thread(user_id, project_id)
        
        if not thread_id:
            thread_id = create_project_thread_sync(BOT_TOKEN, forward_channel, project_name, project_tag, str(user_id))
            
            if thread_id:
                project_manager.set_project_thread(user_id, project_id, thread_id)
        
        if thread_id:
            test_text = (
                f"üß™ **–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—ñ–ª–∫–∏ –ø—Ä–æ–µ–∫—Ç—É**\n\n"
                f"‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {project_name}\n"
                f"‚Ä¢ –¢–µ–≥: {project_tag}\n"
                f"‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {project.get('platform', 'unknown')}\n"
                f"‚Ä¢ URL: {project.get('url', '–Ω–µ–º–∞—î')}\n"
                f"‚Ä¢ Thread ID: {thread_id}\n"
                f"‚Ä¢ –ß–∞—Å —Ç–µ—Å—Ç—É: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ! –ì—ñ–ª–∫–∞ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
            )
            
            success = send_message_to_thread_sync(BOT_TOKEN, forward_channel, thread_id, test_text, project_tag)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ **–¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π!**\n\n"
                    f"–ü—Ä–æ–µ–∫—Ç: {project_name}\n"
                    f"–ì—ñ–ª–∫–∞: {thread_id}\n"
                    f"–¢–µ–≥: {project_tag}\n\n"
                    f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
                )
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –≥—ñ–ª–∫—É {thread_id}")
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –∑–Ω–∞–π—Ç–∏ –≥—ñ–ª–∫—É")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –ø—Ä–æ–µ–∫—Ç—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@require_auth  
async def setup_quick_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–®–≤–∏–¥–∫–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
    current_channel = project_manager.get_forward_channel(user_id)
    if current_channel:
        await update.message.reply_text(
            f"‚ÑπÔ∏è **–ö–∞–Ω–∞–ª –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –∫–∞–Ω–∞–ª: `{current_channel}`\n\n"
            f"üîÑ –î–ª—è –∑–º—ñ–Ω–∏ –∫–∞–Ω–∞–ª—É:\n"
            f"1. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É –≥—Ä—É–ø—É –∑ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–º–∏ Topics (–≥—ñ–ª–∫–∏)\n"
            f"2. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"3. –ù–∞–ø–∏—à—ñ—Ç—å –≤ –≥—Ä—É–ø—ñ: @{context.bot.username} ping\n\n"
            f"‚ö° –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/forward_set_channel <ID_–∫–∞–Ω–∞–ª—É>`"
        )
        return
    
    await update.message.reply_text(
        f"üöÄ **–®–≤–∏–¥–∫–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è**\n\n"
        f"üìã **–ö—Ä–æ–∫–∏:**\n"
        f"1. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É –≥—Ä—É–ø—É –≤ Telegram\n"
        f"2. –£–≤—ñ–º–∫–Ω—ñ—Ç—å Topics (–≥—ñ–ª–∫–∏) –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –≥—Ä—É–ø–∏\n"
        f"3. –î–æ–¥–∞–π—Ç–µ —Ü—å–æ–≥–æ –±–æ—Ç–∞ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ –ø—Ä–∞–≤–∞–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏\n"
        f"4. –ù–∞–ø–∏—à—ñ—Ç—å –≤ –≥—Ä—É–ø—ñ: `@{context.bot.username} ping`\n\n"
        f"‚úÖ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–ª–∞—à—Ç—É—î –≥—Ä—É–ø—É –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è!\n\n"
        f"üí° **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:** `/forward_set_channel <ID_–∫–∞–Ω–∞–ª—É>`"
    )

def cleanup_old_tweets():
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ç–≤—ñ—Ç–∏ –∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 200)"""
    global global_sent_tweets
    
    for account in global_sent_tweets:
        if len(global_sent_tweets[account]) > 200:
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Å–ø–∏—Å–æ–∫ —Ç–∞ –∑–∞–ª–∏—à–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 200 –∑–∞–ø–∏—Å—ñ–≤
            tweets_list = list(global_sent_tweets[account])
            
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ ID —Ç–≤—ñ—Ç—ñ–≤ —Ç–∞ —Ö–µ—à—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            tweet_ids = [t for t in tweets_list if not t.startswith('content_')]
            content_hashes = [t for t in tweets_list if t.startswith('content_')]
            
            # –ó–∞–ª–∏—à–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 100 ID —Ç–≤—ñ—Ç—ñ–≤ —Ç–∞ 100 —Ö–µ—à—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            tweet_ids = tweet_ids[-100:] if len(tweet_ids) > 100 else tweet_ids
            content_hashes = content_hashes[-100:] if len(content_hashes) > 100 else content_hashes
            
            # –û–±'—î–¥–Ω—É—î–º–æ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ
            global_sent_tweets[account] = set(tweet_ids + content_hashes)
            logger.info(f"–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ñ —Ç–≤—ñ—Ç–∏ –¥–ª—è {account}, –∑–∞–ª–∏—à–µ–Ω–æ {len(global_sent_tweets[account])} –∑–∞–ø–∏—Å—ñ–≤")

def reset_seen_tweets():
    """–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ seen_tweets —Ñ–∞–π–ª–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ–±–µ—Ä–µ–∂–Ω–æ!)"""
    global twitter_monitor, twitter_monitor_adapter
    
    try:
        import os
        
        # –û—á–∏—â–∞—î–º–æ —Ñ–∞–π–ª–∏ seen_tweets
        files_to_clear = [
            "twitter_api_seen_tweets.json",
            "twitter_monitor_seen_tweets.json"
        ]
        
        for file_path in files_to_clear:
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª {file_path}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É {file_path}: {e}")
        
        # –û—á–∏—â–∞—î–º–æ –ø–∞–º'—è—Ç—å –≤ –º–æ–Ω—ñ—Ç–æ—Ä–∞—Ö
        if twitter_monitor:
            twitter_monitor.seen_tweets = {}
            twitter_monitor.sent_tweets = {}
            logger.info("–û—á–∏—â–µ–Ω–æ seen_tweets –≤ Twitter Monitor")
            
        if twitter_monitor_adapter:
            twitter_monitor_adapter.seen_tweets = {}
            twitter_monitor_adapter.sent_tweets = {}
            logger.info("–û—á–∏—â–µ–Ω–æ seen_tweets –≤ Twitter Monitor Adapter")
            
        # –û—á–∏—â–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫
        global_sent_tweets.clear()
        logger.info("–û—á–∏—â–µ–Ω–æ global_sent_tweets")
        
        logger.info("‚úÖ –í—Å—ñ seen_tweets —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è seen_tweets: {e}")
        return False

def format_success_message(title: str, message: str, additional_info: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö"""
    formatted = f"‚úÖ {title}\n\n{message}"
    if additional_info:
        formatted += f"\n\nüí° {additional_info}"
    return formatted

def format_error_message(title: str, error: str, suggestion: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
    formatted = f"‚ùå {title}\n\n{error}"
    if suggestion:
        formatted += f"\n\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {suggestion}"
    return formatted

def format_info_message(title: str, message: str, details: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    formatted = f"‚ÑπÔ∏è {title}\n\n{message}"
    if details:
        formatted += f"\n\nüìã –î–µ—Ç–∞–ª—ñ:\n{details}"
    return formatted

def format_warning_message(title: str, message: str, action: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂—É–≤–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    formatted = f"‚ö†Ô∏è {title}\n\n{message}"
    if action:
        formatted += f"\n\nüîß –î—ñ—è: {action}"
    return formatted

async def delete_message_after_delay(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int, delay: int = 3):
    """–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å"""
    try:
        await asyncio.sleep(delay)
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")

async def safe_delete_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int):
    """–ë–µ–∑–ø–µ—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        return True
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")
        return False

def download_and_send_image(image_url: str, chat_id: str, caption: str = "") -> bool:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Telegram"""
    try:
        # –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è Twitter –∑–æ–±—Ä–∞–∂–µ–Ω—å —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if 'pbs.twimg.com/media/' in image_url and '?' not in image_url:
            image_url += '?format=jpg&name=medium'
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Referer': 'https://x.com/'
        }
        
        logger.info(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {image_url}")
        response = requests.get(image_url, headers=headers, timeout=15)
        response.raise_for_status()
        logger.info(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ, —Ä–æ–∑–º—ñ—Ä: {len(response.content)} –±–∞–π—Ç")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 20MB –¥–ª—è Telegram)
        if len(response.content) > 20 * 1024 * 1024:
            logger.warning(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ: {len(response.content)} –±–∞–π—Ç")
            return False
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        content_type = response.headers.get('content-type', '')
        if 'jpeg' in content_type or 'jpg' in content_type:
            suffix = '.jpg'
        elif 'png' in content_type:
            suffix = '.png'
        elif 'webp' in content_type:
            suffix = '.webp'
        else:
            suffix = '.jpg'  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as temp_file:
            temp_file.write(response.content)
            temp_file_path = temp_file.name
        
        try:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram API
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
            
            with open(temp_file_path, 'rb') as photo_file:
                files = {'photo': photo_file}
                data = {
                    'chat_id': normalize_chat_id(chat_id),
                    'caption': caption[:1024] if caption else '',  # Telegram –æ–±–º–µ–∂—É—î caption –¥–æ 1024 —Å–∏–º–≤–æ–ª—ñ–≤
                }
                
                response = requests.post(url, files=files, data=data, timeout=30)
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {chat_id}")
                    return True
                else:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {response.status_code}")
                    logger.error(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                    return False
                    
        finally:
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_file_path)
            except:
                pass
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        return False

def get_main_menu_keyboard(user_id: Optional[int] = None) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    keyboard = [
        # –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        [InlineKeyboardButton("üìã –ú–æ—ó –ø—Ä–æ–µ–∫—Ç–∏", callback_data="my_projects"),
         InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç", callback_data="add_project")],
        
        # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        [InlineKeyboardButton("üê¶ Twitter", callback_data="twitter_adapter"),
         InlineKeyboardButton("üí¨ Discord", callback_data="discord_history")],
        
        # –®–≤–∏–¥–∫—ñ –¥—ñ—ó
        [InlineKeyboardButton("‚ö° –®–≤–∏–¥–∫—ñ –¥—ñ—ó", callback_data="quick_actions"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è", callback_data="forward_settings"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")],
        
        # –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        [InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help"),
         InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞", callback_data="about")]
    ]
    
    # –î–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    if user_id and access_manager.is_admin(user_id):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    return InlineKeyboardMarkup(keyboard)

def get_platform_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üê¶ Twitter/X", callback_data="platform_twitter")],
        [InlineKeyboardButton("üí¨ Discord", callback_data="platform_discord")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_projects_menu_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
    projects = project_manager.get_user_projects(user_id)
    selenium_accounts = project_manager.get_selenium_accounts()
    
    keyboard = []
    
    # Twitter –ø—Ä–æ–µ–∫—Ç–∏
    twitter_projects = [p for p in projects if p['platform'] == 'twitter']
    if twitter_projects:
        keyboard.append([InlineKeyboardButton("üê¶ Twitter –ø—Ä–æ–µ–∫—Ç–∏", callback_data="twitter_projects")])
    
    # Discord –ø—Ä–æ–µ–∫—Ç–∏
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    if discord_projects:
        keyboard.append([InlineKeyboardButton("üí¨ Discord –ø—Ä–æ–µ–∫—Ç–∏", callback_data="discord_projects")])
    
    # Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç–∏
    if selenium_accounts:
        keyboard.append([InlineKeyboardButton("üöÄ Twitter Monitor Adapter", callback_data="twitter_adapter_accounts")])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ Twitter", callback_data="add_twitter")])
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ Discord", callback_data="add_discord")])
    keyboard.append([InlineKeyboardButton("üöÄ –î–æ–¥–∞—Ç–∏ Twitter Adapter", callback_data="add_twitter_adapter")])
    
    # –ù–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_twitter_projects_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É Twitter –ø—Ä–æ–µ–∫—Ç—ñ–≤"""
    projects = project_manager.get_user_projects(user_id)
    twitter_projects = [p for p in projects if p['platform'] == 'twitter']
    
    keyboard = []
    
    for project in twitter_projects:
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –Ω–∞–∑–≤–∏
        name = project['name'][:20] + "..." if len(project['name']) > 20 else project['name']
        keyboard.append([
            InlineKeyboardButton(f"üê¶ {name}", callback_data=f"view_twitter_{project['id']}"),
            InlineKeyboardButton("‚ùå", callback_data=f"delete_twitter_{project['id']}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ Twitter", callback_data="add_twitter")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="projects_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_discord_projects_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤"""
    projects = project_manager.get_user_projects(user_id)
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    
    keyboard = []
    
    for project in discord_projects:
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –Ω–∞–∑–≤–∏
        name = project['name'][:20] + "..." if len(project['name']) > 20 else project['name']
        keyboard.append([
            InlineKeyboardButton(f"üí¨ {name}", callback_data=f"view_discord_{project['id']}"),
            InlineKeyboardButton("‚ùå", callback_data=f"delete_discord_{project['id']}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ Discord", callback_data="add_discord")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="projects_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_twitter_adapter_accounts_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç—ñ–≤"""
    twitter_adapter_accounts = project_manager.get_selenium_accounts()
    
    keyboard = []
    
    for username in twitter_adapter_accounts:
        keyboard.append([
            InlineKeyboardButton(f"üöÄ @{username}", callback_data=f"view_twitter_adapter_{username}"),
            InlineKeyboardButton("‚ùå", callback_data=f"delete_twitter_adapter_{username}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ Twitter Adapter", callback_data="add_twitter_adapter")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="projects_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_history_count_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    keyboard = [
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 5", callback_data="history_5")],
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 10", callback_data="history_10")],
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 20", callback_data="history_20")],
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 50", callback_data="history_50")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_discord_channels_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ Discord –∫–∞–Ω–∞–ª–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    projects = project_manager.get_user_projects(user_id)
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    
    keyboard = []
    for project in discord_projects:
        keyboard.append([InlineKeyboardButton(
            f"üí¨ {project['name']}", 
            callback_data=f"channel_{project['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_forward_settings_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
    forward_status = project_manager.get_forward_status(user_id)
    use_threads = forward_status.get('use_threads', True)
    
    keyboard = []
    
    if forward_status['enabled']:
        keyboard.append([InlineKeyboardButton("üî¥ –í–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è", callback_data="disable_forward")])
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="change_channel")])
    else:
        keyboard.append([InlineKeyboardButton("üü¢ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è", callback_data="enable_forward")])
        keyboard.append([InlineKeyboardButton("üìù –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="set_channel")])
    
    # –î–æ–¥–∞—î–º–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è thread'–∞–º–∏
    threads_text = "üßµ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–µ–≥–∏" if use_threads else "üßµ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≥—ñ–ª–∫–∏"
    threads_action = "disable_threads" if use_threads else "enable_threads"
    keyboard.append([InlineKeyboardButton(threads_text, callback_data=threads_action)])
    
    if use_threads and forward_status['enabled']:
        keyboard.append([InlineKeyboardButton("üß™ –¢–µ—Å—Ç –≥—ñ–ª–æ–∫", callback_data="test_threads")])
        keyboard.append([InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—ñ–ª–∫–∞–º–∏", callback_data="manage_threads")])
    
    keyboard.append([InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="auto_setup")])
    keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="forward_status")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_quick_actions_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π"""
    keyboard = [
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏", callback_data="start_all_monitors")],
        [InlineKeyboardButton("‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏", callback_data="stop_all_monitors")],
        [InlineKeyboardButton("üìä –®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="quick_stats")],
        [InlineKeyboardButton("üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="diagnostics")],
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data="recent_messages")],
        [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data="refresh_data")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_help_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–æ–ø–æ–º–æ–≥–∏"""
    keyboard = [
        [InlineKeyboardButton("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏", callback_data="help_getting_started")],
        [InlineKeyboardButton("üê¶ Twitter –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="help_twitter")],
        [InlineKeyboardButton("üí¨ Discord –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="help_discord")],
        [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è", callback_data="help_forwarding")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="help_settings")],
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="help_faq")],
        [InlineKeyboardButton("üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="help_support")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_settings_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    keyboard = [
        [InlineKeyboardButton("üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="settings_notifications")],
        [InlineKeyboardButton("‚è∞ –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É", callback_data="settings_intervals")],
        [InlineKeyboardButton("üé® –¢–µ–º–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É", callback_data="settings_theme")],
        [InlineKeyboardButton("üåê –ú–æ–≤–∞", callback_data="settings_language")],
        [InlineKeyboardButton("üîí –ë–µ–∑–ø–µ–∫–∞", callback_data="settings_security")],
        [InlineKeyboardButton("üìä –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="settings_export")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_diagnostics_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–æ—Ç–∞", callback_data="check_bot_status")],
        [InlineKeyboardButton("üì∫ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª—ñ–≤", callback_data="test_channels")],
        [InlineKeyboardButton("üîó Discord API", callback_data="test_discord_api")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data="reload_data")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_panel_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ"""
    keyboard = [
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîß –°–∏—Å—Ç–µ–º–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è", callback_data="admin_system")],
        [InlineKeyboardButton("üìã –í—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏", callback_data="admin_all_projects")],
        [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç", callback_data="admin_create_for_user")],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∏", callback_data="admin_search")],
        [InlineKeyboardButton("üìà –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥", callback_data="admin_monitoring")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_users_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_list_users")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_user_stats")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_add_user")],
        [InlineKeyboardButton("üëë –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_admin")],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_search_user")],
        [InlineKeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å", callback_data="admin_change_role")],
        [InlineKeyboardButton("üîê –°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å", callback_data="admin_reset_password")],
        [InlineKeyboardButton("üîÅ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è", callback_data="admin_forward")],
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_delete_user")],
        [InlineKeyboardButton("üìà –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_user_activity")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_forward_keyboard(target_user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    status = project_manager.get_forward_status(target_user_id)
    enabled = status.get('enabled', False)
    keyboard = []
    if enabled:
        keyboard.append([InlineKeyboardButton("üî¥ –í–∏–º–∫–Ω—É—Ç–∏", callback_data=f"admin_forward_disable_{target_user_id}")])
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data=f"admin_forward_set_{target_user_id}")])
    else:
        keyboard.append([InlineKeyboardButton("üü¢ –£–≤—ñ–º–∫–Ω—É—Ç–∏", callback_data=f"admin_forward_enable_{target_user_id}")])
        keyboard.append([InlineKeyboardButton("üìù –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data=f"admin_forward_set_{target_user_id}")])
    keyboard.append([
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data=f"admin_forward_status_{target_user_id}"),
        InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data=f"admin_forward_test_{target_user_id}")
    ])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
    return InlineKeyboardMarkup(keyboard)

def get_admin_system_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏", callback_data="admin_system_stats")],
        [InlineKeyboardButton("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º–∏", callback_data="admin_system_logs")],
        [InlineKeyboardButton("üíæ –ë–µ–∫–∞–ø —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è", callback_data="admin_backup_restore")],
        [InlineKeyboardButton("üîÑ –û—á–∏—Å—Ç–∏—Ç–∏ —Å–µ—Å—ñ—ó", callback_data="admin_cleanup_sessions")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à", callback_data="admin_clear_cache")],
        [InlineKeyboardButton("ÔøΩÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ seen_tweets", callback_data="admin_clear_seen_tweets")],
        [InlineKeyboardButton("ÔøΩüîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏", callback_data="admin_system_config")],
        [InlineKeyboardButton("‚ö†Ô∏è –°–∫–∏–Ω—É—Ç–∏ —Å–∏—Å—Ç–µ–º—É", callback_data="admin_reset_system")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_search_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø–æ—à—É–∫—É —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤"""
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_search_users")],
        [InlineKeyboardButton("üìã –ü–æ—à—É–∫ –ø—Ä–æ–µ–∫—Ç—ñ–≤", callback_data="admin_search_projects")],
        [InlineKeyboardButton("üìä –§—ñ–ª—å—Ç—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_stats_filters")],
        [InlineKeyboardButton("üìÖ –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é", callback_data="admin_date_filter")],
        [InlineKeyboardButton("üè∑Ô∏è –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–µ–≥–∞–º–∏", callback_data="admin_tag_filter")],
        [InlineKeyboardButton("üìà –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="admin_advanced_analytics")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_monitoring_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    keyboard = [
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É", callback_data="admin_monitoring_status")],
        [InlineKeyboardButton("üîî –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å", callback_data="admin_notifications")],
        [InlineKeyboardButton("‚è∞ –†–æ–∑–∫–ª–∞–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É", callback_data="admin_monitoring_schedule")],
        [InlineKeyboardButton("üìä –õ–æ–≥–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É", callback_data="admin_monitoring_logs")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥", callback_data="admin_restart_monitoring")],
        [InlineKeyboardButton("‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ", callback_data="admin_response_time")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_settings_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    keyboard = [
        [InlineKeyboardButton("üîê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏", callback_data="admin_security_settings")],
        [InlineKeyboardButton("üé® –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É", callback_data="admin_ui_settings")],
        [InlineKeyboardButton("üì± –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞", callback_data="admin_bot_settings")],
        [InlineKeyboardButton("üåê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ", callback_data="admin_network_settings")],
        [InlineKeyboardButton("üíæ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", callback_data="admin_storage_settings")],
        [InlineKeyboardButton("üîß –†–æ–∑—à–∏—Ä–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_advanced_settings")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_stats_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_general_stats")],
        [InlineKeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_user_stats")],
        [InlineKeyboardButton("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç—ñ–≤", callback_data="admin_project_stats")],
        [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∏", callback_data="admin_charts")],
        [InlineKeyboardButton("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥", callback_data="admin_period_stats")],
        [InlineKeyboardButton("üîç –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="admin_detailed_analytics")],
        [InlineKeyboardButton("üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="admin_export_data")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
    ]
    return InlineKeyboardMarkup(keyboard)

def escape_html(text: str) -> str:
    """–ï–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è HTML"""
    if not text:
        return ""
    return str(text).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')

def extract_twitter_username(url: str) -> Optional[str]:
    """–í–∏—Ç—è–≥—Ç–∏ username –∑ Twitter URL –∞–±–æ –ø—Ä–æ—Å—Ç–æ username"""
    try:
        if not url:
            return None
            
        url = url.strip()
        
        # –Ø–∫—â–æ —Ü–µ –ø–æ–≤–Ω–∏–π URL –∑ twitter.com –∞–±–æ x.com
        if 'twitter.com' in url or 'x.com' in url:
            # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ—Ç–æ–∫–æ–ª
            url = url.replace('https://', '').replace('http://', '')
            
            # –í–∏–¥–∞–ª—è—î–º–æ www
            if url.startswith('www.'):
                url = url[4:]
                
            # –í–∏—Ç—è–≥—É—î–º–æ username
            if url.startswith('twitter.com/'):
                username = url.split('/')[1]
            elif url.startswith('x.com/'):
                username = url.split('/')[1]
            else:
                return None
                
            # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            username = username.split('?')[0].split('#')[0]
            
            return username if username else None
            
        # –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ username (–±–µ–∑ URL)
        elif url and not url.startswith('http') and not '/' in url:
            # –í–∏–¥–∞–ª—è—î–º–æ @ —è–∫—â–æ —î
            username = url.replace('@', '').strip()
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –≤–∞–ª—ñ–¥–Ω–∏–π username (—Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏, –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è)
            if username and username.replace('_', '').replace('-', '').isalnum():
                return username
            
        return None
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Twitter username –∑ '{url}': {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É
    if access_manager.is_authorized(user_id):
        # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–µ—Å—ñ—ó
        access_manager.update_session_activity(user_id)
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        twitter_adapter_status = "üöÄ –ê–∫—Ç–∏–≤–Ω–∏–π" if twitter_monitor_adapter and twitter_monitor_adapter.monitoring_active else "‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
        twitter_adapter_count = len(twitter_monitor_adapter.monitoring_accounts) if twitter_monitor_adapter else 0
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_role = access_manager.get_user_role(user_id)
        role_emoji = "üëë" if user_role == "admin" else "üë§"
        role_text = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if user_role == "admin" else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        
        welcome_text = format_success_message(
            f"–ü—Ä–∏–≤—ñ—Ç, {username}!",
            f"{role_emoji} **–†–æ–ª—å:** {role_text}\n"
            "‚úÖ –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\n"
            f"üöÄ **Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥:** {twitter_adapter_status}\n"
            f"üìä **–ê–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:** {twitter_adapter_count}",
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö –±–æ—Ç–∞."
        )
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏
        if update.message:
            asyncio.create_task(safe_delete_message(context, update.effective_chat.id, update.message.message_id))
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ ID
        menu_message = await update.message.reply_text(
            welcome_text,
            reply_markup=get_main_menu_keyboard(user_id),
        )
        main_menu_messages[user_id] = menu_message.message_id
    else:
        auth_text = format_info_message(
            f"–ü—Ä–∏–≤—ñ—Ç, {username}!",
            "üîê –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è",
            "‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É\n"
            "‚Ä¢ –Ø–∫—â–æ –≤–∏ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ –ü—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π"
        )
        await update.message.reply_text(auth_text, )

async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
    if access_manager.is_authorized(user_id):
        # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–µ—Å—ñ—ó
        access_manager.update_session_activity(user_id)
        await update.message.reply_text(
            "‚úÖ –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ!",
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ
    user_data = access_manager.get_user_by_telegram_id(user_id)
    if not user_data:
        await update.message.reply_text(
            "‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**\n\n"
            "–í–∞—à Telegram ID –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ.\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.",
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–∏–π
    if not user_data.get("is_active", True):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!**\n\n"
            "–í–∞—à –∞–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π.\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        )
        return
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ –ø–∞—Ä–æ–ª—å
    await update.message.reply_text(
        "üîê –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.",
    )
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏
    if update.message:
        asyncio.create_task(safe_delete_message(context, update.effective_chat.id, update.message.message_id))
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
    waiting_for_password[user_id] = True

async def logout_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ —Å–∏—Å—Ç–µ–º–∏"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    if access_manager.is_authorized(user_id):
        access_manager.logout_user(user_id)
        await update.message.reply_text(
            "üëã **–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏!**\n\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login",
        )
    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.",
        )

async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not access_manager.check_permission(user_id, "can_manage_users"):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n"
            "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /register <telegram_id> <username> [password]\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /register 123456789 JohnDoe mypassword",
        )
        return
    
    try:
        target_telegram_id = int(context.args[0])
        username = context.args[1] if len(context.args) > 1 else ""
        password = context.args[2] if len(context.args) > 2 else None
        
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        new_user_id = access_manager.add_user(target_telegram_id, username or "Unknown", password or "")
        
        if new_user_id:
            await update.message.reply_text(
                f"‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!**\n\n"
                f"‚Ä¢ Telegram ID: {target_telegram_id}\n"
                f"‚Ä¢ Username: {username}\n"
                f"‚Ä¢ User ID: {new_user_id}\n"
                f"‚Ä¢ –ü–∞—Ä–æ–ª—å: {password or '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'}",
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
            )
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
            "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /register 123456789 JohnDoe",
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {str(e)}",
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id if update.effective_user else None
    message_text = update.message.text if update.message else None
    # –î–æ–¥–∞—î–º–æ user_id —É —Å–ø–∏—Å–æ–∫ –ø—ñ–Ω–≥–æ–≤–∞–Ω–∏—Ö –¥–ª—è Discord, —è–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è –≤–≤–µ–¥–µ–Ω–Ω—è
    if 'awaiting_ping_user_discord' in context.user_data:
        state = context.user_data['awaiting_ping_user_discord']
        project_id = state['project_id']
        if message_text.isdigit():
            new_uid = message_text.strip()
            project_manager.add_project_ping_user(user_id, project_id, new_uid)
            del context.user_data['awaiting_ping_user_discord']
            project = project_manager.get_project_by_id(user_id, project_id)
            ping_users = project_manager.get_project_ping_users(user_id, project_id)
            text = f"üë§ <b>–ö–æ–≥–æ –ø—ñ–Ω–≥—É–≤–∞—Ç–∏ –¥–ª—è Discord-–ø—Ä–æ–µ–∫—Ç—É:</b> <b>{project['name']}</b>\n\n"
            if ping_users:
                text += "–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ user_id –¥–ª—è –ø—ñ–Ω–≥—É:\n"
                for uid2 in ping_users:
                    text += f"‚Ä¢ <code>{uid2}</code>\n"
            else:
                text += "–ù–∞—Ä–∞–∑—ñ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n"
            text += "\n–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ user_id –¥–ª—è –ø—ñ–Ω–≥—É.\n–í–≤–µ–¥—ñ—Ç—å user_id –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."
            keyboard = []
            for uid2 in ping_users:
                keyboard.append([InlineKeyboardButton(f"‚ùå {uid2}", callback_data=f"remove_ping_discord_{project_id}_{uid2}")])
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ user_id", callback_data=f"add_ping_discord_{project_id}")])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_discord_{project_id}")])
            await update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
        elif message_text == "/cancel":
            del context.user_data['awaiting_ping_user_discord']
            await update.message.reply_text("–î–æ–¥–∞–≤–∞–Ω–Ω—è user_id —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        else:
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id (—á–∏—Å–ª–æ) –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
        return
    # –î–æ–¥–∞—î–º–æ user_id —É —Å–ø–∏—Å–æ–∫ –ø—ñ–Ω–≥–æ–≤–∞–Ω–∏—Ö, —è–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è –≤–≤–µ–¥–µ–Ω–Ω—è
    if 'awaiting_ping_user' in context.user_data:
        state = context.user_data['awaiting_ping_user']
        project_id = state['project_id']
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ
        if message_text.isdigit():
            new_uid = message_text.strip()
            project_manager.add_project_ping_user(user_id, project_id, new_uid)
            del context.user_data['awaiting_ping_user']
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –ø—ñ–Ω–≥—ñ–≤
            project = project_manager.get_project_by_id(user_id, project_id)
            ping_users = project_manager.get_project_ping_users(user_id, project_id)
            text = f"üë§ <b>–ö–æ–≥–æ –ø—ñ–Ω–≥—É–≤–∞—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É:</b> <b>{project['name']}</b>\n\n"
            if ping_users:
                text += "–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ user_id –¥–ª—è –ø—ñ–Ω–≥—É:\n"
                for uid2 in ping_users:
                    text += f"‚Ä¢ <code>{uid2}</code>\n"
            else:
                text += "–ù–∞—Ä–∞–∑—ñ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n"
            text += "\n–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ user_id –¥–ª—è –ø—ñ–Ω–≥—É.\n–í–≤–µ–¥—ñ—Ç—å user_id –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."
            keyboard = []
            for uid2 in ping_users:
                keyboard.append([InlineKeyboardButton(f"‚ùå {uid2}", callback_data=f"remove_ping_{project_id}_{uid2}")])
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ user_id", callback_data=f"add_ping_{project_id}")])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_twitter_{project_id}")])
            await update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
        elif message_text == "/cancel":
            del context.user_data['awaiting_ping_user']
            await update.message.reply_text("–î–æ–¥–∞–≤–∞–Ω–Ω—è user_id —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        else:
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id (—á–∏—Å–ª–æ) –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
        return
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω–µ –≤—ñ–¥ –∫–∞–Ω–∞–ª—É)
    if not update.effective_user or not update.message:
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–µ –∫–∞–Ω–∞–ª
    if update.message.chat.type in ['channel', 'supergroup']:
        # –Ø–∫—â–æ —Ü–µ –∫–∞–Ω–∞–ª, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±–æ—Ç–∞ –ø—ñ–Ω–≥–Ω—É–ª–∏
        if update.message.text and '@' in update.message.text:
            # –®—É–∫–∞—î–º–æ username –±–æ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç—ñ
            bot_username = context.bot.username
            if bot_username and f'@{bot_username}' in update.message.text:
                # –ë–æ—Ç–∞ –ø—ñ–Ω–≥–Ω—É–ª–∏ –≤ –∫–∞–Ω–∞–ª—ñ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
                await handle_channel_ping(update, context)
        return
        
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª—É —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–∏
    # –Ø–∫—â–æ –∞–¥–º—ñ–Ω —É —Å—Ç–∞–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äî –æ–±—Ä–æ–±–∏–º–æ –≤ —Å–ø–µ—Ü. —Ö–µ–Ω–¥–ª–µ—Ä—ñ –Ω–∏–∂—á–µ
    try:
        fwd_chat = getattr(update.message, 'forward_from_chat', None)
        if fwd_chat and update.message.chat.type == 'private':
            if not (user_id in user_states and user_states[user_id]['state'] == 'admin_forward_set_channel'):
                await handle_forwarded_channel_setup(update, context, fwd_chat)
                return
    except Exception:
        pass
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—á—ñ–∫—É—î –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
    if user_id in waiting_for_password:
        # –í–ê–ñ–õ–ò–í–û: –ù–µ–≥–∞–π–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–ø–µ–∫–∏
        if update.message:
            asyncio.create_task(safe_delete_message(context, update.effective_chat.id, update.message.message_id))
        
        # –°–ø—Ä–æ–±—É—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É
        if message_text and access_manager.authenticate_user(user_id, message_text):
            del waiting_for_password[user_id]
            # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–µ—Å—ñ—ó
            access_manager.update_session_activity(user_id)
            success_text = format_success_message(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!",
                "–í–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–ª–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞.",
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏."
            )
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ ID
            menu_message = await update.message.reply_text(
                success_text,
                reply_markup=get_main_menu_keyboard(user_id),
            )
            main_menu_messages[user_id] = menu_message.message_id
        else:
            error_text = format_error_message(
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å!",
                "–í–≤–µ–¥–µ–Ω–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É.",
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—é."
            )
            await update.message.reply_text(error_text, )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É
    if not access_manager.is_authorized(user_id):
        await update.message.reply_text(
            "üîê **–î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ!**\n\n"
            "–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.",
        )
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    security_manager.update_user_activity(user_id)
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–∞–Ω –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É
    if user_id in user_states:
        if user_states[user_id]['state'] == 'adding_project':
            await handle_project_creation(update, context)
        elif user_states[user_id]['state'] == 'setting_forward_channel':
            await handle_forward_channel_setting(update, context)
        elif user_states[user_id]['state'] == 'admin_forward_select_user':
            await handle_admin_forward_select_user(update, context)
        elif user_states[user_id]['state'] == 'admin_forward_set_channel':
            await handle_admin_forward_set_channel(update, context)
        elif user_states[user_id]['state'] == 'admin_creating_project_for_user':
            await handle_admin_create_project_for_user(update, context)
        elif user_states[user_id]['state'] == 'adding_twitter':
            await handle_twitter_addition(update, context)
        elif user_states[user_id]['state'] == 'adding_discord':
            await handle_discord_addition(update, context)
        elif user_states[user_id]['state'] == 'adding_twitter_adapter':
            await handle_twitter_adapter_addition(update, context)
        elif user_states[user_id]['state'] == 'admin_creating_user':
            await handle_admin_user_creation(update, context)
        elif user_states[user_id]['state'] == 'admin_creating_admin':
            await handle_admin_admin_creation(update, context)
        elif user_states[user_id]['state'] == 'admin_searching_user':
            await handle_admin_user_search(update, context)
        elif user_states[user_id]['state'] == 'admin_deleting_user':
            await handle_admin_user_deletion(update, context)
        elif user_states[user_id]['state'] == 'admin_changing_role':
            await handle_admin_role_change(update, context)
        elif user_states[user_id]['state'] == 'admin_resetting_password':
            await handle_admin_password_reset(update, context)
        elif user_states[user_id]['state'] == 'admin_resetting_system':
            await handle_admin_system_reset(update, context)
        return
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏ —á–∞—Ç—É
    if update.message and not message_text.startswith('/'):
        asyncio.create_task(safe_delete_message(context, update.effective_chat.id, update.message.message_id))
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏
    if message_text and message_text.startswith('/'):
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞–∫–æ–∂ –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏
        if update.message:
            asyncio.create_task(safe_delete_message(context, update.effective_chat.id, update.message.message_id))
        await handle_command(update, context, message_text)
    else:
        # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        if user_id in main_menu_messages:
            try:
                # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –ø—ñ–¥–∫–∞–∑–∫–æ—é
                hint_text = format_info_message(
                    "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é",
                    f"–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: \"{message_text[:50]}{'...' if len(message_text) > 50 else ''}\"",
                    f"‚Ä¢ –ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {security_manager.get_session_time_left(user_id)} —Å–µ–∫—É–Ω–¥\n"
                    "‚Ä¢ –î–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ\n"
                    "‚Ä¢ –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
                )
                await context.bot.edit_message_text(
                    text=hint_text,
                    chat_id=update.effective_chat.id,
                    message_id=main_menu_messages[user_id],
                    reply_markup=get_main_menu_keyboard(user_id),
                )
            except Exception:
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –º–µ–Ω—é
                menu_message = await update.message.reply_text(
                    format_info_message(
                        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é",
                        "–î–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ",
                        f"–ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {security_manager.get_session_time_left(user_id)} —Å–µ–∫—É–Ω–¥"
                    ),
                    reply_markup=get_main_menu_keyboard(user_id),
                )
                main_menu_messages[user_id] = menu_message.message_id
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            menu_message = await update.message.reply_text(
                format_info_message(
                    "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é",
                    "–î–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ",
                    f"–ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {security_manager.get_session_time_left(user_id)} —Å–µ–∫—É–Ω–¥"
                ),
                reply_markup=get_main_menu_keyboard(user_id),
            )
            main_menu_messages[user_id] = menu_message.message_id

async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE, command: str) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    if command == '/status':
        time_left = security_manager.get_session_time_left(user_id)
        await update.message.reply_text(
            f"–°—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó:\n"
            f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π: {'–¢–∞–∫' if security_manager.is_user_authorized(user_id) else '–ù—ñ'}\n"
            f"–ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {time_left} —Å–µ–∫—É–Ω–¥"
        )
    elif command == '/logout':
        security_manager.deauthorize_user(user_id)
        await update.message.reply_text("–í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏.")
    elif command == '/help':
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
            "/status - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó\n"
            "/logout - –í–∏–π—Ç–∏ –∑ —Å–∏—Å—Ç–µ–º–∏\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
        )
    else:
        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    if not update.callback_query or not update.effective_user:
        return
    
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
    if not access_manager.is_authorized(user_id):
        await query.edit_message_text(
            "üîê **–î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ!**\n\n"
            "–í–∞—à–∞ —Å–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.",
        )
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    access_manager.update_session_activity(user_id)
    
    # –î–æ–¥–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    if not project_manager.get_user_data(user_id):
        project_manager.add_user(user_id, {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        })
    else:
        project_manager.update_user_last_seen(user_id)
    
    callback_data = query.data
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ callback_data –Ω–µ —î None
    if callback_data is None:
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ callback",
            reply_markup=get_main_menu_keyboard(user_id)
        )
        return
    
    if callback_data == "main_menu":
        # –û–Ω–æ–≤–ª—é—î–º–æ ID –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_menu_messages[user_id] = query.message.message_id
        
        welcome_text = format_success_message(
            "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
            "–í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ —Ü–µ –º–µ–Ω—é."
        )
        await query.edit_message_text(
            welcome_text,
            reply_markup=get_main_menu_keyboard(user_id),
        )
    elif callback_data == "add_project":
        await query.edit_message_text(
            "‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É\n\n–û–±–µ—Ä—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:",
            reply_markup=get_platform_keyboard()
        )
    elif callback_data == "my_projects":
        projects_text = format_info_message(
            "–ú–æ—ó –ø—Ä–æ–µ–∫—Ç–∏",
            "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∞—à–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É",
            "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏, –¥–æ–¥–∞–≤–∞—Ç–∏ —Ç–∞ –≤–∏–¥–∞–ª—è—Ç–∏ —Å–≤–æ—ó –ø—Ä–æ–µ–∫—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter —Ç–∞ Discord."
        )
        await query.edit_message_text(
            projects_text,
            reply_markup=get_projects_menu_keyboard(user_id),
        )
    elif callback_data == "projects_menu":
        await query.edit_message_text(
            "üìã –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
            reply_markup=get_projects_menu_keyboard(user_id)
        )
    elif callback_data == "twitter_projects":
        await query.edit_message_text(
            "üê¶ Twitter –ø—Ä–æ–µ–∫—Ç–∏\n\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
            reply_markup=get_twitter_projects_keyboard(user_id)
        )
    elif callback_data == "discord_projects":
        await query.edit_message_text(
            "üí¨ Discord –ø—Ä–æ–µ–∫—Ç–∏\n\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
            reply_markup=get_discord_projects_keyboard(user_id)
        )
    elif callback_data == "twitter_adapter_accounts":
        await query.edit_message_text(
            "üöÄ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç–∏\n\n–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
            reply_markup=get_twitter_adapter_accounts_keyboard()
        )
    elif callback_data == "add_twitter":
        user_states[user_id] = {
            'state': 'adding_twitter',
            'data': {}
        }
        await query.edit_message_text(
            "üê¶ –î–æ–¥–∞–≤–∞–Ω–Ω—è Twitter –∞–∫–∞—É–Ω—Ç–∞\n\n–í–≤–µ–¥—ñ—Ç—å username –∞–∫–∞—É–Ω—Ç–∞ (–±–µ–∑ @):"
        )
    elif callback_data == "add_discord":
        user_states[user_id] = {
            'state': 'adding_discord',
            'data': {}
        }
        await query.edit_message_text(
            "üí¨ –î–æ–¥–∞–≤–∞–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É\n\n–í–≤–µ–¥—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É:"
        )
    elif callback_data == "add_twitter_adapter":
        user_states[user_id] = {
            'state': 'adding_twitter_adapter',
            'data': {}
        }
        await query.edit_message_text(
            "üöÄ –î–æ–¥–∞–≤–∞–Ω–Ω—è Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç–∞\n\n–í–≤–µ–¥—ñ—Ç—å username –∞–∫–∞—É–Ω—Ç–∞ (–±–µ–∑ @):"
        )
    elif callback_data == "platform_twitter":
        user_states[user_id] = {
            'state': 'adding_project',
            'data': {'platform': 'twitter'}
        }
        await query.edit_message_text(
            "üê¶ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É Twitter/X\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É:"
        )
    elif callback_data == "platform_discord":
        user_states[user_id] = {
            'state': 'adding_project',
            'data': {'platform': 'discord'}
        }
        await query.edit_message_text(
            "üí¨ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É Discord\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É:"
        )
    elif callback_data == "help":
        await query.edit_message_text(
            "‚ùì **–°–∏—Å—Ç–µ–º–∞ –¥–æ–ø–æ–º–æ–≥–∏**\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:",
            reply_markup=get_help_keyboard()
        )
    elif callback_data == "twitter_adapter":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        twitter_adapter_status = "üöÄ –ê–∫—Ç–∏–≤–Ω–∏–π" if twitter_monitor_adapter and twitter_monitor_adapter.monitoring_active else "‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
        twitter_adapter_count = len(twitter_monitor_adapter.monitoring_accounts) if twitter_monitor_adapter else 0
        
        twitter_adapter_text = (
            "üê¶ **Twitter Monitor Adapter –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥**\n\n"
            f"üìä **–°—Ç–∞—Ç—É—Å:** {twitter_adapter_status}\n"
            f"üë• **–ê–∫–∞—É–Ω—Ç—ñ–≤:** {twitter_adapter_count}\n"
            f"üîÑ **–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫:** ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n\n"
            "üîß **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n"
            "‚Ä¢ `/twitter_add username` - –î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç\n"
            "‚Ä¢ `/twitter_test username` - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ `/twitter_start` - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ `/twitter_stop` - –ó—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ `/twitter_remove username` - –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç\n\n"
            "üìù **–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
            "1. `/twitter_add pilk_xz` - –¥–æ–¥–∞–π—Ç–µ –∞–∫–∞—É–Ω—Ç\n"
            "2. `/twitter_test pilk_xz` - –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ\n"
            "3. `/twitter_start` - –∑–∞–ø—É—Å—Ç—ñ—Ç—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n"
            "4. –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!\n\n"
            "üí° **–ü–µ—Ä–µ–≤–∞–≥–∏ Twitter Monitor Adapter:**\n"
            "‚Ä¢ –®–≤–∏–¥–∫–∏–π API –¥–æ—Å—Ç—É–ø\n"
            "‚Ä¢ –ù–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
            "‚Ä¢ –û–±—Ö—ñ–¥ –æ–±–º–µ–∂–µ–Ω—å API\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –∑ –±–æ—Ç–æ–º"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            twitter_adapter_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    elif callback_data.startswith("delete_twitter_adapter_"):
        username = callback_data.replace("delete_twitter_adapter_", "")
        try:
            project_manager.remove_selenium_account(username)
            if twitter_monitor_adapter:
                twitter_monitor_adapter.remove_account(username)
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–º—ñ–Ω
            sync_monitors_with_projects()
            await query.edit_message_text(
                f"‚úÖ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç @{username} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!",
                reply_markup=get_twitter_adapter_accounts_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞: {e}",
                reply_markup=get_twitter_adapter_accounts_keyboard()
            )
    elif callback_data.startswith("view_discord_"):
        project_id = int(callback_data.replace("view_discord_", ""))
        project = project_manager.get_project_by_id(user_id, project_id)
        if project:
            text = f"üí¨ <b>Discord –ø—Ä–æ–µ–∫—Ç: {project['name']}</b>\n\n"
            text += f"üìù <b>–û–ø–∏—Å:</b> {project.get('description', '–ù–µ–º–∞—î –æ–ø–∏—Å—É')}\n"
            text += f"üîó <b>URL:</b> {project.get('url', '–ù–µ–º–∞—î URL')}\n"
            text += f"üìÖ <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {project.get('created_at', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            text += f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–∏–π' if project.get('is_active', True) else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}"
            keyboard = [
                [InlineKeyboardButton("üë§ –ö–æ–≥–æ –ø—ñ–Ω–≥—É–≤–∞—Ç–∏", callback_data=f"ping_menu_discord_{project_id}")],
                [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_discord_{project_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="discord_projects")]
            ]
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
    elif callback_data.startswith("ping_menu_discord_"):
        project_id = int(callback_data.replace("ping_menu_discord_", ""))
        project = project_manager.get_project_by_id(user_id, project_id)
        if project:
            ping_users = project_manager.get_project_ping_users(user_id, project_id)
            text = f"üë§ <b>–ö–æ–≥–æ –ø—ñ–Ω–≥—É–≤–∞—Ç–∏ –¥–ª—è Discord-–ø—Ä–æ–µ–∫—Ç—É:</b> <b>{project['name']}</b>\n\n"
            if ping_users:
                text += "–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ user_id –¥–ª—è –ø—ñ–Ω–≥—É:\n"
                for uid in ping_users:
                    text += f"‚Ä¢ <code>{uid}</code>\n"
            else:
                text += "–ù–∞—Ä–∞–∑—ñ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n"
            text += "\n–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ user_id –¥–ª—è –ø—ñ–Ω–≥—É.\n–í–≤–µ–¥—ñ—Ç—å user_id –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."
            keyboard = []
            for uid in ping_users:
                keyboard.append([InlineKeyboardButton(f"‚ùå {uid}", callback_data=f"remove_ping_discord_{project_id}_{uid}")])
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ user_id", callback_data=f"add_ping_discord_{project_id}")])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_discord_{project_id}")])
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
    elif callback_data.startswith("remove_ping_discord_"):
        # remove_ping_discord_{project_id}_{uid}
        parts = callback_data.split("_")
        project_id = int(parts[3])
        uid = parts[4]
        project_manager.remove_project_ping_user(user_id, project_id, uid)
        project = project_manager.get_project_by_id(user_id, project_id)
        ping_users = project_manager.get_project_ping_users(user_id, project_id)
        text = f"üë§ <b>–ö–æ–≥–æ –ø—ñ–Ω–≥—É–≤–∞—Ç–∏ –¥–ª—è Discord-–ø—Ä–æ–µ–∫—Ç—É:</b> <b>{project['name']}</b>\n\n"
        if ping_users:
            text += "–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ user_id –¥–ª—è –ø—ñ–Ω–≥—É:\n"
            for uid2 in ping_users:
                text += f"‚Ä¢ <code>{uid2}</code>\n"
        else:
            text += "–ù–∞—Ä–∞–∑—ñ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n"
        text += "\n–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ user_id –¥–ª—è –ø—ñ–Ω–≥—É.\n–í–≤–µ–¥—ñ—Ç—å user_id –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."
        keyboard = []
        for uid2 in ping_users:
            keyboard.append([InlineKeyboardButton(f"‚ùå {uid2}", callback_data=f"remove_ping_discord_{project_id}_{uid2}")])
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ user_id", callback_data=f"add_ping_discord_{project_id}")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_discord_{project_id}")])
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    elif callback_data.startswith("add_ping_discord_"):
        project_id = int(callback_data.replace("add_ping_discord_", ""))
        await query.edit_message_text(
            f"–í–≤–µ–¥—ñ—Ç—å user_id, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É –ø—ñ–Ω–≥–æ–≤–∞–Ω–∏—Ö –¥–ª—è —Ü—å–æ–≥–æ Discord-–ø—Ä–æ–µ–∫—Ç—É.\n\n–ü—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ —É —á–∞—Ç.\n\n<code>/cancel</code> ‚Äî —Å–∫–∞—Å—É–≤–∞—Ç–∏.",
            parse_mode="HTML"
        )
        context.user_data['awaiting_ping_user_discord'] = {'project_id': project_id}
    elif callback_data.startswith("add_ping_"):
        # –î–ª—è Twitter-–ø—Ä–æ–µ–∫—Ç—ñ–≤ (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ Discord)
        project_id = int(callback_data.replace("add_ping_", ""))
        await query.edit_message_text(
            f"–í–≤–µ–¥—ñ—Ç—å user_id, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É –ø—ñ–Ω–≥–æ–≤–∞–Ω–∏—Ö –¥–ª—è —Ü—å–æ–≥–æ Twitter-–ø—Ä–æ–µ–∫—Ç—É.\n\n–ü—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ —É —á–∞—Ç.\n\n<code>/cancel</code> ‚Äî —Å–∫–∞—Å—É–≤–∞—Ç–∏.",
            parse_mode="HTML"
        )
        context.user_data['awaiting_ping_user'] = {'project_id': project_id}
    elif callback_data.startswith("view_twitter_"):
        project_id = int(callback_data.replace("view_twitter_", ""))
        project = project_manager.get_project_by_id(user_id, project_id)
        if project:
            text = f"üê¶ <b>Twitter –ø—Ä–æ–µ–∫—Ç: {project['name']}</b>\n\n"
            text += f"üìù <b>–û–ø–∏—Å:</b> {project.get('description', '–ù–µ–º–∞—î –æ–ø–∏—Å—É')}\n"
            text += f"üîó <b>URL:</b> {project.get('url', '–ù–µ–º–∞—î URL')}\n"
            text += f"üìÖ <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {project.get('created_at', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            text += f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–∏–π' if project.get('is_active', True) else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}"
            keyboard = [
                [InlineKeyboardButton("üë§ –ö–æ–≥–æ –ø—ñ–Ω–≥—É–≤–∞—Ç–∏", callback_data=f"ping_menu_{project_id}")],
                [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_twitter_{project_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="twitter_projects")]
            ]
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
    elif callback_data.startswith("ping_menu_"):
        project_id = int(callback_data.replace("ping_menu_", ""))
        project = project_manager.get_project_by_id(user_id, project_id)
        if project:
            ping_users = project_manager.get_project_ping_users(user_id, project_id)
            text = f"üë§ <b>–ö–æ–≥–æ –ø—ñ–Ω–≥—É–≤–∞—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É:</b> <b>{project['name']}</b>\n\n"
            if ping_users:
                text += "–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ user_id –¥–ª—è –ø—ñ–Ω–≥—É:\n"
                for uid in ping_users:
                    text += f"‚Ä¢ <code>{uid}</code>\n"
            else:
                text += "–ù–∞—Ä–∞–∑—ñ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n"
            text += "\n–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ user_id –¥–ª—è –ø—ñ–Ω–≥—É.\n–í–≤–µ–¥—ñ—Ç—å user_id –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."
            keyboard = []
            for uid in ping_users:
                keyboard.append([InlineKeyboardButton(f"‚ùå {uid}", callback_data=f"remove_ping_{project_id}_{uid}")])
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ user_id", callback_data=f"add_ping_{project_id}")])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_twitter_{project_id}")])
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
    elif callback_data.startswith("view_discord_"):
        project_id = int(callback_data.replace("view_discord_", ""))
        project = project_manager.get_project_by_id(user_id, project_id)
        if project:
            text = f"üí¨ **Discord –ø—Ä–æ–µ–∫—Ç: {project['name']}**\n\n"
            text += f"üìù **–û–ø–∏—Å:** {project.get('description', '–ù–µ–º–∞—î –æ–ø–∏—Å—É')}\n"
            text += f"üîó **URL:** {project.get('url', '–ù–µ–º–∞—î URL')}\n"
            text += f"üìÖ **–°—Ç–≤–æ—Ä–µ–Ω–æ:** {project.get('created_at', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            text += f"üîÑ **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–Ω–∏–π' if project.get('is_active', True) else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}"
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_discord_{project_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="discord_projects")]
            ]
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
    elif callback_data.startswith("view_twitter_adapter_"):
        username = callback_data.replace("view_twitter_adapter_", "")
        twitter_adapter_accounts = project_manager.get_selenium_accounts()
        if username in twitter_adapter_accounts:
            account_data = project_manager.data['selenium_accounts'][username]
            text = f"üöÄ **Twitter Monitor Adapter: @{username}**\n\n"
            text += f"üìÖ **–î–æ–¥–∞–Ω–æ:** {account_data.get('added_at', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            text += f"üë§ **–î–æ–¥–∞–≤:** {account_data.get('added_by', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            text += f"üîÑ **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–Ω–∏–π' if account_data.get('is_active', True) else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}\n"
            text += f"‚è∞ **–û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:** {account_data.get('last_checked', '–ù—ñ–∫–æ–ª–∏')}"
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_twitter_adapter_{username}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="twitter_adapter_accounts")]
            ]
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
    elif callback_data == "account_manager":
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤
        projects = project_manager.get_user_projects(user_id)
        
        if not projects:
            await query.edit_message_text(
                "üîß **–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤**\n\n‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.\n\n–î–æ–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
        twitter_projects = [p for p in projects if p['platform'] == 'twitter']
        discord_projects = [p for p in projects if p['platform'] == 'discord']
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫
        text = "üîß **–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤**\n\n"
        
        if twitter_projects:
            text += "üê¶ **Twitter/X –∞–∫–∞—É–Ω—Ç–∏:**\n"
            for i, project in enumerate(twitter_projects, 1):
                project_username: Optional[str] = extract_twitter_username(project['url'])
                if project_username:
                    text += f"{i}. @{project_username} ({project['name']})\n"
            text += "\n"
        
        if discord_projects:
            text += "üí¨ **Discord –∫–∞–Ω–∞–ª–∏:**\n"
            for i, project in enumerate(discord_projects, 1):
                channel_id = extract_discord_channel_id(project['url'])
                text += f"{i}. –ö–∞–Ω–∞–ª {channel_id} ({project['name']})\n"
            text += "\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        text += "üîß **–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:**\n"
        text += "‚Ä¢ /remove_twitter username - –≤–∏–¥–∞–ª–∏—Ç–∏ Twitter –∞–∫–∞—É–Ω—Ç\n"
        text += "‚Ä¢ /remove_discord channel_id - –≤–∏–¥–∞–ª–∏—Ç–∏ Discord –∫–∞–Ω–∞–ª\n"
        text += "‚Ä¢ /accounts - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    elif callback_data == "discord_history":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î Discord –ø—Ä–æ–µ–∫—Ç–∏
        projects = project_manager.get_user_projects(user_id)
        discord_projects = [p for p in projects if p['platform'] == 'discord']
        
        if not discord_projects:
            await query.edit_message_text(
                "üìú –Ü—Å—Ç–æ—Ä—ñ—è Discord\n\n‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó.\n\n–î–æ–¥–∞–π—Ç–µ Discord –ø—Ä–æ–µ–∫—Ç —Å–ø–æ—á–∞—Ç–∫—É.",
                reply_markup=get_main_menu_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "üìú –Ü—Å—Ç–æ—Ä—ñ—è Discord\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:",
                reply_markup=get_discord_channels_keyboard(user_id)
            )
    elif callback_data.startswith("channel_"):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –∫–∞–Ω–∞–ª –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
        project_id = int(callback_data.split("_")[1])
        project = project_manager.get_project_by_id(user_id, project_id)
        
        if project:
            user_states[user_id] = {
                'state': 'viewing_history',
                'data': {'project': project}
            }
            await query.edit_message_text(
                f"üìú –Ü—Å—Ç–æ—Ä—ñ—è –∫–∞–Ω–∞–ª—É: {project['name']}\n\n–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
                reply_markup=get_history_count_keyboard()
            )
    elif callback_data.startswith("history_"):
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        count = int(callback_data.split("_")[1])
        await handle_discord_history(update, context, count)
    elif callback_data == "settings":
        await query.edit_message_text(
            "‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è**\n\n"
            "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ –ø—ñ–¥ —Å–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏:",
            reply_markup=get_settings_keyboard(user_id)
        )
    elif callback_data == "forward_settings":
        forward_status = project_manager.get_forward_status(user_id)
        
        if forward_status['enabled']:
            status_text = f"üì¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n‚úÖ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ\nüì∫ –ö–∞–Ω–∞–ª: {forward_status['channel_id']}\nüïí –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {forward_status['created_at'][:19] if forward_status['created_at'] else '–ù–µ–≤—ñ–¥–æ–º–æ'}\n\nüí° –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª, –Ω–µ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        else:
            status_text = "üì¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n‚ùå –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ\n\n–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤.\n\nüí° –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª."
        
        await query.edit_message_text(
            status_text,
            reply_markup=get_forward_settings_keyboard(user_id)
        )
    elif callback_data == "enable_forward":
        if project_manager.enable_forward(user_id):
            await query.edit_message_text(
                "‚úÖ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
    elif callback_data == "disable_forward":
        if project_manager.disable_forward(user_id):
            await query.edit_message_text(
                "üî¥ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
    elif callback_data in ["set_channel", "change_channel"]:
        user_states[user_id] = {
            'state': 'setting_forward_channel',
            'data': {}
        }
        await query.edit_message_text(
            "üìù –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
            "**–°–ø–æ—Å—ñ–± 1 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "1. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "2. –ü—ñ–Ω–≥–Ω—ñ—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ: @parseryamatobot\n"
            "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–ª–∞—à—Ç—É—î –∫–∞–Ω–∞–ª\n\n"
            "**–°–ø–æ—Å—ñ–± 2 - –†—É—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "–í–≤–µ–¥—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É –∞–±–æ username –∫–∞–Ω–∞–ª—É:\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
            "‚Ä¢ @channel_username\n"
            "‚Ä¢ -1001234567890 (ID –∫–∞–Ω–∞–ª—É)\n"
            "‚Ä¢ channel_username (–±–µ–∑ @)\n\n"
            "üí° –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!"
        )
    elif callback_data == "auto_setup":
        bot_username = context.bot.username
        await query.edit_message_text(
            f"ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É**\n\n"
            f"–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É:\n\n"
            f"1Ô∏è‚É£ **–î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª**\n"
            f"   ‚Ä¢ –î–æ–¥–∞–π—Ç–µ @{bot_username} –≤ –∫–∞–Ω–∞–ª —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"   ‚Ä¢ –ù–∞–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n\n"
            f"2Ô∏è‚É£ **–ü—ñ–Ω–≥–Ω—ñ—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ**\n"
            f"   ‚Ä¢ –ù–∞–ø–∏—à—ñ—Ç—å –≤ –∫–∞–Ω–∞–ª—ñ: @{bot_username}\n"
            f"   ‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–ª–∞—à—Ç—É—î –∫–∞–Ω–∞–ª\n\n"
            f"3Ô∏è‚É£ **–ì–æ—Ç–æ–≤–æ!**\n"
            f"   ‚Ä¢ –ö–∞–Ω–∞–ª –±—É–¥–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n"
            f"   ‚Ä¢ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è\n\n"
            f"üí° **–ü–µ—Ä–µ–≤–∞–≥–∏:**\n"
            f"‚Ä¢ –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ ID –∫–∞–Ω–∞–ª—É\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
            f"‚Ä¢ –ú–∏—Ç—Ç—î–≤–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
            reply_markup=get_forward_settings_keyboard(user_id)
        )
    elif callback_data == "forward_status":
        forward_status = project_manager.get_forward_status(user_id)
        user_projects = project_manager.get_user_projects(user_id)
        discord_projects = [p for p in user_projects if p['platform'] == 'discord']
        twitter_projects = [p for p in user_projects if p['platform'] == 'twitter']
        use_threads = forward_status.get('use_threads', True)
        
        status_text = (
            f"üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if forward_status['enabled'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
            f"üì∫ –ö–∞–Ω–∞–ª: {forward_status['channel_id'] or '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n"
            f"üßµ –†–µ–∂–∏–º: {'–ì—ñ–ª–∫–∏ (threads)' if use_threads else '–¢–µ–≥–∏ –≤ –∫–∞–Ω–∞–ª—ñ'}\n"
            f"üìã –ü—Ä–æ–µ–∫—Ç—ñ–≤: Discord {len(discord_projects)}, Twitter {len(twitter_projects)}\n"
            f"üïí –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {forward_status['created_at'][:19] if forward_status['created_at'] else '–ù–µ–≤—ñ–¥–æ–º–æ'}\n\n"
        )
        
        if use_threads:
            status_text += "üßµ **–†–µ–∂–∏–º –≥—ñ–ª–æ–∫**: –ö–æ–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç –º–∞—î —Å–≤–æ—é –æ–∫—Ä–µ–º—É –≥—ñ–ª–∫—É –≤ –≥—Ä—É–ø—ñ\n"
            project_threads = forward_status.get('project_threads', {})
            if project_threads:
                status_text += f"üîß –ê–∫—Ç–∏–≤–Ω–∏—Ö –≥—ñ–ª–æ–∫: {len(project_threads)}\n"
        else:
            status_text += "üè∑Ô∏è **–†–µ–∂–∏–º —Ç–µ–≥—ñ–≤**: –í—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ –∑ —Ç–µ–≥–∞–º–∏ –ø—Ä–æ–µ–∫—Ç—ñ–≤\n"
        
        status_text += "\nüí° –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª.\n\n"
        
        if forward_status['enabled'] and (discord_projects or twitter_projects):
            status_text += "üì¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤:\n"
            for project in discord_projects + twitter_projects:
                platform_emoji = "üí¨" if project['platform'] == 'discord' else "üê¶"
                project_tag = project.get('tag', f"#{project['platform']}_project_{project['id']}")
                status_text += f"‚Ä¢ {platform_emoji} {project['name']} ({project_tag})\n"
        elif not discord_projects and not twitter_projects:
            status_text += "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."
        
        await query.edit_message_text(
            status_text,
            reply_markup=get_forward_settings_keyboard(user_id)
        )
    elif callback_data == "enable_threads":
        # –£–≤—ñ–º–∫–Ω—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è thread'—ñ–≤
        forward_status = project_manager.get_forward_status(user_id)
        if forward_status['enabled']:
            project_manager.data['settings']['forward_settings'][str(user_id)]['use_threads'] = True
            project_manager.save_data()
            await query.edit_message_text(
                "üßµ **–†–µ–∂–∏–º –≥—ñ–ª–æ–∫ —É–≤—ñ–º–∫–Ω–µ–Ω–æ!**\n\n"
                "–¢–µ–ø–µ—Ä –∫–æ–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ –º–∞—Ç–∏ —Å–≤–æ—é –æ–∫—Ä–µ–º—É –≥—ñ–ª–∫—É –≤ –≥—Ä—É–ø—ñ.\n"
                "–¶–µ –¥–æ–∑–≤–æ–ª—è—î –∫—Ä–∞—â–µ –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ª–µ–≥—à–µ —ó—Ö –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏.\n\n"
                "üí° **–ü–µ—Ä–µ–≤–∞–≥–∏ –≥—ñ–ª–æ–∫:**\n"
                "‚Ä¢ –ö–æ–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç –≤ –æ–∫—Ä–µ–º—ñ–π –≥—ñ–ª—Ü—ñ\n"
                "‚Ä¢ –ó—Ä—É—á–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—ñ–ª–æ–∫\n"
                "‚Ä¢ –¢–µ–≥–∏ –≤ –Ω–∞–∑–≤—ñ –≥—ñ–ª–∫–∏",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–º–∫–Ω—ñ—Ç—å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∫–∞–Ω–∞–ª.",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
    elif callback_data == "disable_threads":
        # –í–∏–º–∫–Ω—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è thread'—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–µ–≥–∏)
        forward_status = project_manager.get_forward_status(user_id)
        if forward_status['enabled']:
            project_manager.data['settings']['forward_settings'][str(user_id)]['use_threads'] = False
            project_manager.save_data()
            await query.edit_message_text(
                "üè∑Ô∏è **–†–µ–∂–∏–º —Ç–µ–≥—ñ–≤ —É–≤—ñ–º–∫–Ω–µ–Ω–æ!**\n\n"
                "–¢–µ–ø–µ—Ä –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª –∑ —Ç–µ–≥–∞–º–∏ –ø—Ä–æ–µ–∫—Ç—ñ–≤.\n"
                "–ö–æ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç–µ–≥ –ø—Ä–æ–µ–∫—Ç—É –Ω–∞ –ø–æ—á–∞—Ç–∫—É.\n\n"
                "üí° **–ü–µ—Ä–µ–≤–∞–≥–∏ —Ç–µ–≥—ñ–≤:**\n"
                "‚Ä¢ –í—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ\n"
                "‚Ä¢ –õ–µ–≥–∫–∏–π –ø–æ—à—É–∫ –∑–∞ —Ç–µ–≥–∞–º–∏\n"
                "‚Ä¢ –ü—Ä–æ—Å—Ç–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
                "‚Ä¢ –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑—ñ —Å—Ç–∞—Ä–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–º–∫–Ω—ñ—Ç—å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∫–∞–Ω–∞–ª.",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
    elif callback_data == "test_threads":
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è thread'—ñ–≤
        forward_status = project_manager.get_forward_status(user_id)
        if not forward_status['enabled']:
            await query.edit_message_text(
                "‚ùå –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
            return
        
        user_projects = project_manager.get_user_projects(user_id)
        if not user_projects:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
            return
        
        forward_channel = forward_status['channel_id']
        test_results = []
        
        for project in user_projects[:3]:  # –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä—à—ñ 3 –ø—Ä–æ–µ–∫—Ç–∏
            project_id = project.get('id')
            project_name = project.get('name', 'Test Project')
            project_tag = project.get('tag', f"#test_{project_id}")
            
            try:
                # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –∑–Ω–∞–π—Ç–∏ thread
                thread_id = project_manager.get_project_thread(user_id, project_id)
                
                if not thread_id:
                    thread_id = create_project_thread_sync(BOT_TOKEN, forward_channel, project_name, project_tag, str(user_id))
                    
                    if thread_id:
                        project_manager.set_project_thread(user_id, project_id, thread_id)
                
                if thread_id:
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ thread
                    test_text = (
                        f"üß™ **–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è**\n\n"
                        f"‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {project_name}\n"
                        f"‚Ä¢ –¢–µ–≥: {project_tag}\n"
                        f"‚Ä¢ Thread ID: {thread_id}\n"
                        f"‚Ä¢ –ß–∞—Å: {datetime.now().strftime('%H:%M:%S')}\n\n"
                        f"‚úÖ –Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≥—ñ–ª–∫–∞ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
                    )
                    
                    success = send_message_to_thread_sync(BOT_TOKEN, forward_channel, thread_id, test_text, project_tag)
                    
                    if success:
                        test_results.append(f"‚úÖ {project_name} (thread {thread_id})")
                    else:
                        test_results.append(f"‚ùå {project_name} - –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
                else:
                    test_results.append(f"‚ùå {project_name} - –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ thread")
                    
            except Exception as e:
                test_results.append(f"‚ùå {project_name} - –ø–æ–º–∏–ª–∫–∞: {str(e)[:50]}")
        
        result_text = (
            f"üß™ **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—ñ–ª–æ–∫**\n\n"
            f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len(test_results)}\n\n"
            + "\n".join(test_results) +
            f"\n\nüí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–∞–Ω–∞–ª {forward_channel} –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."
        )
        
        await query.edit_message_text(
            result_text,
            reply_markup=get_forward_settings_keyboard(user_id)
        )
    elif callback_data == "manage_threads":
        # –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è thread'–∞–º–∏
        forward_status = project_manager.get_forward_status(user_id)
        user_projects = project_manager.get_user_projects(user_id)
        project_threads = forward_status.get('project_threads', {})
        
        threads_info = []
        for project in user_projects:
            project_id = str(project.get('id'))
            project_name = project.get('name', 'Unknown')
            project_tag = project.get('tag', f"#project_{project_id}")
            thread_id = project_threads.get(project_id)
            
            if thread_id:
                threads_info.append(f"üßµ {project_name} ({project_tag}) - Thread {thread_id}")
            else:
                threads_info.append(f"‚ùå {project_name} ({project_tag}) - –ù–µ–º–∞—î thread'–∞")
        
        if threads_info:
            threads_text = "\n".join(threads_info[:10])  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
            if len(threads_info) > 10:
                threads_text += f"\n... —Ç–∞ —â–µ {len(threads_info) - 10} –ø—Ä–æ–µ–∫—Ç—ñ–≤"
        else:
            threads_text = "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—ñ–ª–æ–∫"
        
        manage_text = (
            f"üîß **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—ñ–ª–∫–∞–º–∏**\n\n"
            f"üìä –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len(user_projects)}\n"
            f"üßµ –ê–∫—Ç–∏–≤–Ω–∏—Ö –≥—ñ–ª–æ–∫: {len(project_threads)}\n\n"
            f"**–°–ø–∏—Å–æ–∫ –≥—ñ–ª–æ–∫:**\n{threads_text}\n\n"
            f"üí° –ì—ñ–ª–∫–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –ø–æ—è–≤—ñ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ –≥—ñ–ª–∫–∏", callback_data="recreate_all_threads")],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ", callback_data="cleanup_threads")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="forward_settings")]
        ]
        
        await query.edit_message_text(
            manage_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif callback_data == "recreate_all_threads":
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ thread'–∏
        forward_status = project_manager.get_forward_status(user_id)
        if not forward_status['enabled']:
            await query.edit_message_text(
                "‚ùå –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
            return
        
        user_projects = project_manager.get_user_projects(user_id)
        forward_channel = forward_status['channel_id']
        
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ thread'–∏
        project_manager.data['settings']['forward_settings'][str(user_id)]['project_threads'] = {}
        
        created_threads = []
        errors = []
        
        for project in user_projects:
            project_id = project.get('id')
            project_name = project.get('name', 'Project')
            project_tag = project.get('tag', f"#project_{project_id}")
            
            try:
                thread_id = create_project_thread_sync(BOT_TOKEN, forward_channel, project_name, project_tag, str(user_id))
                
                if thread_id:
                    project_manager.set_project_thread(user_id, project_id, thread_id)
                    created_threads.append(f"‚úÖ {project_name} - Thread {thread_id}")
                else:
                    errors.append(f"‚ùå {project_name} - –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏")
                    
            except Exception as e:
                errors.append(f"‚ùå {project_name} - –ø–æ–º–∏–ª–∫–∞: {str(e)[:30]}")
        
        result_text = (
            f"üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–Ω—è –≥—ñ–ª–æ–∫**\n\n"
            f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {len(created_threads)}\n"
            f"‚ùå –ü–æ–º–∏–ª–æ–∫: {len(errors)}\n\n"
        )
        
        if created_threads:
            result_text += "**–°—Ç–≤–æ—Ä–µ–Ω—ñ –≥—ñ–ª–∫–∏:**\n" + "\n".join(created_threads[:5])
            if len(created_threads) > 5:
                result_text += f"\n... —Ç–∞ —â–µ {len(created_threads) - 5}"
        
        if errors:
            result_text += "\n\n**–ü–æ–º–∏–ª–∫–∏:**\n" + "\n".join(errors[:3])
            
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_threads")]]
        await query.edit_message_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif callback_data == "cleanup_threads":
        # –û—á–∏—Å—Ç–∏—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ thread'–∏
        forward_status = project_manager.get_forward_status(user_id)
        user_projects = project_manager.get_user_projects(user_id)
        project_threads = forward_status.get('project_threads', {}).copy()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—ñ thread'–∏ —Ç—Ä–µ–±–∞ –∑–∞–ª–∏—à–∏—Ç–∏
        active_project_ids = {str(p.get('id')) for p in user_projects}
        threads_to_remove = []
        
        for project_id, thread_id in project_threads.items():
            if project_id not in active_project_ids:
                threads_to_remove.append(project_id)
                project_manager.remove_project_thread(user_id, int(project_id))
        
        cleanup_text = (
            f"üßπ **–û—á–∏—â–µ–Ω–Ω—è –≥—ñ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
            f"üìä –í—Å—å–æ–≥–æ –±—É–ª–æ thread'—ñ–≤: {len(project_threads)}\n"
            f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {len(threads_to_remove)}\n"
            f"‚úÖ –ó–∞–ª–∏—à–∏–ª–æ—Å—è –∞–∫—Ç–∏–≤–Ω–∏—Ö: {len(project_threads) - len(threads_to_remove)}\n\n"
            f"üí° –í–∏–¥–∞–ª–µ–Ω—ñ thread'–∏ –Ω–∞–ª–µ–∂–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞–º, —è–∫—ñ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—é—Ç—å."
        )
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_threads")]]
        await query.edit_message_text(
            cleanup_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif callback_data == "diagnostics":
        diagnostics_text = (
            "üîß **–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏**\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:\n\n"
            "üîç **–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–æ—Ç–∞** - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n"
            "üì∫ **–¢–µ—Å—Ç –∫–∞–Ω–∞–ª—ñ–≤** - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—ñ–≤\n"
            "üîó **Discord API** - —Ç–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Discord\n"
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏\n"
            "üîÑ **–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏** - –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ"
        )
        await query.edit_message_text(
            diagnostics_text,
            reply_markup=get_diagnostics_keyboard()
        )
    elif callback_data == "check_bot_status":
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            bot_info = await context.bot.get_me()
            bot_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            auth_users = len(security_manager.authorized_users)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            discord_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if discord_monitor else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
            
            status_text = (
                f"üîç **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
                f"ü§ñ –ë–æ—Ç: {bot_status}\n"
                f"üìõ –Ü–º'—è: {bot_info.first_name}\n"
                f"üÜî ID: {bot_info.id}\n"
                f"üë§ Username: @{bot_info.username}\n\n"
                f"üë• –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {auth_users}\n"
                f"üîó Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {discord_status}\n"
                f"üìä –ü—Ä–æ–µ–∫—Ç—ñ–≤: {len(project_manager.get_user_projects(user_id))}\n"
                f"üïí –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            await query.edit_message_text(
                status_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–æ—Ç–∞**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "test_channels":
        try:
            forward_channel = project_manager.get_forward_channel(user_id)
            
            if forward_channel:
                # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                test_message = (
                    f"üß™ **–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è**\n\n"
                    f"üì∫ –ö–∞–Ω–∞–ª: {forward_channel}\n"
                    f"üë§ –í—ñ–¥: {update.effective_user.first_name}\n"
                    f"üïí –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"‚úÖ –Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–∞–Ω–∞–ª –ø—Ä–∞—Ü—é—î!"
                )
                
                await context.bot.send_message(
                    chat_id=forward_channel,
                    text=test_message,
                )
                
                result_text = f"‚úÖ **–¢–µ—Å—Ç –∫–∞–Ω–∞–ª—É –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!**\n\nüì∫ –ö–∞–Ω–∞–ª: `{forward_channel}`\nüì§ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"
            else:
                result_text = "‚ùå **–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**\n\n–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö."
            
            await query.edit_message_text(
                result_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –∫–∞–Ω–∞–ª—É**\n\n{str(e)}\n\nüí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n‚Ä¢ –ß–∏ –¥–æ–¥–∞–Ω–æ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª\n‚Ä¢ –ß–∏ —î —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n‚Ä¢ –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∫–∞–Ω–∞–ª—É",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "test_discord_api":
        try:
            if not DISCORD_AUTHORIZATION:
                await query.edit_message_text(
                    "‚ùå **Discord API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**\n\n–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å AUTHORIZATION —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª—ñ",
                    reply_markup=get_diagnostics_keyboard()
                )
                return
            
            # –¢–µ—Å—Ç—É—î–º–æ Discord API
            import aiohttp
            headers = {
                'Authorization': DISCORD_AUTHORIZATION,
                'User-Agent': 'DiscordBot (https://github.com/discord/discord-api-docs, 1.0)'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get('https://discord.com/api/v10/users/@me', headers=headers) as response:
                    if response.status == 200:
                        user_data = await response.json()
                        result_text = (
                            f"‚úÖ **Discord API –ø—Ä–∞—Ü—é—î**\n\n"
                            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_data.get('username', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                            f"üÜî ID: {user_data.get('id', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                            f"üìß Email: {user_data.get('email', '–ü—Ä–∏—Ö–æ–≤–∞–Ω–æ')}\n"
                            f"üîê –í–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π: {'‚úÖ' if user_data.get('verified', False) else '‚ùå'}\n"
                            f"üìä –°—Ç–∞—Ç—É—Å: {response.status}"
                        )
                    else:
                        result_text = f"‚ùå **Discord API –ø–æ–º–∏–ª–∫–∞**\n\n–°—Ç–∞—Ç—É—Å: {response.status}\n–í—ñ–¥–ø–æ–≤—ñ–¥—å: {await response.text()}"
            
            await query.edit_message_text(
                result_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ Discord API**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "show_stats":
        try:
            stats = project_manager.get_statistics()
            user_projects = project_manager.get_user_projects(user_id)
            discord_projects = [p for p in user_projects if p['platform'] == 'discord']
            forward_status = project_manager.get_forward_status(user_id)
            
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            sent_messages = project_manager.data['settings'].get('sent_messages', {})
            total_tracked = sum(
                len(channel_messages) 
                for user_messages in sent_messages.values() 
                for channel_messages in user_messages.values()
            )
            
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏**\n\n"
                f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
                f"üìã –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['total_projects']}\n"
                f"üîó Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len(discord_projects)}\n"
                f"üê¶ Twitter –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len([p for p in user_projects if p['platform'] == 'twitter'])}\n\n"
                f"üì¢ **–ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è:**\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if forward_status['enabled'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
                f"üì∫ –ö–∞–Ω–∞–ª: {forward_status['channel_id'] or '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n\n"
                f"üíæ **–î–∞–Ω—ñ:**\n"
                f"üìÅ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {stats.get('data_size', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"üì® –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {total_tracked}\n"
                f"üïí –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {stats.get('last_update', '–ù–µ–≤—ñ–¥–æ–º–æ')}"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "reload_data":
        try:
            # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
            project_manager.load_data()
            # –ü—Ä–æ–≤–æ–¥–∏–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤
            sync_monitors_with_projects()
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            if discord_monitor:
                discord_monitor.monitoring_channels.clear()
                for user_id_str, projects in project_manager.data['projects'].items():
                    for project in projects:
                        if project['platform'] == 'discord':
                            channel_id = project['link'].split('/')[-1]
                            discord_monitor.add_channel(channel_id)
            
            await query.edit_message_text(
                "üîÑ **–î–∞–Ω—ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ**\n\n‚úÖ –ü—Ä–æ–µ–∫—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ\n‚úÖ Discord –∫–∞–Ω–∞–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ\n‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ",
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∑ –º–µ–Ω—é: Twitter
    elif callback_data.startswith("delete_twitter_"):
        project_id = int(callback_data.split('_')[-1])
        project = project_manager.get_project_by_id(user_id, project_id)
        if not project:
            await query.edit_message_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_twitter_projects_keyboard(user_id))
            return
        removed_username: Optional[str] = extract_twitter_username(project.get('url', ''))
        if project_manager.remove_project(user_id, project_id):
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            sync_monitors_with_projects()
            
            # –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ –≤—ñ–¥—Ä–∞–∑—É
            try:
                if twitter_monitor and removed_username:
                    twitter_monitor.remove_account(removed_username)
            except Exception:
                pass
            if twitter_monitor_adapter and removed_username and removed_username in getattr(twitter_monitor_adapter, 'monitoring_accounts', set()):
                twitter_monitor_adapter.monitoring_accounts.discard(removed_username)
                if removed_username in twitter_monitor_adapter.seen_tweets:
                    del twitter_monitor_adapter.seen_tweets[removed_username]
            # –¢–∞–∫–æ–∂ –ø—Ä–∏–±–µ—Ä–µ–º–æ —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö Selenium –∞–∫–∞—É–Ω—Ç—ñ–≤, —è–∫—â–æ —Ü–µ –±—É–≤ –≤—ñ–Ω
            try:
                if removed_username:
                    project_manager.remove_selenium_account(removed_username)
            except Exception:
                pass
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–º—ñ–Ω
            sync_monitors_with_projects()
            await query.edit_message_text(
                f"‚úÖ Twitter –∞–∫–∞—É–Ω—Ç @{removed_username or 'Unknown'} –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.",
                reply_markup=get_twitter_projects_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Twitter –ø—Ä–æ–µ–∫—Ç—É.",
                reply_markup=get_twitter_projects_keyboard(user_id)
            )
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∑ –º–µ–Ω—é: Discord
    elif callback_data.startswith("delete_discord_"):
        project_id = int(callback_data.split('_')[-1])
        project = project_manager.get_project_by_id(user_id, project_id)
        if not project:
            await query.edit_message_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_discord_projects_keyboard(user_id))
            return
        channel_id = extract_discord_channel_id(project.get('url', ''))
        if project_manager.remove_project(user_id, project_id):
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            sync_monitors_with_projects()
            
            # –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É –≤—ñ–¥—Ä–∞–∑—É
            if discord_monitor and channel_id in getattr(discord_monitor, 'monitoring_channels', set()):
                discord_monitor.monitoring_channels.discard(channel_id)
                if channel_id in discord_monitor.last_message_ids:
                    del discord_monitor.last_message_ids[channel_id]
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–º—ñ–Ω
            sync_monitors_with_projects()
            await query.edit_message_text(
                f"‚úÖ Discord –∫–∞–Ω–∞–ª {channel_id} –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.",
                reply_markup=get_discord_projects_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Discord –ø—Ä–æ–µ–∫—Ç—É.",
                reply_markup=get_discord_projects_keyboard(user_id)
            )
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ
    elif callback_data == "admin_panel":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó –ø–∞–Ω–µ–ª—ñ.",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "üëë **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å**\n\n"
            "üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!**\n\n"
            "üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**\n"
            "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚Ä¢ üîß –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "‚Ä¢ üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã\n"
            "‚Ä¢ üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=get_admin_panel_keyboard(),
        )
    elif callback_data == "admin_users":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
            
        await query.edit_message_text(
            "üë• **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏**\n\n"
            "üéØ **–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
            "‚Ä¢ üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ üëë –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
            "‚Ä¢ üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π\n"
            "‚Ä¢ üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª–µ–π\n"
            "‚Ä¢ üîÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
            "‚Ä¢ üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_users_keyboard(),
        )
    elif callback_data == "admin_create_for_user":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", reply_markup=get_main_menu_keyboard(user_id))
            return
        # –ü–µ—Ä—à–∏–π –∫—Ä–æ–∫: –≤–≤–µ—Å—Ç–∏ Telegram ID —Ü—ñ–ª—å–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_states[user_id] = {
            'state': 'admin_creating_project_for_user',
            'data': {'step': 'telegram_id'}
        }
        await query.edit_message_text(
            "‚ûï **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_panel")]])
        )
    elif callback_data == "admin_forward":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        # –ó–∞–ø–∏—Ç—É—î–º–æ target user id
        user_states[user_id] = {
            'state': 'admin_forward_select_user',
            'data': {}
        }
        await query.edit_message_text(
            "üîÅ **–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)**\n\n–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")]])
        )
    elif callback_data == "admin_stats":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
            
        try:
            stats = project_manager.get_project_statistics(user_id)
            users_list = project_manager.get_all_users_with_projects(user_id)
            
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏**\n\n"
                f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
                f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['active_users']}\n"
                f"üìã –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['total_projects']}\n"
                f"üê¶ Twitter –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['twitter_projects']}\n"
                f"üí¨ Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['discord_projects']}\n"
                f"üöÄ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç—ñ–≤: {stats['selenium_accounts']}\n\n"
                f"üëë **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:** {len(access_manager.get_all_admins())}\n"
                f"üë§ **–ó–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:** {len(access_manager.get_all_users_by_role('user'))}"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=get_admin_panel_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n{str(e)}",
                reply_markup=get_admin_panel_keyboard()
            )
    elif callback_data == "admin_list_users":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
            
        try:
            all_users = access_manager.get_all_users()
            
            if not all_users:
                await query.edit_message_text(
                    "üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
                    "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=get_admin_users_keyboard()
                )
                return
            
            users_text = "üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
            
            for i, user in enumerate(all_users[:10], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 10
                role_emoji = "üëë" if user.get('role', 'user') == 'admin' else "üë§"
                status_emoji = "‚úÖ" if user.get('is_active', True) else "‚ùå"
                
                users_text += (
                    f"{i}. {role_emoji} {user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}\n"
                    f"   ID: {user.get('telegram_id')}\n"
                    f"   –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
                    f"   –°—Ç–≤–æ—Ä–µ–Ω–æ: {user.get('created_at', '')[:10]}\n\n"
                )
            
            if len(all_users) > 10:
                users_text += f"... —Ç–∞ —â–µ {len(all_users) - 10} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
            
            await query.edit_message_text(
                users_text,
                reply_markup=get_admin_users_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n{str(e)}",
                reply_markup=get_admin_users_keyboard()
            )
    elif callback_data == "admin_all_projects":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
            
        try:
            all_projects = project_manager.get_all_projects(user_id)
            total_projects = sum(len(projects) for projects in all_projects.values())
            
            if total_projects == 0:
                await query.edit_message_text(
                    "üìã **–í—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏**\n\n"
                    "–ü—Ä–æ–µ–∫—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=get_admin_panel_keyboard()
                )
                return
            
            projects_text = f"üìã **–í—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏** (–í—Å—å–æ–≥–æ: {total_projects})\n\n"
            
            shown_projects = 0
            for user_id_str, projects in all_projects.items():
                if shown_projects >= 5:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                    break
                    
                user_data = access_manager.get_user_by_telegram_id(int(user_id_str))
                username = user_data.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ') if user_data else '–ù–µ–≤—ñ–¥–æ–º–∏–π'
                
                projects_text += f"üë§ **{username}** ({len(projects)} –ø—Ä–æ–µ–∫—Ç—ñ–≤):\n"
                
                for project in projects[:3]:  # –ü–æ 3 –ø—Ä–æ–µ–∫—Ç–∏ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    platform_emoji = "üê¶" if project.get('platform') == 'twitter' else "üí¨"
                    projects_text += f"   {platform_emoji} {project.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}\n"
                
                if len(projects) > 3:
                    projects_text += f"   ... —Ç–∞ —â–µ {len(projects) - 3} –ø—Ä–æ–µ–∫—Ç—ñ–≤\n"
                
                projects_text += "\n"
                shown_projects += 1
            
            if len(all_projects) > 5:
                projects_text += f"... —Ç–∞ —â–µ {len(all_projects) - 5} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"
            
            await query.edit_message_text(
                projects_text,
                reply_markup=get_admin_panel_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤**\n\n{str(e)}",
                reply_markup=get_admin_panel_keyboard()
            )
    elif callback_data == "admin_add_user":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_states[user_id] = {
            'state': 'admin_creating_user',
            'data': {'step': 'telegram_id'}
        }
        
        await query.edit_message_text(
            "üë§ **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥:** 123456789",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_add_admin":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_states[user_id] = {
            'state': 'admin_creating_admin',
            'data': {'step': 'telegram_id'}
        }
        
        await query.edit_message_text(
            "üëë **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥:** 123456789",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_search_user":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –ø–æ—à—É–∫—É
        user_states[user_id] = {
            'state': 'admin_searching_user',
            'data': {}
        }
        
        await query.edit_message_text(
            "üîç **–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å username –∞–±–æ Telegram ID –¥–ª—è –ø–æ—à—É–∫—É:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥–∏:**\n"
            "‚Ä¢ JohnDoe (–ø–æ—à—É–∫ –∑–∞ username)\n"
            "‚Ä¢ 123456789 (–ø–æ—à—É–∫ –∑–∞ Telegram ID)",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_delete_user":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        user_states[user_id] = {
            'state': 'admin_deleting_user',
            'data': {}
        }
        
        await query.edit_message_text(
            "üóëÔ∏è **–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "‚ö†Ô∏è **–£–í–ê–ì–ê!** –¶—è –¥—ñ—è –≤–∏–¥–∞–ª–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é!\n\n"
            "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥:** 123456789",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_change_role":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ
        user_states[user_id] = {
            'state': 'admin_changing_role',
            'data': {'step': 'telegram_id'}
        }
        
        await query.edit_message_text(
            "üîÑ **–ó–º—ñ–Ω–∞ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥:** 123456789",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_reset_password":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
        user_states[user_id] = {
            'state': 'admin_resetting_password',
            'data': {'step': 'telegram_id'}
        }
        
        await query.edit_message_text(
            "üîê **–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥:** 123456789",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_user_stats":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            stats = access_manager.get_user_statistics()
            
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
                f"üë• **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats['active_users']}\n"
                f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {stats['inactive_users']}\n\n"
                f"üëë **–ó–∞ —Ä–æ–ª—è–º–∏:**\n"
                f"‚Ä¢ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: {stats['admin_users']}\n"
                f"‚Ä¢ –ó–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['regular_users']}\n\n"
                f"üü¢ **–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:**\n"
                f"‚Ä¢ –û–Ω–ª–∞–π–Ω –∑–∞—Ä–∞–∑: {stats['online_users']}\n"
                f"‚Ä¢ –í—Ö–æ–¥–∏–ª–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥: {stats['recent_logins']}"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=get_admin_users_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n{str(e)}",
                reply_markup=get_admin_users_keyboard()
            )
    
    # –ù–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    elif callback_data == "admin_general_stats":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            user_stats = access_manager.get_user_statistics()
            system_stats = access_manager.get_system_statistics()
            
            stats_text = (
                f"üìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏**\n\n"
                f"üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:**\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {user_stats['total_users']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {user_stats['active_users']}\n"
                f"‚Ä¢ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: {user_stats['admin_users']}\n"
                f"‚Ä¢ –ó–≤–∏—á–∞–π–Ω–∏—Ö: {user_stats['regular_users']}\n\n"
                f"üìã **–ü—Ä–æ–µ–∫—Ç–∏:**\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {system_stats.get('total_projects', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {system_stats.get('active_projects', 0)}\n\n"
                f"üü¢ **–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:**\n"
                f"‚Ä¢ –û–Ω–ª–∞–π–Ω –∑–∞—Ä–∞–∑: {user_stats['online_users']}\n"
                f"‚Ä¢ –í—Ö–æ–¥–∏–ª–∏ –∑–∞ 24 –≥–æ–¥: {user_stats['recent_logins']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: {system_stats.get('active_sessions', 0)}\n\n"
                f"üíæ **–°–∏—Å—Ç–µ–º–∞:**\n"
                f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {system_stats.get('uptime', 'N/A')}\n"
                f"‚Ä¢ –í–µ—Ä—Å–∏—è: 2.0 Enhanced"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=get_admin_stats_keyboard(),
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n{str(e)}",
                reply_markup=get_admin_stats_keyboard()
            )
    
    elif callback_data == "admin_project_stats":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            all_projects = project_manager.get_all_projects(user_id)
            twitter_projects = [p for projects in all_projects.values() for p in projects if p.get('platform') == 'twitter']
            discord_projects = [p for projects in all_projects.values() for p in projects if p.get('platform') == 'discord']
            
            stats_text = (
                f"üìã **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç—ñ–≤**\n\n"
                f"üìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {sum(len(projects) for projects in all_projects.values())}\n"
                f"‚Ä¢ Twitter –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len(twitter_projects)}\n"
                f"‚Ä¢ Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len(discord_projects)}\n\n"
                f"üê¶ **Twitter –ø—Ä–æ–µ–∫—Ç–∏:**\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {len([p for p in twitter_projects if p.get('active', False)])}\n"
                f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {len([p for p in twitter_projects if not p.get('active', False)])}\n\n"
                f"üí¨ **Discord –ø—Ä–æ–µ–∫—Ç–∏:**\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {len([p for p in discord_projects if p.get('active', False)])}\n"
                f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {len([p for p in discord_projects if not p.get('active', False)])}\n\n"
                f"üìà **–ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏:**\n"
                f"‚Ä¢ Twitter: {len(twitter_projects)} –ø—Ä–æ–µ–∫—Ç—ñ–≤\n"
                f"‚Ä¢ Discord: {len(discord_projects)} –ø—Ä–æ–µ–∫—Ç—ñ–≤"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=get_admin_stats_keyboard(),
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç—ñ–≤**\n\n{str(e)}",
                reply_markup=get_admin_stats_keyboard()
            )
    
    elif callback_data == "admin_charts":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "üìà **–ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∏**\n\n"
            "üéØ **–í—ñ–∑—É–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞**\n\n"
            "üìä **–î–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏:**\n"
            "‚Ä¢ üìà –ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            "‚Ä¢ üìä –î—ñ–∞–≥—Ä–∞–º–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø—Ä–æ–µ–∫—Ç—ñ–≤\n"
            "‚Ä¢ üìÖ –ì—Ä–∞—Ñ—ñ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤\n"
            "‚Ä¢ üîÑ –ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n"
            "‚Ä¢ üì± –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º\n\n"
            "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –ì—Ä–∞—Ñ—ñ–∫–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö\n"
            "–ü–æ–∫–∏ —â–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.",
            reply_markup=get_admin_stats_keyboard(),
        )
    
    elif callback_data == "admin_export_data":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "üì§ **–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö**\n\n"
            "üéØ **–ï–∫—Å–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –¥–∞–Ω–∏—Ö**\n\n"
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:**\n"
            "‚Ä¢ üìä Excel —Ñ–∞–π–ª (.xlsx)\n"
            "‚Ä¢ üìÑ CSV —Ñ–∞–π–ª (.csv)\n"
            "‚Ä¢ üìã JSON —Ñ–∞–π–ª (.json)\n"
            "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª (.txt)\n\n"
            "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –§—É–Ω–∫—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö\n"
            "–ü–æ–∫–∏ —â–æ –¥–∞–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å.",
            reply_markup=get_admin_stats_keyboard(),
        )
    
    elif callback_data == "admin_system_stats":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            stats = access_manager.get_system_statistics()
            
            stats_text = (
                f"üìä **–°–∏—Å—Ç–µ–º–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:**\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: {stats['active_sessions']}\n\n"
                f"üìã **–ü—Ä–æ–µ–∫—Ç–∏:**\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['total_projects']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤: {stats['active_monitors']}\n\n"
                f"‚öôÔ∏è **–°–∏—Å—Ç–µ–º–∞:**\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {stats['system_uptime']}\n"
                f"‚Ä¢ –û—Å—Ç–∞–Ω–Ω—ñ–π –±–µ–∫–∞–ø: {stats['last_backup']}\n"
                f"‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ö–æ–≤–∏—â–∞: {stats['storage_usage']} —Å–∏–º–≤–æ–ª—ñ–≤"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=get_admin_system_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n{str(e)}",
                reply_markup=get_admin_system_keyboard()
            )
    elif callback_data == "admin_system_logs":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            logs = access_manager.get_logs(20)  # –û—Å—Ç–∞–Ω–Ω—ñ 20 –∑–∞–ø–∏—Å—ñ–≤
            
            if not logs:
                logs_text = "üìã **–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º–∏**\n\n‚ùå –õ–æ–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ"
            else:
                logs_text = "üìã **–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º–∏** (–æ—Å—Ç–∞–Ω–Ω—ñ 20 –∑–∞–ø–∏—Å—ñ–≤)\n\n"
                for log in logs:
                    logs_text += f"‚Ä¢ {log}\n"
            
            await query.edit_message_text(
                logs_text,
                reply_markup=get_admin_system_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤**\n\n{str(e)}",
                reply_markup=get_admin_system_keyboard()
            )
    elif callback_data == "admin_cleanup_sessions":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            cleaned_count = access_manager.cleanup_inactive_sessions()
            
            if cleaned_count > 0:
                await query.edit_message_text(
                    f"üîÑ **–û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
                    f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleaned_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π\n\n"
                    f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±—É–ª–∏ —Ä–æ–∑–ª–æ–≥—ñ–Ω–µ–Ω—ñ.",
                    reply_markup=get_admin_system_keyboard()
                )
            else:
                await query.edit_message_text(
                    f"üîÑ **–û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
                    f"‚ÑπÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n\n"
                    f"–í—Å—ñ —Å–µ—Å—ñ—ó –∞–∫—Ç–∏–≤–Ω—ñ.",
                    reply_markup=get_admin_system_keyboard()
                )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π**\n\n{str(e)}",
                reply_markup=get_admin_system_keyboard()
            )
    elif callback_data == "admin_create_backup":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            if access_manager.backup_data():
                await query.edit_message_text(
                    f"üíæ **–†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞!**\n\n"
                    f"‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ\n\n"
                    f"–†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –ø–∞–ø—Ü—ñ 'backups'.",
                    reply_markup=get_admin_system_keyboard()
                )
            else:
                await query.edit_message_text(
                    f"‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó!**\n\n"
                    f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_system_keyboard()
                )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó**\n\n{str(e)}",
                reply_markup=get_admin_system_keyboard()
            )
    elif callback_data == "admin_reset_system":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è
        user_states[user_id] = {
            'state': 'admin_resetting_system',
            'data': {}
        }
        
        await query.edit_message_text(
            "‚ö†Ô∏è **–°–ö–ò–î–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò**\n\n"
            "üö® **–£–í–ê–ì–ê!** –¶—è –¥—ñ—è –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Ü–• –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∫—Ä—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!\n\n"
            "üìã **–©–æ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ:**\n"
            "‚Ä¢ –í—Å—ñ—Ö –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            "‚Ä¢ –í—Å—ñ —ó—Ö–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏\n"
            "‚Ä¢ –í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó\n\n"
            "‚úÖ **–©–æ –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:**\n"
            "‚Ä¢ –í—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤\n"
            "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n\n"
            "üîê **–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å:** CONFIRM_RESET",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_system")
            ]])
        )
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    elif callback_data == "admin_monitoring_status":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            discord_status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π" if discord_monitor else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
            twitter_status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π" if twitter_monitor else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
            twitter_adapter_status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π" if twitter_monitor_adapter else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
            
            status_text = (
                f"üìà **–°—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É**\n\n"
                f"üéØ **–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏:**\n\n"
                f"üí¨ **Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥:**\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {discord_status}\n"
                f"‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è: {'‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞' if DISCORD_AUTHORIZATION else '‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞'}\n\n"
                f"üê¶ **Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥:**\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {twitter_status}\n"
                f"‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è: {'‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞' if TWITTER_AUTH_TOKEN else '‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞'}\n\n"
                f"üîß **Twitter Monitor Adapter:**\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {twitter_adapter_status}\n"
                f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {'‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞' if os.path.exists('./twitter_monitor/accounts.db') else '‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞'}\n\n"
                f"‚è∞ **–û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:** {datetime.now().strftime('%H:%M:%S')}\n"
                f"üîÑ **–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:** {MONITORING_INTERVAL} —Å–µ–∫—É–Ω–¥"
            )
            
            await query.edit_message_text(
                status_text,
                reply_markup=get_admin_monitoring_keyboard(),
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É**\n\n{str(e)}",
                reply_markup=get_admin_monitoring_keyboard()
            )
    
    elif callback_data == "admin_notifications":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "üîî **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å**\n\n"
            "üéØ **–¶–µ–Ω—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "‚Ä¢ üìß Email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
            "‚Ä¢ üì± Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
            "‚Ä¢ üîî Discord —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
            "‚Ä¢ ‚ö†Ô∏è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏\n"
            "‚Ä¢ üìä –ó–≤—ñ—Ç–∏ –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
            "‚Ä¢ üö® –ö—Ä–∏—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n\n"
            "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö",
            reply_markup=get_admin_monitoring_keyboard(),
        )
    
    elif callback_data == "admin_restart_monitoring":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "üîÑ **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É**\n\n"
            "üéØ **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É**\n\n"
            "üìã **–©–æ –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ:**\n"
            "‚Ä¢ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ Twitter Monitor Adapter\n"
            "‚Ä¢ –í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó\n\n"
            "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö\n"
            "–ü–æ–∫–∏ —â–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç –≤—Ä—É—á–Ω—É.",
            reply_markup=get_admin_monitoring_keyboard(),
        )
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    elif callback_data == "admin_backup_restore":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            format_info_message(
                "–ë–µ–∫–∞–ø —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è",
                "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏–º–∏ –∫–æ–ø—ñ—è–º–∏ —Å–∏—Å—Ç–µ–º–∏",
                "‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è –±–µ–∫–∞–ø—É –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
                "–ü–æ–∫–∏ —â–æ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ —Ñ–∞–π–ª–∞—Ö data.json —Ç–∞ projects.json"
            ),
            reply_markup=get_admin_system_keyboard()
        )
    
    elif callback_data == "admin_clear_cache":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            # –û—á–∏—â—É—î–º–æ –∫–µ—à (–≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ)
            global global_sent_tweets
            global_sent_tweets.clear()
            
            await query.edit_message_text(
                format_success_message(
                    "–ö–µ—à –æ—á–∏—â–µ–Ω–æ",
                    "–í—Å—ñ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ",
                    "–ö–µ—à –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö —Ç–≤—ñ—Ç—ñ–≤ –æ—á–∏—â–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ —à–≤–∏–¥—à–µ."
                ),
                reply_markup=get_admin_system_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                format_error_message("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É", str(e)),
                reply_markup=get_admin_system_keyboard()
            )
    
    elif callback_data == "admin_clear_seen_tweets":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ—á–∏—â–µ–Ω–Ω—è seen_tweets
            success = reset_seen_tweets()
            
            if success:
                await query.edit_message_text(
                    format_success_message(
                        "Seen_tweets –æ—á–∏—â–µ–Ω–æ",
                        "–í—Å—ñ —Ñ–∞–π–ª–∏ –∑ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–º–∏ —Ç–≤—ñ—Ç–∞–º–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ",
                        "‚ö†Ô∏è –£–í–ê–ì–ê: –ë–æ—Ç –º–æ–∂–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ç–≤—ñ—Ç–∏! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –æ–±–µ—Ä–µ–∂–Ω–æ."
                    ),
                    reply_markup=get_admin_system_keyboard()
                )
            else:
                await query.edit_message_text(
                    format_error_message(
                        "–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è", 
                        "–ù–µ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏",
                        "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
                    ),
                    reply_markup=get_admin_system_keyboard()
                )
        except Exception as e:
            await query.edit_message_text(
                format_error_message("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è", str(e)),
                reply_markup=get_admin_system_keyboard()
            )
    
    elif callback_data == "admin_system_config":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        config_text = format_info_message(
            "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏",
            "–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞",
            f"üîß –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:\n"
            f"‚Ä¢ –¢–∞–π–º-–∞—É—Ç —Å–µ—Å—ñ—ó: {SECURITY_TIMEOUT} —Å–µ–∫—É–Ω–¥\n"
            f"‚Ä¢ –Ü–Ω—Ç–µ—Ä–≤–∞–ª Discord: {MONITORING_INTERVAL} —Å–µ–∫—É–Ω–¥\n"
            f"‚Ä¢ –Ü–Ω—Ç–µ—Ä–≤–∞–ª Twitter: {TWITTER_MONITORING_INTERVAL} —Å–µ–∫—É–Ω–¥\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: {len(access_manager.user_sessions)}\n\n"
            f"‚ö†Ô∏è –ó–º—ñ–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö"
        )
        
        await query.edit_message_text(
            config_text,
            reply_markup=get_admin_system_keyboard()
        )
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ—à—É–∫—É
    elif callback_data == "admin_search_users":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            format_info_message(
                "–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
                "–§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
                "‚ö†Ô∏è –î–µ—Ç–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
                "–ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ '–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
            ),
            reply_markup=get_admin_search_keyboard()
        )
    
    elif callback_data == "admin_search_projects":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            format_info_message(
                "–ü–æ—à—É–∫ –ø—Ä–æ–µ–∫—Ç—ñ–≤",
                "–§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –ø—Ä–æ–µ–∫—Ç—ñ–≤",
                "‚ö†Ô∏è –î–µ—Ç–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
                "–ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ '–í—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤."
            ),
            reply_markup=get_admin_search_keyboard()
        )
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    elif callback_data == "admin_security_settings":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "üîê **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏**\n\n"
            "üéØ **–¶–µ–Ω—Ç—Ä –±–µ–∑–ø–µ–∫–∏**\n\n"
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "‚Ä¢ üîë –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤\n"
            "‚Ä¢ ‚è∞ –¢–∞–π–º–∞—É—Ç–∏ —Å–µ—Å—ñ–π\n"
            "‚Ä¢ üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            "‚Ä¢ üìù –õ–æ–≥–∏ –±–µ–∑–ø–µ–∫–∏\n"
            "‚Ä¢ üîí –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö\n"
            "‚Ä¢ üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∞—Ç–∞–∫\n\n"
            "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –†–æ–∑—à–∏—Ä–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö",
            reply_markup=get_admin_settings_keyboard(),
        )
    
    elif callback_data == "admin_ui_settings":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "üé® **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É**\n\n"
            "üéØ **–¶–µ–Ω—Ç—Ä –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å UI**\n\n"
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "‚Ä¢ üé® –¢–µ–º–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É\n"
            "‚Ä¢ üì± –†–æ–∑–º—ñ—Ä –∫–Ω–æ–ø–æ–∫\n"
            "‚Ä¢ üåç –ú–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É\n"
            "‚Ä¢ üìä –°—Ç–∏–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "‚Ä¢ üîî –°—Ç–∏–ª—å —Å–ø–æ–≤—ñ—â–µ–Ω—å\n"
            "‚Ä¢ üìã –ú–∞–∫–µ—Ç –º–µ–Ω—é\n\n"
            "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö",
            reply_markup=get_admin_settings_keyboard(),
        )
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–æ–≤–∏—Ö –º–µ–Ω—é
    elif callback_data == "quick_actions":
        await query.edit_message_text(
            "‚ö° **–®–≤–∏–¥–∫—ñ –¥—ñ—ó**\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:",
            reply_markup=get_quick_actions_keyboard(user_id)
        )
    elif callback_data == "about":
        about_text = (
            "‚ÑπÔ∏è **–ü—Ä–æ –±–æ—Ç–∞**\n\n"
            "ü§ñ **Telegram Monitor Bot**\n"
            "–í–µ—Ä—Å—ñ—è: 2.0\n\n"
            "üìã **–§—É–Ω–∫—Ü—ñ—ó:**\n"
            "‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Twitter/X –∞–∫–∞—É–Ω—Ç—ñ–≤\n"
            "‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Discord –∫–∞–Ω–∞–ª—ñ–≤\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–ø–µ–∫–∏ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é\n"
            "‚Ä¢ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n"
            "‚Ä¢ Twitter Monitor Adapter –¥–ª—è –æ–±—Ö–æ–¥—É –æ–±–º–µ–∂–µ–Ω—å\n\n"
            "üë®‚Äçüíª **–†–æ–∑—Ä–æ–±–Ω–∏–∫:** megymin\n"
            "üìÖ **–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:** 2025"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            about_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
    elif callback_data == "start_all_monitors":
        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            auto_start_monitoring()
            
            await query.edit_message_text(
                "üöÄ **–í—Å—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –∑–∞–ø—É—â–µ–Ω–æ!**\n\n"
                "‚úÖ Twitter API –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π\n"
                "‚úÖ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π\n"
                "‚úÖ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π\n"
                "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ",
                reply_markup=get_quick_actions_keyboard(user_id)
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤**\n\n{str(e)}",
                reply_markup=get_quick_actions_keyboard(user_id)
            )
    elif callback_data == "stop_all_monitors":
        try:
            # –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏
            if twitter_monitor_adapter:
                twitter_monitor_adapter.monitoring_active = False
            
            # –ó—É–ø–∏–Ω—è—î–º–æ Twitter API –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            if twitter_monitor:
                twitter_monitor.monitoring_active = False
            
            # –ó—É–ø–∏–Ω—è—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            if discord_monitor:
                discord_monitor.monitoring_active = False
            
            await query.edit_message_text(
                "‚èπÔ∏è **–í—Å—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –∑—É–ø–∏–Ω–µ–Ω–æ!**\n\n"
                "üî¥ Twitter API –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ\n"
                "üî¥ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ\n"
                "üî¥ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ\n"
                "üî¥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ",
                reply_markup=get_quick_actions_keyboard(user_id)
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤**\n\n{str(e)}",
                reply_markup=get_quick_actions_keyboard(user_id)
            )
    elif callback_data == "quick_stats":
        try:
            stats = project_manager.get_statistics()
            user_projects = project_manager.get_user_projects(user_id)
            twitter_count = len([p for p in user_projects if p['platform'] == 'twitter'])
            discord_count = len([p for p in user_projects if p['platform'] == 'discord'])
            twitter_adapter_count = len(project_manager.get_selenium_accounts())
            
            quick_stats_text = (
                "üìä **–®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üë§ **–í–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏:**\n"
                f"‚Ä¢ Twitter: {twitter_count}\n"
                f"‚Ä¢ Discord: {discord_count}\n"
                f"‚Ä¢ Twitter Monitor Adapter: {twitter_adapter_count}\n\n"
                f"üåê **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats.get('total_users', 0)}\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats.get('total_projects', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: {len(access_manager.user_sessions)}"
            )
            
            await query.edit_message_text(
                quick_stats_text,
                reply_markup=get_quick_actions_keyboard(user_id)
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n{str(e)}",
                reply_markup=get_quick_actions_keyboard(user_id)
            )
    elif callback_data == "recent_messages":
        await query.edit_message_text(
            "üìù **–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è**\n\n–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
            reply_markup=get_history_count_keyboard()
        )
    elif callback_data == "refresh_data":
        try:
            project_manager.load_data()
            sync_monitors_with_projects()
            
            await query.edit_message_text(
                "üîÑ **–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                "‚úÖ –ü—Ä–æ–µ–∫—Ç–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ\n"
                "‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ\n"
                "‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ",
                reply_markup=get_quick_actions_keyboard(user_id)
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö**\n\n{str(e)}",
                reply_markup=get_quick_actions_keyboard(user_id)
            )
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ–ø–æ–º–æ–≥–∏
    elif callback_data == "help_getting_started":
        help_text = (
            "üöÄ **–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏**\n\n"
            "**–ö—Ä–æ–∫ 1:** –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /login\n"
            "**–ö—Ä–æ–∫ 2:** –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é\n"
            "**–ö—Ä–æ–∫ 3:** –î–æ–¥–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Twitter –∞–±–æ Discord\n"
            "**–ö—Ä–æ–∫ 4:** –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"
            "**–ö—Ä–æ–∫ 5:** –ó–∞–ø—É—Å—Ç—ñ—Ç—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n\n"
            "üí° **–ü–æ—Ä–∞–¥–∏:**\n"
            "‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —à–≤–∏–¥–∫—ñ –¥—ñ—ó –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö\n"
            "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help")]]
        await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif callback_data == "help_twitter":
        help_text = (
            "üê¶ **Twitter –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è**\n\n"
            "**–§–æ—Ä–º–∞—Ç –ø–æ—Å–∏–ª–∞–Ω—å:**\n"
            "‚Ä¢ https://twitter.com/username\n"
            "‚Ä¢ https://x.com/username\n\n"
            "**Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥:**\n"
            "‚Ä¢ –û–±—Ö–æ–¥–∏—Ç—å –æ–±–º–µ–∂–µ–Ω–Ω—è API\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫\n"
            "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å\n\n"
            "**–ö–æ–º–∞–Ω–¥–∏:**\n"
            "‚Ä¢ /twitter_start - –∑–∞–ø—É—Å—Ç–∏—Ç–∏\n"
            "‚Ä¢ /twitter_stop - –∑—É–ø–∏–Ω–∏—Ç–∏\n"
            "‚Ä¢ /twitter_add username - –¥–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help")]]
        await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif callback_data == "help_discord":
        help_text = (
            "üí¨ **Discord –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è**\n\n"
            "**–§–æ—Ä–º–∞—Ç –ø–æ—Å–∏–ª–∞–Ω—å:**\n"
            "‚Ä¢ https://discord.com/channels/server_id/channel_id\n\n"
            "**–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "‚Ä¢ –ü–æ—Ç—Ä—ñ–±–µ–Ω AUTHORIZATION —Ç–æ–∫–µ–Ω\n"
            "‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤ .env —Ñ–∞–π–ª—ñ\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–µ—Ä–µ–∑ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É\n\n"
            "**–§—É–Ω–∫—Ü—ñ—ó:**\n"
            "‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n"
            "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–∞ —Ñ–∞–π–ª—ñ–≤"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help")]]
        await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif callback_data == "help_forwarding":
        help_text = (
            "üì¢ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è**\n\n"
            "**–ê–≤—Ç–æ–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "‚Ä¢ –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ –ù–∞–ø–∏—à—ñ—Ç—å –≤ –∫–∞–Ω–∞–ª—ñ: @botusername ping\n"
            "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–ª–∞—à—Ç—É—î –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
            "**–†—É—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "‚Ä¢ /forward_set_channel CHANNEL_ID\n"
            "‚Ä¢ /forward_on - —É–≤—ñ–º–∫–Ω—É—Ç–∏\n"
            "‚Ä¢ /forward_off - –≤–∏–º–∫–Ω—É—Ç–∏\n\n"
            "**–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "‚Ä¢ /forward_test - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help")]]
        await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif callback_data == "help_faq":
        help_text = (
            "‚ùì **–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è**\n\n"
            "**Q: –ß–æ–º—É –Ω–µ –ø—Ä–∞—Ü—é—î Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥?**\n"
            "A: –°–ø—Ä–æ–±—É–π—Ç–µ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ - –≤—ñ–Ω –æ–±—Ö–æ–¥–∏—Ç—å –æ–±–º–µ–∂–µ–Ω–Ω—è API\n\n"
            "**Q: –Ø–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Discord?**\n"
            "A: –ü–æ—Ç—Ä—ñ–±–µ–Ω AUTHORIZATION —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª—ñ\n\n"
            "**Q: –°–µ—Å—ñ—è –ø–æ—Å—Ç—ñ–π–Ω–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è**\n"
            "A: –°–µ—Å—ñ—è –¥—ñ—î 5 —Ö–≤–∏–ª–∏–Ω. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ\n\n"
            "**Q: –ù–µ –æ—Ç—Ä–∏–º—É—é —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è**\n"
            "A: –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help")]]
        await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif callback_data == "help_support":
        help_text = format_info_message(
            "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞",
            "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∞",
            "‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –ª–æ–≥–∏ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É –ø–∞–Ω–µ–ª—å\n"
            "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–π—Ç–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ\n"
            "‚Ä¢ –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–µ—Ä–π–æ–∑–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help")]]
        await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    elif callback_data == "settings_notifications":
        settings_text = (
            "üîî **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å**\n\n"
            "**–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n"
            "‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏: ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n"
            "‚Ä¢ –ó–≤—É–∫–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: ‚ùå –í–∏–º–∫–Ω–µ–Ω–æ\n\n"
            "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –î–µ—Ç–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]]
        await query.edit_message_text(settings_text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif callback_data == "settings_intervals":
        settings_text = (
            "‚è∞ **–Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É**\n\n"
            f"**–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            f"‚Ä¢ Discord: {MONITORING_INTERVAL} —Å–µ–∫—É–Ω–¥\n"
            f"‚Ä¢ Twitter: {TWITTER_MONITORING_INTERVAL} —Å–µ–∫—É–Ω–¥\n"
            f"‚Ä¢ Twitter Monitor Adapter: 30 —Å–µ–∫—É–Ω–¥\n\n"
            "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –ó–º—ñ–Ω–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
            "–ü–æ–∫–∏ —â–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –Ω–∞–ª–∞—à—Ç–æ–≤—É—é—Ç—å—Å—è –≤ config.py"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]]
        await query.edit_message_text(settings_text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif callback_data == "settings_theme":
        settings_text = (
            "üé® **–¢–µ–º–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É**\n\n"
            "**–ü–æ—Ç–æ—á–Ω–∞ —Ç–µ–º–∞:** –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–º–∏:**\n"
            "‚Ä¢ üåü –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ (–ø–æ—Ç–æ—á–Ω–∞)\n"
            "‚Ä¢ üåô –¢–µ–º–Ω–∞ (–ø–ª–∞–Ω—É—î—Ç—å—Å—è)\n"
            "‚Ä¢ üåà –ö–æ–ª—å–æ—Ä–æ–≤–∞ (–ø–ª–∞–Ω—É—î—Ç—å—Å—è)\n\n"
            "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –í–∏–±—ñ—Ä —Ç–µ–º–∏ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]]
        await query.edit_message_text(settings_text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif callback_data == "settings_language":
        settings_text = (
            "üåê **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤–∏**\n\n"
            "**–ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞:** üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–≤–∏:**\n"
            "‚Ä¢ üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (–ø–æ—Ç–æ—á–Ω–∞)\n"
            "‚Ä¢ üá¨üáß English (–ø–ª–∞–Ω—É—î—Ç—å—Å—è)\n"
            "‚Ä¢ üá∑üá∫ –†—É—Å—Å–∫–∏–π (–ø–ª–∞–Ω—É—î—Ç—å—Å—è)\n\n"
            "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω—ñ—Å—Ç—å –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]]
        await query.edit_message_text(settings_text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif callback_data == "settings_security":
        session_time_left = security_manager.get_session_time_left(user_id) if security_manager else 0
        settings_text = (
            "üîí **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏**\n\n"
            "**–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            f"‚Ä¢ –¢–∞–π–º-–∞—É—Ç —Å–µ—Å—ñ—ó: {SECURITY_TIMEOUT} —Å–µ–∫—É–Ω–¥\n"
            f"‚Ä¢ –ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {session_time_left} —Å–µ–∫—É–Ω–¥\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: {len(access_manager.user_sessions)}\n\n"
            "**–§—É–Ω–∫—Ü—ñ—ó –±–µ–∑–ø–µ–∫–∏:**\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó\n"
            "‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞ –ø–∞—Ä–æ–ª–µ–º\n"
            "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤\n\n"
            "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –ø—ñ–∑–Ω—ñ—à–µ"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]]
        await query.edit_message_text(settings_text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif callback_data == "settings_export":
        try:
            stats = project_manager.get_statistics()
            user_projects = project_manager.get_user_projects(user_id)
            
            export_text = (
                "üìä **–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö**\n\n"
                "**–í–∞—à—ñ –¥–∞–Ω—ñ:**\n"
                f"‚Ä¢ –ü—Ä–æ–µ–∫—Ç–∏: {len(user_projects)}\n"
                f"‚Ä¢ Twitter –ø—Ä–æ–µ–∫—Ç–∏: {len([p for p in user_projects if p['platform'] == 'twitter'])}\n"
                f"‚Ä¢ Discord –ø—Ä–æ–µ–∫—Ç–∏: {len([p for p in user_projects if p['platform'] == 'discord'])}\n\n"
                "**–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats.get('total_users', 0)}\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats.get('total_projects', 0)}\n"
                f"‚Ä¢ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –¥–∞–Ω–∏—Ö: {stats.get('data_file_size', 0)} –±–∞–π—Ç\n\n"
                "‚ö†Ô∏è **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –§—É–Ω–∫—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É –≤ —Ñ–∞–π–ª –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ"
            )
        except Exception as e:
            export_text = f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É**\n\n{str(e)}"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]]
        await query.edit_message_text(export_text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    elif callback_data == "admin_monitoring_schedule":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            format_info_message(
                "–†–æ–∑–∫–ª–∞–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É",
                "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É",
                "‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–∫–ª–∞–¥—É –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
                "–ü–æ–∫–∏ —â–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∞—Ü—é—î –ø–æ—Å—Ç—ñ–π–Ω–æ –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏."
            ),
            reply_markup=get_admin_monitoring_keyboard()
        )
    
    elif callback_data == "admin_monitoring_logs":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            format_info_message(
                "–õ–æ–≥–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É",
                "–ñ—É—Ä–Ω–∞–ª –ø–æ–¥—ñ–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É",
                "‚ö†Ô∏è –î–µ—Ç–∞–ª—å–Ω—ñ –ª–æ–≥–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
                "–ü–æ–∫–∏ —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ª–æ–≥—ñ–≤ —Å–∏—Å—Ç–µ–º–∏."
            ),
            reply_markup=get_admin_monitoring_keyboard()
        )
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    elif callback_data == "admin_stats_filters":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            format_info_message(
                "–§—ñ–ª—å—Ç—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                "–†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                "‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
                "–ü–æ–∫–∏ —â–æ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."
            ),
            reply_markup=get_admin_search_keyboard()
        )
    
    elif callback_data == "admin_date_filter":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            format_info_message(
                "–§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é",
                "–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑–∞ —á–∞—Å–æ–≤–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º",
                "‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ –¥–∞—Ç–æ—é –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
                "–ü–æ–∫–∏ —â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤—Å—ñ –¥–∞–Ω—ñ –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó."
            ),
            reply_markup=get_admin_search_keyboard()
        )
    
    elif callback_data == "admin_tag_filter":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            format_info_message(
                "–§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–µ–≥–∞–º–∏",
                "–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑–∞ —Ç–µ–≥–∞–º–∏",
                "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥—ñ–≤ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
                "–ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é –ø—Ä–æ–µ–∫—Ç—ñ–≤."
            ),
            reply_markup=get_admin_search_keyboard()
        )
    
    elif callback_data == "admin_advanced_analytics":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            format_info_message(
                "–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞",
                "–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö —Å–∏—Å—Ç–µ–º–∏",
                "‚ö†Ô∏è –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö.\n"
                "–ü–æ–∫–∏ —â–æ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞'."
            ),
            reply_markup=get_admin_search_keyboard()
        )
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö callback'—ñ–≤
    elif callback_data == "user_stats":
        try:
            stats = project_manager.get_statistics()
            user_projects = project_manager.get_user_projects(user_id)
            twitter_count = len([p for p in user_projects if p['platform'] == 'twitter'])
            discord_count = len([p for p in user_projects if p['platform'] == 'discord'])
            twitter_adapter_count = len(project_manager.get_selenium_accounts())
            
            stats_text = format_info_message(
                "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                f"üìä –í–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏:\n"
                f"‚Ä¢ Twitter: {twitter_count}\n"
                f"‚Ä¢ Discord: {discord_count}\n"
                f"‚Ä¢ Twitter Monitor Adapter: {twitter_adapter_count}\n\n"
                f"üåê –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats.get('total_users', 0)}\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats.get('total_projects', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: {len(access_manager.user_sessions)}",
                f"–ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {security_manager.get_session_time_left(user_id)} —Å–µ–∫—É–Ω–¥"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
            )
        except Exception as e:
            await query.edit_message_text(
                format_error_message("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", str(e)),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
            )
    
    elif callback_data == "change_channel":
        user_states[user_id] = {'state': 'setting_forward_channel'}
        await query.edit_message_text(
            "‚úèÔ∏è –ó–º—ñ–Ω–∞ –∫–∞–Ω–∞–ª—É –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É –∞–±–æ –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="forward_settings")]])
        )
    
    elif callback_data == "set_channel":
        user_states[user_id] = {'state': 'setting_forward_channel'}
        await query.edit_message_text(
            "üìù –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É –∞–±–æ –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="forward_settings")]])
        )
    
    elif callback_data.startswith("history_"):
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        count = int(callback_data.split("_")[1])
        await handle_discord_history(update, context, count)
    
    elif callback_data == "help_settings":
        help_text = format_info_message(
            "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏",
            "–Ø–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –±–æ—Ç–∞ –ø—ñ–¥ —Å–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏",
            "‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ä–æ–∑–¥—ñ–ª '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è' –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é\n"
            "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n"
            "‚Ä¢ –û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É\n"
            "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
            "‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç—É–π—Ç–µ —Å–≤–æ—ó –¥–∞–Ω—ñ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help")]]
        await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    elif callback_data == "admin_system":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó –ø–∞–Ω–µ–ª—ñ."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            format_info_message(
                "–°–∏—Å—Ç–µ–º–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è",
                "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞",
                "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏, –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –ª–æ–≥–∏, —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –±–µ–∫–∞–ø–∏ —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è."
            ),
            reply_markup=get_admin_system_keyboard()
        )
    
    elif callback_data == "admin_user_activity":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                format_error_message("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."),
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            active_sessions = len(access_manager.user_sessions)
            total_users = len(project_manager.data.get('users', {}))
            
            activity_text = format_info_message(
                "–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
                f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: {active_sessions}\n"
                f"‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–Ω–ª–∞–π–Ω: {active_sessions}",
                "–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
            )
            
            await query.edit_message_text(
                activity_text,
                reply_markup=get_admin_users_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                format_error_message("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", str(e)),
                reply_markup=get_admin_users_keyboard()
        )
    
    # –ù–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
    elif callback_data == "admin_search":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "üîç **–ü–æ—à—É–∫ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∏**\n\n"
            "üéØ **–¶–µ–Ω—Ç—Ä –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏**\n\n"
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            "‚Ä¢ üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ üìã –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "‚Ä¢ üìä –§–∏–ª—å—Ç—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "‚Ä¢ üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ\n"
            "‚Ä¢ üè∑Ô∏è –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º\n"
            "‚Ä¢ üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=get_admin_search_keyboard(),
        )
    
    elif callback_data == "admin_monitoring":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "üìà **–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∏**\n\n"
            "üéØ **–¶–µ–Ω—Ç—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞**\n\n"
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            "‚Ä¢ üìà –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ ‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ üìä –õ–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=get_admin_monitoring_keyboard(),
        )
    
    elif callback_data == "admin_settings":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏**\n\n"
            "üéØ **–¶–µ–Ω—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫**\n\n"
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            "‚Ä¢ üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
            "‚Ä¢ üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
            "‚Ä¢ üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏\n"
            "‚Ä¢ üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_admin_settings_keyboard(),
        )
    
    elif callback_data == "admin_stats":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞**\n\n"
            "üéØ **–¶–µ–Ω—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n"
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:**\n"
            "‚Ä¢ üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "‚Ä¢ üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã\n"
            "‚Ä¢ üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
            "‚Ä¢ üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –æ—Ç—á–µ—Ç:",
            reply_markup=get_admin_stats_keyboard(),
        )
    
    # –ê–¥–º—ñ–Ω –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º: –¥—ñ—ó –∑ –∫–Ω–æ–ø–æ–∫
    elif callback_data.startswith("admin_forward_enable_"):
        if not access_manager.is_admin(user_id):
            return
        target_id = int(callback_data.split('_')[-1])
        project_manager.enable_forward(target_id)
        await query.edit_message_text(
            f"üü¢ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–ª—è `{target_id}`",
            reply_markup=get_admin_forward_keyboard(target_id),
        )
    elif callback_data.startswith("admin_forward_disable_"):
        if not access_manager.is_admin(user_id):
            return
        target_id = int(callback_data.split('_')[-1])
        project_manager.disable_forward(target_id)
        await query.edit_message_text(
            f"üî¥ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è `{target_id}`",
            reply_markup=get_admin_forward_keyboard(target_id),
        )
    elif callback_data.startswith("admin_forward_status_"):
        if not access_manager.is_admin(user_id):
            return
        target_id = int(callback_data.split('_')[-1])
        status = project_manager.get_forward_status(target_id)
        enabled = status.get('enabled', False)
        channel = status.get('channel_id') or '‚Äî'
        await query.edit_message_text(
            f"üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è `{target_id}`\n\n–°—Ç–∞—Ç—É—Å: {'üü¢ —É–≤—ñ–º–∫–Ω–µ–Ω–æ' if enabled else 'üî¥ –≤–∏–º–∫–Ω–µ–Ω–æ'}\n–ö–∞–Ω–∞–ª: `{channel}`",
            reply_markup=get_admin_forward_keyboard(target_id),
        )
    elif callback_data.startswith("admin_forward_test_"):
        if not access_manager.is_admin(user_id):
            return
        target_id = int(callback_data.split('_')[-1])
        forward_channel = project_manager.get_forward_channel(target_id)
        if not forward_channel:
            await query.edit_message_text(
                f"‚ùå –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_id}` –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª.",
                reply_markup=get_admin_forward_keyboard(target_id),
            )
        else:
            try:
                test_text = (
                    f"üß™ –¢–µ—Å—Ç –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
                    f"–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_id}`."
                )
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                data = {
                    'chat_id': normalize_chat_id(forward_channel),
                    'text': test_text,
                }
                r = requests.post(url, data=data, timeout=5)
                if r.status_code == 200:
                    await query.edit_message_text(
                        f"‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É `{normalize_chat_id(forward_channel)}`",
                        reply_markup=get_admin_forward_keyboard(target_id),
                    )
                else:
                    await query.edit_message_text(
                        f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ({r.status_code}). –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ —É –∫–∞–Ω–∞–ª—ñ.",
                        reply_markup=get_admin_forward_keyboard(target_id)
                    )
            except Exception as e:
                await query.edit_message_text(
                    f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ: {e}",
                    reply_markup=get_admin_forward_keyboard(target_id)
                )
    elif callback_data.startswith("admin_forward_set_"):
        if not access_manager.is_admin(user_id):
            return
        target_id = int(callback_data.split('_')[-1])
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ —É —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è ID –∫–∞–Ω–∞–ª—É
        user_states[user_id] = {'state': 'admin_forward_set_channel', 'data': {'target_id': target_id}}
        await query.edit_message_text(
            f"üìù –ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –ê–ë–û –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ ID –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_id}`:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")]]),
        )

async def handle_project_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    message_text = update.message.text
    state_data: Dict[str, Any] = user_states[user_id]['data']
    
    if 'name' not in state_data:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É
        state_data['name'] = message_text
        platform = state_data['platform']
        
        if platform == 'twitter':
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É: {message_text}\n\n"
                f"üê¶ –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Twitter/X —Å—Ç–æ—Ä—ñ–Ω–∫—É:\n"
                f"–ü—Ä–∏–∫–ª–∞–¥: https://twitter.com/username"
            )
        else:  # discord
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É: {message_text}\n\n"
                f"üí¨ –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Discord –∫–∞–Ω–∞–ª:\n"
                f"–ü—Ä–∏–∫–ª–∞–¥: https://discord.com/channels/1408570777275469866/1413243132467871839"
            )
    else:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        state_data['url'] = message_text
        
        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ–µ–∫—Ç
        if project_manager.add_project(user_id, state_data):
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –∑ –Ω–æ–≤–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            sync_monitors_with_projects()
            
            # –î–æ–¥–∞—î–º–æ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            if state_data['platform'] == 'discord' and discord_monitor:
                try:
                    discord_monitor.add_channel(state_data['url'])
                    logger.info(f"–î–æ–¥–∞–Ω–æ Discord –∫–∞–Ω–∞–ª –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {state_data['url']}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            elif state_data['platform'] == 'twitter' and twitter_monitor:
                try:
                    # –í–∏—Ç—è–≥—É—î–º–æ username –∑ URL
                    username = extract_twitter_username(state_data['url'])
                    if username:
                        twitter_monitor.add_account(username)
                        logger.info(f"–î–æ–¥–∞–Ω–æ Twitter –∞–∫–∞—É–Ω—Ç –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {username}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Twitter –∞–∫–∞—É–Ω—Ç–∞ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                    
            success_text = (
                f"üéâ –ü—Ä–æ–µ–∫—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
                f"üìù –ù–∞–∑–≤–∞: {state_data['name']}\n"
                f"üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {state_data['platform'].title()}\n"
                f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {state_data['url']}\n\n"
                f"–ü—Ä–æ–µ–∫—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."
            )
            await update.message.reply_text(
                success_text,
                reply_markup=get_main_menu_keyboard(user_id)
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard(user_id)
            )
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        del user_states[user_id]

async def handle_forward_channel_setting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    # –û—á–∏—â–∞—î–º–æ @ —è–∫—â–æ —î
    if message_text.startswith('@'):
        message_text = message_text[1:]
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–∞–Ω–∞–ª—É
    if not message_text:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∞–±–æ username –∫–∞–Ω–∞–ª—É.")
        return
    
    # –°–ø—Ä–æ–±—É—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª
    if project_manager.set_forward_channel(user_id, message_text):
        success_text = (
            f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"üì∫ –ö–∞–Ω–∞–ª: {message_text}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n\n"
            f"–¢–µ–ø–µ—Ä –≤—Å—ñ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∞—à–∏—Ö Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏—Å—è –≤ —Ü–µ–π –∫–∞–Ω–∞–ª."
        )
        await update.message.reply_text(
            success_text,
            reply_markup=get_main_menu_keyboard(user_id)
        )
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard(user_id)
        )
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id in user_states:
        del user_states[user_id]

@require_auth
async def handle_admin_create_project_for_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–∞–π—Å—Ç–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω)"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    admin_id = update.effective_user.id
    state = user_states.get(admin_id, {}).get('data', {})
    step = state.get('step', 'telegram_id')
    text = update.message.text.strip()
    
    # –ö—Ä–æ–∫ 1: –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if step == 'telegram_id':
        if not text.isdigit():
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
            return
        target_id = int(text)
        target = access_manager.get_user_by_telegram_id(target_id)
        if not target:
            await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:")
            return
        state['target_id'] = target_id
        state['step'] = 'platform'
        await update.message.reply_text(
            "üåê –í–∫–∞–∂—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø—Ä–æ–µ–∫—Ç—É: 'twitter' –∞–±–æ 'discord'",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_panel")]])
        )
        return
    
    # –ö—Ä–æ–∫ 2: –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
    if step == 'platform':
        platform = text.lower()
        if platform not in ['twitter', 'discord']:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞. –í–≤–µ–¥—ñ—Ç—å 'twitter' –∞–±–æ 'discord':")
            return
        state['platform'] = platform
        state['step'] = 'name'
        await update.message.reply_text("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É:")
        return
    
    # –ö—Ä–æ–∫ 3: –Ω–∞–∑–≤–∞
    if step == 'name':
        state['name'] = text
        state['step'] = 'url'
        if state['platform'] == 'twitter':
            await update.message.reply_text("üîó –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Twitter/X –ë–µ–∑ @ (–Ω–∞–ø—Ä. username):")
        else:
            await update.message.reply_text("üîó –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Discord –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä. https://discord.com/channels/<server>/<channel>):")
        return
    
    # –ö—Ä–æ–∫ 4: URL —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    if step == 'url':
        state['url'] = text
        project_data = {
            'name': state['name'],
            'platform': state['platform'],
            'url': state['url'],
            'description': f"–ê–¥–º—ñ–Ω–æ–º —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è {state['target_id']}"
        }
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–µ–∫—Ç –≤—ñ–¥ —ñ–º–µ–Ω—ñ target_id
        ok = project_manager.add_project(admin_id, project_data, target_user_id=state['target_id'])
        if ok:
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –∑ –Ω–æ–≤–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            sync_monitors_with_projects()
            
            # –î–æ–¥–∞—î–º–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –æ–¥—Ä–∞–∑—É
            if state['platform'] == 'twitter':
                username = extract_twitter_username(state['url'])
                if twitter_monitor and username:
                    twitter_monitor.add_account(username)
            else:
                if discord_monitor:
                    discord_monitor.add_channel(state['url'])
            sync_monitors_with_projects()
            await update.message.reply_text("‚úÖ –ü—Ä–æ–µ–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ –¥–æ–¥–∞–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç.")
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ –º–∞–π—Å—Ç–µ—Ä
        if admin_id in user_states:
            del user_states[admin_id]

async def handle_twitter_addition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Twitter –∞–∫–∞—É–Ω—Ç–∞"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    username = update.message.text.strip().replace('@', '')
    
    try:
        # –î–æ–¥–∞—î–º–æ –¥–æ Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        if twitter_monitor:
            twitter_monitor.add_account(username)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–µ–∫—Ç
        project_data = {
            'name': f"Twitter: @{username}",
            'platform': 'twitter',
            'url': f"https://twitter.com/{username}",
            'description': f"–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Twitter –∞–∫–∞—É–Ω—Ç–∞ @{username}"
        }
        
        if project_manager.add_project(user_id, project_data):
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –∑ –Ω–æ–≤–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            sync_monitors_with_projects()
            
            await update.message.reply_text(
                f"‚úÖ **Twitter –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!**\n\n"
                f"üê¶ **Username:** @{username}\n"
                f"üîó **URL:** https://twitter.com/{username}\n\n"
                f"–ê–∫–∞—É–Ω—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.",
                reply_markup=get_twitter_projects_keyboard(user_id),
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É.",
                reply_markup=get_twitter_projects_keyboard(user_id)
            )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=get_twitter_projects_keyboard(user_id)
        )
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
    del user_states[user_id]

async def handle_discord_addition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    channel_id = update.message.text.strip()
    
    try:
        # –î–æ–¥–∞—î–º–æ –¥–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        if discord_monitor:
            discord_monitor.add_channel(channel_id)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–µ–∫—Ç
        project_data = {
            'name': f"Discord: {channel_id}",
            'platform': 'discord',
            'url': f"https://discord.com/channels/{channel_id}",
            'description': f"–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Discord –∫–∞–Ω–∞–ª—É {channel_id}"
        }
        
        if project_manager.add_project(user_id, project_data):
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –∑ –Ω–æ–≤–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            sync_monitors_with_projects()
            
            await update.message.reply_text(
                f"‚úÖ **Discord –∫–∞–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!**\n\n"
                f"üí¨ **Channel ID:** {channel_id}\n"
                f"üîó **URL:** https://discord.com/channels/{channel_id}\n\n"
                f"–ö–∞–Ω–∞–ª –¥–æ–¥–∞–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.",
                reply_markup=get_discord_projects_keyboard(user_id),
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É.",
                reply_markup=get_discord_projects_keyboard(user_id)
            )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=get_discord_projects_keyboard(user_id)
        )
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
    del user_states[user_id]

async def handle_admin_user_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    state_data = user_states[user_id]['data']
    
    try:
        if state_data['step'] == 'telegram_id':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —á–∏—Å–ª–æ
            if not message_text.isdigit():
                await update.message.reply_text(
                    "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                    "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
                    "–í–≤–µ–¥—ñ—Ç—å Telegram ID —â–µ —Ä–∞–∑:"
                )
                return
            
            telegram_id = int(message_text)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
            existing_user = access_manager.get_user_by_telegram_id(telegram_id)
            if existing_user:
                await update.message.reply_text(
                    f"‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î!**\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ Telegram ID {telegram_id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ.\n"
                    f"–†–æ–ª—å: {'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' if existing_user.get('role') == 'admin' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
                )
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ Telegram ID —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
            state_data['telegram_id'] = telegram_id
            state_data['step'] = 'username'
            
            await update.message.reply_text(
                f"‚úÖ **Telegram ID:** {telegram_id}\n\n"
                f"üë§ **–í–≤–µ–¥—ñ—Ç—å username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:**\n\n"
                f"üí° **–ü—Ä–∏–∫–ª–∞–¥:** JohnDoe\n"
                f"üí° **–ü—Ä–∏–º—ñ—Ç–∫–∞:** Username –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º"
            )
            
        elif state_data['step'] == 'username':
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ username —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–∞—Ä–æ–ª—é
            username = message_text.strip()
            state_data['username'] = username
            state_data['step'] = 'password'
            
            await update.message.reply_text(
                f"‚úÖ **Telegram ID:** {state_data['telegram_id']}\n"
                f"‚úÖ **Username:** {username or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"üîê **–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:**\n\n"
                f"üí° **–ü—Ä–∏–∫–ª–∞–¥:** mypassword123\n"
                f"üí° **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –Ø–∫—â–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–∞—Ä–æ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"
            )
            
        elif state_data['step'] == 'password':
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–æ–ª—å —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            password = message_text.strip()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            created_user_id = access_manager.add_user(
                state_data['telegram_id'],
                state_data['username'] or "Unknown",
                password or ""
            )
            
            if created_user_id:
                await update.message.reply_text(
                    f"üéâ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!**\n\n"
                    f"üë§ **Username:** {state_data['username'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üÜî **Telegram ID:** {state_data['telegram_id']}\n"
                    f"üîê **–ü–∞—Ä–æ–ª—å:** {password or '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'}\n"
                    f"üëë **–†–æ–ª—å:** –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ—é /login",
                    reply_markup=get_admin_users_keyboard(),
                )
            else:
                await update.message.reply_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!**\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_users_keyboard()
                )
            
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
            del user_states[user_id]
            
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_admin_users_keyboard()
        )
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_admin_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    state_data = user_states[user_id]['data']
    
    try:
        if state_data['step'] == 'telegram_id':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —á–∏—Å–ª–æ
            if not message_text.isdigit():
                await update.message.reply_text(
                    "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                    "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
                    "–í–≤–µ–¥—ñ—Ç—å Telegram ID —â–µ —Ä–∞–∑:"
                )
                return
            
            telegram_id = int(message_text)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
            existing_user = access_manager.get_user_by_telegram_id(telegram_id)
            if existing_user:
                await update.message.reply_text(
                    f"‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î!**\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ Telegram ID {telegram_id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ.\n"
                    f"–†–æ–ª—å: {'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' if existing_user.get('role') == 'admin' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
                )
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ Telegram ID —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
            state_data['telegram_id'] = telegram_id
            state_data['step'] = 'username'
            
            await update.message.reply_text(
                f"‚úÖ **Telegram ID:** {telegram_id}\n\n"
                f"üë§ **–í–≤–µ–¥—ñ—Ç—å username –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n"
                f"üí° **–ü—Ä–∏–∫–ª–∞–¥:** AdminJohn\n"
                f"üí° **–ü—Ä–∏–º—ñ—Ç–∫–∞:** Username –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º"
            )
            
        elif state_data['step'] == 'username':
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ username —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–∞—Ä–æ–ª—é
            username = message_text.strip()
            state_data['username'] = username
            state_data['step'] = 'password'
            
            await update.message.reply_text(
                f"‚úÖ **Telegram ID:** {state_data['telegram_id']}\n"
                f"‚úÖ **Username:** {username or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"üîê **–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n"
                f"üí° **–ü—Ä–∏–∫–ª–∞–¥:** adminpass123\n"
                f"üí° **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –Ø–∫—â–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–∞—Ä–æ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"
            )
            
        elif state_data['step'] == 'password':
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–æ–ª—å —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            password = message_text.strip()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            created_user_id = access_manager.create_admin_user(
                state_data['telegram_id'],
                state_data['username'] or "Unknown",
                password or ""
            )
            
            if created_user_id:
                await update.message.reply_text(
                    f"üéâ **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!**\n\n"
                    f"üë§ **Username:** {state_data['username'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üÜî **Telegram ID:** {state_data['telegram_id']}\n"
                    f"üîê **–ü–∞—Ä–æ–ª—å:** {password or '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'}\n"
                    f"üëë **–†–æ–ª—å:** –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
                    f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ—é /login",
                    reply_markup=get_admin_users_keyboard(),
                )
            else:
                await update.message.reply_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!**\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_users_keyboard()
                )
            
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
            del user_states[user_id]
            
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_admin_users_keyboard()
        )
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_user_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    try:
        # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        results = access_manager.search_users(message_text)
        
        if not results:
            await update.message.reply_text(
                f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É**\n\n"
                f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º: '{message_text}'\n\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç:",
                reply_markup=get_admin_users_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        results_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É** (–∑–Ω–∞–π–¥–µ–Ω–æ: {len(results)})\n\n"
        
        for i, result in enumerate(results[:10], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 10
            role_emoji = "üëë" if result.get('role') == 'admin' else "üë§"
            status_emoji = "‚úÖ" if result.get('is_active', True) else "‚ùå"
            match_type = "username" if result.get('match_type') == 'username' else "Telegram ID"
            
            results_text += (
                f"{i}. {role_emoji} **{result.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}**\n"
                f"   üÜî ID: `{result.get('telegram_id')}`\n"
                f"   üìä –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
                f"   üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞: {match_type}\n"
                f"   üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {result.get('created_at', '')[:10]}\n\n"
            )
        
        if len(results) > 10:
            results_text += f"... —Ç–∞ —â–µ {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
        
        await update.message.reply_text(
            results_text,
            reply_markup=get_admin_users_keyboard(),
        )
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:** {str(e)}",
            reply_markup=get_admin_users_keyboard()
        )
    finally:
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_user_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —á–∏—Å–ª–æ
        if not message_text.isdigit():
            await update.message.reply_text(
                "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
                "–í–≤–µ–¥—ñ—Ç—å Telegram ID —â–µ —Ä–∞–∑:"
            )
            return
        
        target_telegram_id = int(message_text)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
        target_user = access_manager.get_user_by_telegram_id(target_telegram_id)
        if not target_user:
            await update.message.reply_text(
                f"‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**\n\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ Telegram ID {target_telegram_id} –Ω–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ–±–µ
        if target_telegram_id == user_id:
            await update.message.reply_text(
                "‚ùå **–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ–±–µ!**\n\n"
                "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç.\n\n"
                "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
            )
            return
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if access_manager.delete_user(target_telegram_id):
            username = target_user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')
            role = target_user.get('role', 'user')
            
            await update.message.reply_text(
                f"üóëÔ∏è **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π!**\n\n"
                f"üë§ **Username:** {username}\n"
                f"üÜî **Telegram ID:** {target_telegram_id}\n"
                f"üëë **–†–æ–ª—å:** {'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' if role == 'admin' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}\n\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ —Å–∏—Å—Ç–µ–º–∏.",
                reply_markup=get_admin_users_keyboard(),
            )
        else:
            await update.message.reply_text(
                "‚ùå **–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!**\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=get_admin_users_keyboard()
            )
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}",
            reply_markup=get_admin_users_keyboard()
        )
    finally:
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_role_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    state_data = user_states[user_id]['data']
    
    try:
        if state_data['step'] == 'telegram_id':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —á–∏—Å–ª–æ
            if not message_text.isdigit():
                await update.message.reply_text(
                    "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                    "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
                    "–í–≤–µ–¥—ñ—Ç—å Telegram ID —â–µ —Ä–∞–∑:"
                )
                return
            
            target_telegram_id = int(message_text)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
            target_user = access_manager.get_user_by_telegram_id(target_telegram_id)
            if not target_user:
                await update.message.reply_text(
                    f"‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ Telegram ID {target_telegram_id} –Ω–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
                )
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ
            state_data['target_telegram_id'] = target_telegram_id
            state_data['target_user'] = target_user
            state_data['step'] = 'new_role'
            
            current_role = target_user.get('role', 'user')
            current_role_text = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if current_role == "admin" else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            
            await update.message.reply_text(
                f"‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:**\n\n"
                f"üë§ **Username:** {target_user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}\n"
                f"üÜî **Telegram ID:** {target_telegram_id}\n"
                f"üëë **–ü–æ—Ç–æ—á–Ω–∞ —Ä–æ–ª—å:** {current_role_text}\n\n"
                f"üîÑ **–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É —Ä–æ–ª—å:**\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å: 'admin' –∞–±–æ 'user'",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
                ]])
            )
            
        elif state_data['step'] == 'new_role':
            new_role = message_text.lower().strip()
            
            if new_role not in ['admin', 'user']:
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤—ñ—Ä–Ω–∞ —Ä–æ–ª—å!**\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ: 'admin' –∞–±–æ 'user'\n"
                    "–í–≤–µ–¥—ñ—Ç—å —Ä–æ–ª—å —â–µ —Ä–∞–∑:"
                )
                return
            
            target_telegram_id = state_data['target_telegram_id']
            target_user = state_data['target_user']
            
            # –ó–º—ñ–Ω—é—î–º–æ —Ä–æ–ª—å
            if access_manager.change_user_role(target_telegram_id, new_role):
                old_role_text = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if target_user and target_user.get('role') == 'admin' else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
                new_role_text = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if new_role == 'admin' else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
                
                await update.message.reply_text(
                    f"üîÑ **–†–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∞!**\n\n"
                    f"üë§ **Username:** {target_user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ') if target_user else '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}\n"
                    f"üÜî **Telegram ID:** {target_telegram_id}\n"
                    f"üëë **–°—Ç–∞—Ä–∞ —Ä–æ–ª—å:** {old_role_text}\n"
                    f"üëë **–ù–æ–≤–∞ —Ä–æ–ª—å:** {new_role_text}\n\n"
                    f"–î–æ–∑–≤–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.",
                    reply_markup=get_admin_users_keyboard(),
                )
            else:
                await update.message.reply_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ!**\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_users_keyboard()
                )
            
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
            del user_states[user_id]
            
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}",
            reply_markup=get_admin_users_keyboard()
        )
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_password_reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    state_data = user_states[user_id]['data']
    
    try:
        if state_data['step'] == 'telegram_id':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —á–∏—Å–ª–æ
            if not message_text.isdigit():
                await update.message.reply_text(
                    "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                    "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
                    "–í–≤–µ–¥—ñ—Ç—å Telegram ID —â–µ —Ä–∞–∑:"
                )
                return
            
            target_telegram_id = int(message_text)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
            target_user = access_manager.get_user_by_telegram_id(target_telegram_id)
            if not target_user:
                await update.message.reply_text(
                    f"‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ Telegram ID {target_telegram_id} –Ω–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
                )
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é
            state_data['target_telegram_id'] = target_telegram_id
            state_data['target_user'] = target_user
            state_data['step'] = 'new_password'
            
            await update.message.reply_text(
                f"‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:**\n\n"
                f"üë§ **Username:** {target_user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}\n"
                f"üÜî **Telegram ID:** {target_telegram_id}\n\n"
                f"üîê **–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:**\n\n"
                f"üí° **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –Ø–∫—â–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–∞—Ä–æ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
                ]])
            )
            
        elif state_data['step'] == 'new_password':
            new_password = message_text.strip()
            target_telegram_id = state_data['target_telegram_id']
            target_user = state_data['target_user']
            
            # –°–∫–∏–¥–∞—î–º–æ –ø–∞—Ä–æ–ª—å
            if access_manager.reset_user_password(target_telegram_id, new_password or ""):
                password_text = new_password if new_password else "–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"
                
                await update.message.reply_text(
                    f"üîê **–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ!**\n\n"
                    f"üë§ **Username:** {target_user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ') if target_user else '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}\n"
                    f"üÜî **Telegram ID:** {target_telegram_id}\n"
                    f"üîê **–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:** {password_text}\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–¥–µ —Ä–æ–∑–ª–æ–≥—ñ–Ω–µ–Ω–∏–π –∑ —É—Å—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤.",
                    reply_markup=get_admin_users_keyboard(),
                )
            else:
                await update.message.reply_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é!**\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_users_keyboard()
                )
            
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
            del user_states[user_id]
            
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}",
            reply_markup=get_admin_users_keyboard()
        )
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_system_reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    try:
        if message_text == "CONFIRM_RESET":
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
            if access_manager.reset_system():
                await update.message.reply_text(
                    f"‚ö†Ô∏è **–°–ò–°–¢–ï–ú–ê –°–ö–ò–ù–£–¢–ê!**\n\n"
                    f"‚úÖ **–í–∏–∫–æ–Ω–∞–Ω–æ:**\n"
                    f"‚Ä¢ –í—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–æ\n"
                    f"‚Ä¢ –í—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ\n"
                    f"‚Ä¢ –í—Å—ñ —Å–µ—Å—ñ—ó –æ—á–∏—â–µ–Ω–æ\n"
                    f"‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞\n\n"
                    f"üëë **–ó–±–µ—Ä–µ–∂–µ–Ω–æ:**\n"
                    f"‚Ä¢ –í—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤\n"
                    f"‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
                    f"–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –Ω–æ–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.",
                    reply_markup=get_admin_system_keyboard(),
                )
            else:
                await update.message.reply_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏!**\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_system_keyboard()
                )
        else:
            await update.message.reply_text(
                "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!**\n\n"
                "–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –≤–≤–µ–¥—ñ—Ç—å —Ç–æ—á–Ω–æ: **CONFIRM_RESET**\n\n"
                "‚ö†Ô∏è **–£–í–ê–ì–ê!** –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_system")
                ]])
            )
            return
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}",
            reply_markup=get_admin_system_keyboard()
        )
    finally:
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_forward_select_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    admin_id = update.effective_user.id
    message_text = update.message.text.strip()
    try:
        if not message_text.isdigit():
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
            return
        target_id = int(message_text)
        target_user = access_manager.get_user_by_telegram_id(target_id)
        if not target_user:
            await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:")
            return
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º
        user_states[admin_id] = {'state': 'admin_forward_set_user_menu', 'data': {'target_id': target_id}}
        status = project_manager.get_forward_status(target_id)
        enabled = status.get('enabled', False)
        channel = status.get('channel_id') or '‚Äî'
        await update.message.reply_text(
            f"üîÅ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_id}`\n\n–°—Ç–∞—Ç—É—Å: {'üü¢ —É–≤—ñ–º–∫–Ω–µ–Ω–æ' if enabled else 'üî¥ –≤–∏–º–∫–Ω–µ–Ω–æ'}\n–ö–∞–Ω–∞–ª: `{channel}`",
            reply_markup=get_admin_forward_keyboard(target_id),
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def handle_admin_forward_set_channel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–∞–Ω–∞–ª –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    admin_id = update.effective_user.id
    message_text = update.message.text.strip()
    state = user_states.get(admin_id, {}).get('data', {})
    target_id = state.get('target_id')
    if not target_id:
        await update.message.reply_text("‚ùå –°–µ—Å—ñ—è –≤—Ç—Ä–∞—á–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é.")
        return
    # –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ 2 —Å–ø–æ—Å–æ–±–∏: —Ç–µ–∫—Å—Ç–æ–≤–∏–π ID –∞–±–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É
    fwd_chat = getattr(update.message, 'forward_from_chat', None)
    if fwd_chat:
        channel_id_str = str(getattr(fwd_chat, 'id', ''))
    else:
        if not message_text:
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É –∞–±–æ –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω—å–æ–≥–æ.")
            return
        channel_id_str = message_text
    if project_manager.set_forward_channel(target_id, channel_id_str):
        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è {target_id}: {normalize_chat_id(channel_id_str)}",
            reply_markup=get_admin_forward_keyboard(target_id)
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–∞–Ω–∞–ª.")

async def handle_twitter_adapter_addition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç–∞"""
    if not update.effective_user or not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    username = update.message.text.strip().replace('@', '')
    
    try:
        # –î–æ–¥–∞—î–º–æ –¥–æ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        if twitter_monitor_adapter:
            twitter_monitor_adapter.add_account(username)
        
        # –î–æ–¥–∞—î–º–æ –¥–æ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        project_manager.add_selenium_account(username, user_id)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        sync_monitors_with_projects()
        
        await update.message.reply_text(
            f"‚úÖ **Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!**\n\n"
            f"üöÄ **Username:** @{username}\n"
            f"üîó **URL:** https://x.com/{username}\n\n"
            f"–ê–∫–∞—É–Ω—Ç –¥–æ–¥–∞–Ω–æ –¥–æ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.",
            reply_markup=get_twitter_adapter_accounts_keyboard(),
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=get_twitter_adapter_accounts_keyboard()
        )
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
    del user_states[user_id]

async def handle_channel_ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–Ω–≥—É –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ"""
    if not update.message or not update.message.chat:
        return
        
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª
        channel_id = update.message.chat.id
        channel_title = update.message.chat.title or "Unknown Channel"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –ø—ñ–Ω–≥–Ω—É–≤
        if update.message.from_user:
            user_id = update.message.from_user.id
            username = update.message.from_user.username or update.message.from_user.first_name
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π (—É–∑–≥–æ–¥–∂–µ–Ω–æ –∑ —ñ–Ω—à–∏–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏)
            if not access_manager.is_authorized(user_id):
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üîí –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.\n\n–°–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –±–æ—Ç—ñ: @{context.bot.username}"
                    )
                except:
                    pass  # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                return
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
            if project_manager.set_forward_channel(user_id, str(channel_id)):
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª
                safe_channel_title = escape_html(channel_title)
                safe_username = escape_html(username)
                
                confirmation_text = (
                    f"‚úÖ **–ö–∞–Ω–∞–ª –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è!**\n\n"
                    f"üì∫ –ö–∞–Ω–∞–ª: {safe_channel_title}\n"
                    f"üë§ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: @{safe_username}\n"
                    f"üîÑ –°—Ç–∞—Ç—É—Å: –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n\n"
                    f"–¢–µ–ø–µ—Ä –≤—Å—ñ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏—Å—è –≤ —Ü–µ–π –∫–∞–Ω–∞–ª."
                )
                
                await context.bot.send_message(
                    chat_id=normalize_chat_id(str(channel_id)),
                    text=confirmation_text,
                )
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                try:
                    await context.bot.send_message(
                        chat_id=normalize_chat_id(str(user_id)),
                        text=f"‚úÖ –ö–∞–Ω–∞–ª '{channel_title}' —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å!"
                    )
                except:
                    pass
                    
                logger.info(f"–ö–∞–Ω–∞–ª {channel_id} ({channel_title}) –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            else:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É '{channel_title}'. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                    )
                except:
                    pass
        else:
            # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await context.bot.send_message(
                chat_id=channel_id,
                text="‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è."
            )
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—ñ–Ω–≥—É –≤ –∫–∞–Ω–∞–ª—ñ: {e}")
        try:
            await context.bot.send_message(
                chat_id=update.message.chat.id,
                text="‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
        except:
            pass

async def handle_discord_history(update: Update, context: ContextTypes.DEFAULT_TYPE, count: int) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó Discord"""
    if not update.callback_query or not update.effective_user:
        return
        
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id]['state'] != 'viewing_history':
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.", reply_markup=get_main_menu_keyboard(user_id))
        return
    
    project = user_states[user_id]['data']['project']
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    await query.edit_message_text(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—É {project['name']}...")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Discord
        messages = await get_discord_messages_history(project['url'], count)
        
        if not messages:
            await query.edit_message_text(
                f"üìú –Ü—Å—Ç–æ—Ä—ñ—è –∫–∞–Ω–∞–ª—É: {project['name']}\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n–ú–æ–∂–ª–∏–≤–æ, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—É –∞–±–æ –∫–∞–Ω–∞–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.",
                reply_markup=get_main_menu_keyboard(user_id)
            )
        else:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            history_text = format_discord_history(messages, project['name'], count)
            
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ —Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(history_text) > 4000:
                # Telegram –º–∞—î –ª—ñ–º—ñ—Ç –Ω–∞ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                parts = [history_text[i:i+4000] for i in range(0, len(history_text), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await query.edit_message_text(part)
                    else:
                        await context.bot.send_message(chat_id=user_id, text=part)
            else:
                await query.edit_message_text(history_text, reply_markup=get_main_menu_keyboard(user_id))
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó Discord: {e}")
        await query.edit_message_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –∫–∞–Ω–∞–ª—É {project['name']}:\n{str(e)}",
            reply_markup=get_main_menu_keyboard(user_id)
        )
    finally:
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id in user_states:
            del user_states[user_id]

async def get_discord_messages_history(channel_url: str, limit: int) -> List[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ Discord –∫–∞–Ω–∞–ª—É"""
    if not DISCORD_AUTHORIZATION:
        return []
    
    try:
        # –ü–∞—Ä—Å–∏–º–æ URL –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è channel_id
        import re
        match = re.search(r'discord\.com/channels/(\d+)/(\d+)', channel_url)
        if not match:
            return []
        
        channel_id = match.group(2)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π session –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://discord.com/api/v9/channels/{channel_id}/messages?limit={limit}",
                headers={
                    'Authorization': DISCORD_AUTHORIZATION,
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {response.status}")
                    return []
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ get_discord_messages_history: {e}")
        return []

def format_discord_history(messages: List[Dict], channel_name: str, count: int) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å Discord"""
    from datetime import datetime
    
    header = f"üìú **–Ü—Å—Ç–æ—Ä—ñ—è –∫–∞–Ω–∞–ª—É: {channel_name}**\n"
    header += f"üìä –û—Å—Ç–∞–Ω–Ω—ñ {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:\n\n"
    
    if not messages:
        return header + "‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    
    formatted_messages = []
    for i, message in enumerate(messages, 1):
        author = message.get('author', {}).get('username', 'Unknown')
        content = message.get('content', '')
        timestamp = message.get('timestamp', '')
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å
        try:
            if timestamp:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime('%d.%m.%Y %H:%M')
            else:
                time_str = 'Unknown time'
        except:
            time_str = 'Unknown time'
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if len(content) > 200:
            content = content[:200] + "..."
        
        formatted_msg = f"**{i}.** üë§ {author} | üïí {time_str}\n"
        if content:
            formatted_msg += f"üí¨ {content}\n"
        formatted_msg += "‚îÄ" * 30 + "\n"
        
        formatted_messages.append(formatted_msg)
    
    return header + "\n".join(formatted_messages)

def handle_discord_notifications_sync(new_messages: List[Dict]) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å Discord –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é thread'—ñ–≤ —Ç–∞ —Ç–µ–≥—ñ–≤"""
    global bot_instance
    
    if not bot_instance:
        return
        
    try:
        logger.info(f"üì® handle_discord_notifications_sync: –æ—Ç—Ä–∏–º–∞–Ω–æ {len(new_messages)} Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
        
        # –ö–µ—à—ñ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        channel_to_tracked_data: Dict[str, List[Dict]] = {}
        user_to_forward_channel: Dict[int, str] = {}
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ú–ò–¢–¢–Ñ–í–û
        for message in new_messages:
            try:
                message_id = message.get('message_id', '')
                channel_id = message.get('channel_id', '')
            
                # –ö—Ä–∞—Å–∏–≤–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
                author = escape_html(message['author'])
                content = escape_html(message['content'])
                
                # –û–±—Ä—ñ–∑–∞—î–º–æ —Ç–µ–∫—Å—Ç —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
                if len(content) > 200:
                    content = content[:200] + "..."
                
                # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
                timestamp = message.get('timestamp', '')
                formatted_date = "–ù–µ –≤—ñ–¥–æ–º–æ"
                time_ago = ""
                
                if timestamp:
                    try:
                        from datetime import datetime
                        dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                        formatted_date = dt.strftime("%d %B, %H:%M UTC")
                        time_ago = _get_time_ago(dt)
                    except:
                        formatted_date = timestamp[:19] if len(timestamp) > 19 else timestamp
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä –∑ URL
                server_name = "Discord"
                guild_id = ""
                try:
                    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ guild_id –∑ URL
                    url_parts = message['url'].split('/')
                    if len(url_parts) >= 5:
                        guild_id = url_parts[4]
                        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Å–µ—Ä–≤–µ—Ä–∞ –∑ –ø—Ä–æ–µ–∫—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        server_name = get_discord_server_name(channel_id, guild_id)
                        logger.info(f"üè∑Ô∏è Discord —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª—É {channel_id}: {server_name}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
                    pass
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                images = message.get('images', [])
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø—Ä–æ–µ–∫—Ç–∏, —è–∫—ñ –≤—ñ–¥—Å—Ç–µ–∂—É—é—Ç—å —Ü–µ–π Discord –∫–∞–Ω–∞–ª
                if channel_id in channel_to_tracked_data:
                    tracked_data = channel_to_tracked_data[channel_id]
                else:
                    tracked_data = get_users_tracking_discord_channel(channel_id)
                    channel_to_tracked_data[channel_id] = tracked_data

                # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                logger.info(f"üîç Discord –∫–∞–Ω–∞–ª {channel_id}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(tracked_data)} –ø—Ä–æ–µ–∫—Ç—ñ–≤")
                for item in tracked_data:
                    logger.info(f"   üìã –ü—Ä–æ–µ–∫—Ç: {item['project']['name']} (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {item['user_id']})")

                if not tracked_data:
                    logger.warning(f"üö´ Discord –∫–∞–Ω–∞–ª {channel_id}: –Ω–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤, —â–æ –≤—ñ–¥—Å—Ç–µ–∂—É—é—Ç—å —Ü–µ–π –∫–∞–Ω–∞–ª")
                    continue
                
                logger.info(f"‚úÖ –û–±—Ä–æ–±–ª—è—î–º–æ Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –¥–ª—è {len(tracked_data)} –ø—Ä–æ–µ–∫—Ç—ñ–≤")

                # –ù–µ –¥—É–±–ª—é–≤–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –≤ –æ–¥–Ω—É –≥—ñ–ª–∫—É
                sent_targets: Set[str] = set()

                for tracked_item in tracked_data:
                    try:
                        user_id = tracked_item['user_id']
                        project = tracked_item['project']
                        project_id = project.get('id')
                        project_name = project.get('name', 'Discord Project')
                        project_tag = project.get('tag', f"#ds_project_{project_id}")
                        # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞–Ω–∞–ª—É –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
                        if user_id in user_to_forward_channel:
                            forward_channel = user_to_forward_channel[user_id]
                        else:
                            forward_channel = project_manager.get_forward_channel(user_id)
                            user_to_forward_channel[user_id] = forward_channel
                        if not forward_channel:
                            logger.warning(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è")
                            logger.warning(f"üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /forward_set_channel")
                            continue
                        logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –º–∞—î –∫–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è: {forward_channel}")
                        # –û—á–∏—â–∞—î–º–æ –∫–∞–Ω–∞–ª –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                        clean_channel = forward_channel.split('/')[0] if '/' in forward_channel else forward_channel
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è thread'–∏
                        forward_status = project_manager.get_forward_status(user_id)
                        use_threads = forward_status.get('use_threads', True)
                        # –§–æ—Ä–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ø—Ä–æ–µ–∫—Ç—É
                        forward_key = f"discord_{channel_id}_{message_id}_{project_id}"
                        if use_threads:
                            # –†–æ–±–æ—Ç–∞ –∑ thread'–∞–º–∏
                            thread_id = project_manager.get_project_thread(user_id, project_id)
                            logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Discord thread –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name}: thread_id = {thread_id}")
                            if not thread_id:
                                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π thread
                                logger.info(f"üîß –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π Discord thread –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name} –≤ –∫–∞–Ω–∞–ª—ñ {clean_channel}")
                                thread_id = create_project_thread_sync(BOT_TOKEN, clean_channel, project_name, project_tag, str(user_id))
                                if thread_id:
                                    project_manager.set_project_thread(user_id, project_id, thread_id)
                                    logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ Discord thread {thread_id} –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name}")
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ Discord thread –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name}")
                                    logger.info(f"üîÑ –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—è –Ω–∞ —Ä–µ–∂–∏–º –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑ —Ç–µ–≥–∞–º–∏ –∑–∞–º—ñ—Å—Ç—å threads")
                                    # –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—è –Ω–∞ —Ä–µ–∂–∏–º –∑ —Ç–µ–≥–∞–º–∏
                                    use_threads = False
                            else:
                                logger.info(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ—Å–Ω—É—é—á–∏–π Discord thread {thread_id} –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name}")
                            # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è thread'–∞
                            thread_key = f"{clean_channel}_{thread_id}"
                            if thread_key in sent_targets:
                                continue
                            if project_manager.is_message_sent(forward_key, clean_channel, user_id):
                                continue
                            # –§–æ—Ä–º—É—î–º–æ –ø—ñ–Ω–≥–∏ –¥–ª—è –≤—Å—ñ—Ö user_id —ñ–∑ ping_users
                            ping_users = project_manager.get_project_ping_users(user_id, project_id)
                            ping_mentions = ""
                            if ping_users:
                                ping_mentions = " ".join([f'<a href="tg://user?id={uid}">@{uid}</a>' for uid in ping_users])
                            # –§–æ—Ä–º—É—î–º–æ –≥—ñ–ø–µ—Ä–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç—É
                            user_mention = f'<a href="tg://user?id={user_id}">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</a>'
                            # –§–æ—Ä–º—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Discord url
                            discord_url = message.get('url')
                            # –Ø–∫—â–æ url –Ω–µ –º—ñ—Å—Ç–∏—Ç—å server_id, –±—É–¥—É—î–º–æ –≤—Ä—É—á–Ω—É
                            if discord_url and '/channels/' in discord_url:
                                url_parts = discord_url.split('/')
                                if len(url_parts) >= 7:
                                    server_id = url_parts[4]
                                    channel_id = url_parts[5]
                                    message_id = url_parts[6]
                                else:
                                    server_id = guild_id or ''
                                    channel_id = channel_id
                                    message_id = message.get('message_id', '')
                                discord_url = f"https://discord.com/channels/{server_id}/{channel_id}/{message_id}"
                            else:
                                # fallback: –±—É–¥—É—î–º–æ –∑ guild_id, channel_id, message_id
                                discord_url = f"https://discord.com/channels/{guild_id}/{channel_id}/{message.get('message_id','')}"
                            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Å—Ç–∏–ª—ñ Twitter + –ø—ñ–Ω–≥–∏
                            forward_text = (
                                f"üí¨ <b>–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Discord</b>\n"
                                f"‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {project_name}\n"
                                f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {server_name}\n"
                                f"‚Ä¢ –ê–≤—Ç–æ—Ä: {author} | {user_mention}"
                            )
                            if ping_mentions:
                                forward_text += f"\n‚Ä¢ –ü—ñ–Ω–≥: {ping_mentions}"
                            forward_text += (
                                f"\n‚Ä¢ –î–∞—Ç–∞: {formatted_date} ({time_ago})\n"
                                f"‚Ä¢ –¢–µ–∫—Å—Ç: {content}\n"
                                f'üîó {discord_url}'
                            )
                            if images:
                                forward_text += f"\nüì∑ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}"
                            logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ thread {thread_id} –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name} –≤ –∫–∞–Ω–∞–ª {clean_channel}")
                            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ thread
                            success = send_message_to_thread_sync(BOT_TOKEN, clean_channel, thread_id, forward_text, project_tag)
                            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ thread {thread_id}: success = {success}")
                            if success:
                                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ thread —è–∫—â–æ —î
                                if images:
                                    for i, image_url in enumerate(images[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å
                                        try:
                                            image_caption = f"üì∑ Discord –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}/{len(images)}" if len(images) > 1 else "üì∑ Discord –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
                                            send_photo_to_thread_sync(BOT_TOKEN, clean_channel, thread_id, image_url, image_caption, project_tag)
                                            import time
                                            time.sleep(1)
                                        except Exception as e:
                                            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Discord –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ thread: {e}")
                                project_manager.add_sent_message(forward_key, clean_channel, user_id)
                                sent_targets.add(thread_key)
                                logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ thread {thread_id} –ø—Ä–æ–µ–∫—Ç—É {project_name}")
                            else:
                                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ thread {thread_id}")
                        else:
                            # –°—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞ - –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª –∑ —Ç–µ–≥–æ–º
                            target_key = f"{clean_channel}_{project_tag}"
                            if target_key in sent_targets:
                                continue
                            if project_manager.is_message_sent(forward_key, clean_channel, user_id):
                                continue
                            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–≥–æ–º
                            user_mention = f'<a href="tg://user?id={user_id}">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</a>'
                            forward_text = (
                                f"{project_tag}\n\n"
                                f"üí¨ <b>–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Discord</b>\n"
                                f"‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {project_name}\n"
                                f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {server_name}\n"
                                f"‚Ä¢ –ê–≤—Ç–æ—Ä: {author} | {user_mention}\n"
                                f"‚Ä¢ –î–∞—Ç–∞: {formatted_date} ({time_ago})\n"
                                f"‚Ä¢ –¢–µ–∫—Å—Ç: {content}\n"
                                f'üîó {message["url"]}'
                            )
                            if images:
                                forward_text += f"\nüì∑ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}"
                            logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–≥–æ–º {project_tag} –≤ –∫–∞–Ω–∞–ª {clean_channel}")
                            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                            data = {
                                'chat_id': normalize_chat_id(clean_channel),
                                'text': forward_text,
                                'parse_mode': 'HTML',
                            }
                            response = requests.post(url, data=data, timeout=3)
                            if response.status_code == 200:
                                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ç–µ–≥–æ–º —è–∫—â–æ —î
                                if images:
                                    for i, image_url in enumerate(images[:5]):
                                        try:
                                            image_caption = f"{project_tag} üì∑ Discord –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}/{len(images)}" if len(images) > 1 else f"{project_tag} üì∑ Discord –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
                                            download_and_send_image(image_url, clean_channel, image_caption)
                                            import time
                                            time.sleep(1)
                                        except Exception as e:
                                            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Discord –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
                                project_manager.add_sent_message(forward_key, clean_channel, user_id)
                                sent_targets.add(target_key)
                                logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª {clean_channel} –∑ —Ç–µ–≥–æ–º {project_tag}")
                            else:
                                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {clean_channel}: {response.status_code}")
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Discord –ø—Ä–æ–µ–∫—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
                    
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Discord —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")

def handle_twitter_notifications_sync(new_tweets: List[Dict]) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤ Twitter (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
    global bot_instance, global_sent_tweets
    
    if not bot_instance:
        return
        
    try:
        # –®–≤–∏–¥–∫–∞ –æ–±—Ä–æ–±–∫–∞ —Ç–≤—ñ—Ç—ñ–≤
        logger.info(f"üì® handle_twitter_notifications_sync: –æ—Ç—Ä–∏–º–∞–Ω–æ {len(new_tweets)} —Ç–≤—ñ—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
        for tweet in new_tweets:
            tweet_id = tweet.get('tweet_id', '')
            account = tweet.get('account', '')
            logger.info(f"üîç –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–≤—ñ—Ç {tweet_id} –≤—ñ–¥ {account}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø—Ä–æ–µ–∫—Ç–∏, —è–∫—ñ –≤—ñ–¥—Å—Ç–µ–∂—É—é—Ç—å —Ü–µ–π Twitter –∞–∫–∞—É–Ω—Ç
            tracked_data = get_users_tracking_twitter(account)
            
            # –í–ê–ñ–õ–ò–í–û: –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ —è–∫—ñ –≤—ñ–¥—Å—Ç–µ–∂—É—é—Ç—å —Ü–µ–π –∞–∫–∞—É–Ω—Ç - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–≤—ñ—Ç
            if not tracked_data:
                logger.warning(f"üö´ –¢–≤—ñ—Ç –≤—ñ–¥ {account} –ø—Ä–æ–ø—É—â–µ–Ω–æ - –∞–∫–∞—É–Ω—Ç –Ω–µ –¥–æ–¥–∞–Ω–æ –¥–æ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É")
                continue
            
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(tracked_data)} –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ {account}")
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–º –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º
            users_with_forwarding: List[Dict] = []
            for tracked_item in tracked_data:
                user_id = tracked_item['user_id']
                forward_channel = project_manager.get_forward_channel(user_id)
                logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: forward_channel = {forward_channel}")
                if forward_channel:
                    users_with_forwarding.append(tracked_item)
                    logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª {forward_channel}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è")
            
            if not users_with_forwarding:
                logger.warning(f"üö´ –¢–≤—ñ—Ç –≤—ñ–¥ {account} –ø—Ä–æ–ø—É—â–µ–Ω–æ - –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–º –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º")
                logger.warning(f"üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /forward_set_channel –∞–±–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞")
                continue
            
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(users_with_forwarding)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–º –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ {account}")

            # –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
            if account not in global_sent_tweets:
                global_sent_tweets[account] = set()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ–π —Ç–≤—ñ—Ç –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω–æ
            if tweet_id in global_sent_tweets[account]:
                logger.info(f"–¢–≤—ñ—Ç {tweet_id} –¥–ª—è {account} –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                continue
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (–¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤ –∫–æ–ª–∏ ID –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è)
            tweet_text = tweet.get('text', '').strip()
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≥–æ—Ç–æ–≤–∏–π content_key –∑ Twitter Monitor Adapter
            content_key = tweet.get('content_key')
            if not content_key and tweet_text:
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                import hashlib
                content_hash = hashlib.md5(f"{account}_{tweet_text}".encode('utf-8')).hexdigest()[:12]
                content_key = f"content_{content_hash}"
                
            if content_key and content_key in global_sent_tweets[account]:
                logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç —Ç–≤—ñ—Ç–∞ –¥–ª—è {account} –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                continue
            
            # –í–ê–ñ–õ–ò–í–û: –ù–ï –¥–æ–¥–∞—î–º–æ —Ç–≤—ñ—Ç –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –¢–£–¢ - —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏!
            
            # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –æ–±—Ä–æ–±–∫–æ—é —Ç–≤—ñ—Ç—ñ–≤ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limit
            import time
            time.sleep(10)  # –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limit
            
            # –ö—Ä–∞—Å–∏–≤–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            author = escape_html(tweet.get('author', 'Unknown'))
            text = escape_html(tweet.get('text', ''))
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ —Ç–µ–∫—Å—Ç —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(text) > 200:
                text = text[:200] + "..."
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            timestamp = tweet.get('timestamp', '')
            formatted_date = "–ù–µ –≤—ñ–¥–æ–º–æ"
            time_ago = ""
            
            if timestamp:
                try:
                    from datetime import datetime
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    formatted_date = dt.strftime("%d %B, %H:%M UTC")
                    time_ago = _get_time_ago(dt)
                except:
                    formatted_date = timestamp[:19] if len(timestamp) > 19 else timestamp
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ç–≤—ñ—Ç–∞
            images = tweet.get('images', [])
            
            # --- –î–æ–¥–∞—î–º–æ –ø—ñ–Ω–≥–∏ ---
            ping_users = project_manager.get_project_ping_users(user_id, project_id) if 'project_id' in locals() else []
            ping_mentions = " ".join([f'<a href="tg://user?id={uid}">@{uid}</a>' for uid in ping_users]) if ping_users else ""
            forward_text = (
                f"üê¶ <b>–ù–æ–≤–∏–π —Ç–≤—ñ—Ç –∑ Twitter</b>\n"
                f"‚Ä¢ –ü—Ä–æ—Ñ—ñ–ª—å: @{account}\n"
                f"‚Ä¢ –ê–≤—Ç–æ—Ä: {author}\n"
            )
            if ping_mentions:
                forward_text += f"‚Ä¢ –ü—ñ–Ω–≥: {ping_mentions}\n"
            forward_text += (
                f"‚Ä¢ –î–∞—Ç–∞: {formatted_date} ({time_ago})\n"
                f"‚Ä¢ –¢–µ–∫—Å—Ç: {text}\n"
                f'üîó {tweet.get("url", "")}'
            )
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫—â–æ —î
            if images:
                forward_text += f"\nüì∑ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}"
            
            # –ù–µ –¥—É–±–ª—é–≤–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –≤ –æ–¥–Ω—É –≥—ñ–ª–∫—É
            sent_targets: Set[str] = set()
            
            # –§–ª–∞–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∏ –±—É–≤ —Ç–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ö–æ—á–∞ –± –æ–¥–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            tweet_successfully_sent = False

            # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≥—Ä—É–ø–∞–º–∏ –ø–æ 3
            batch_size = 3
            for i in range(0, len(users_with_forwarding), batch_size):
                batch = users_with_forwarding[i:i + batch_size]
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ –≥—Ä—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                for tracked_item in batch:
                    try:
                        user_id = tracked_item['user_id']
                        project = tracked_item['project']
                        project_id = project.get('id')
                        project_name = project.get('name', 'Twitter Project')
                        project_tag = project.get('tag', f"#tw_project_{project_id}")
                        
                        # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞–Ω–∞–ª—É –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
                        forward_channel = project_manager.get_forward_channel(user_id)
                        if not forward_channel:
                            continue
                        
                        # –û—á–∏—â–∞—î–º–æ –∫–∞–Ω–∞–ª –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                        clean_channel = forward_channel.split('/')[0] if '/' in forward_channel else forward_channel
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è thread'–∏
                        forward_status = project_manager.get_forward_status(user_id)
                        use_threads = forward_status.get('use_threads', True)
                        
                        # –§–æ—Ä–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è —Ü—å–æ–≥–æ —Ç–≤—ñ—Ç–∞ —ñ –ø—Ä–æ–µ–∫—Ç—É
                        forward_key = f"twitter_{account}_{tweet_id}_{project_id}"
                        
                        if use_threads:
                            # –†–æ–±–æ—Ç–∞ –∑ thread'–∞–º–∏
                            thread_id = project_manager.get_project_thread(user_id, project_id)
                            logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ thread –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name}: thread_id = {thread_id}")
                            
                            if not thread_id:
                                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π thread
                                logger.info(f"üîß –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π thread –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name} –≤ –∫–∞–Ω–∞–ª—ñ {clean_channel}")
                                thread_id = create_project_thread_sync(BOT_TOKEN, clean_channel, project_name, project_tag, str(user_id))
                                
                                if thread_id:
                                    project_manager.set_project_thread(user_id, project_id, thread_id)
                                    logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ thread {thread_id} –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name}")
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ thread –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name} –≤ –∫–∞–Ω–∞–ª—ñ {clean_channel}")
                                    logger.info(f"üîÑ –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—è –Ω–∞ —Ä–µ–∂–∏–º –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑ —Ç–µ–≥–∞–º–∏ –∑–∞–º—ñ—Å—Ç—å threads")
                                    # –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—è –Ω–∞ —Ä–µ–∂–∏–º –∑ —Ç–µ–≥–∞–º–∏
                                    use_threads = False
                            else:
                                logger.info(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ—Å–Ω—É—é—á–∏–π thread {thread_id} –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name}")
                            
                            # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è thread'–∞
                            thread_key = f"{clean_channel}_{thread_id}"
                            if thread_key in sent_targets:
                                continue
                            
                            if project_manager.is_message_sent(forward_key, clean_channel, user_id):
                                continue
                            
                            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è thread'–∞ –∑ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è–º user_id
                            ping_users = project_manager.get_project_ping_users(user_id, project_id)
                            ping_mentions = " ".join([f'<a href="tg://user?id={uid}">@{uid}</a>' for uid in ping_users]) if ping_users else ""
                            user_mention = f'<a href="tg://user?id={user_id}">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</a>'
                            thread_forward_text = (
                                f"üê¶ <b>–ù–æ–≤–∏–π —Ç–≤—ñ—Ç –∑ Twitter</b> üë§ {user_mention}\n"
                                f"‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {project_name}\n"
                                f"‚Ä¢ –ü—Ä–æ—Ñ—ñ–ª—å: @{account}\n"
                                f"‚Ä¢ –ê–≤—Ç–æ—Ä: {author}\n"
                            )
                            if ping_mentions:
                                thread_forward_text += f"‚Ä¢ –ü—ñ–Ω–≥: {ping_mentions}\n"
                            thread_forward_text += (
                                f"‚Ä¢ –î–∞—Ç–∞: {formatted_date} ({time_ago})\n"
                                f"‚Ä¢ –¢–µ–∫—Å—Ç: {text}\n"
                                f'üîó {tweet.get("url", "")}'
                            )
                            if images:
                                thread_forward_text += f"\nüì∑ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}"
                            
                            logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Twitter —Ç–≤—ñ—Ç –≤ thread {thread_id} –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É {project_name} –≤ –∫–∞–Ω–∞–ª {clean_channel}")
                            
                            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏ –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
                            if images:
                                logger.info(f"üì∑ –ó–Ω–∞–π–¥–µ–Ω–æ {len(images)} –∑–æ–±—Ä–∞–∂–µ–Ω—å, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ")
                                success = send_message_with_photos_to_thread_sync(BOT_TOKEN, clean_channel, thread_id, thread_forward_text, images, project_tag)
                            else:
                                # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω—å, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                                logger.info(f"üìù –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ thread {thread_id}")
                                success = send_message_to_thread_sync(BOT_TOKEN, clean_channel, thread_id, thread_forward_text, project_tag)
                            
                            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ thread {thread_id}: success = {success}")
                            
                            if success:
                                project_manager.add_sent_message(forward_key, clean_channel, user_id)
                                sent_targets.add(thread_key)
                                tweet_successfully_sent = True
                                logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ Twitter —Ç–≤—ñ—Ç in thread {thread_id} –ø—Ä–æ–µ–∫—Ç—É {project_name}")
                            else:
                                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Twitter —Ç–≤—ñ—Ç–∞ –≤ thread {thread_id}")
                        else:
                            # –°—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞ - –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª –∑ —Ç–µ–≥–æ–º
                            target_key = f"{clean_channel}_{project_tag}"
                            if target_key in sent_targets:
                                continue
                            
                            if project_manager.is_message_sent(forward_key, clean_channel, user_id):
                                continue
                            
                            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–≥–æ–º —ñ –ø—ñ–Ω–≥–∞–º–∏
                            ping_users = project_manager.get_project_ping_users(user_id, project_id)
                            ping_mentions = " ".join([f'<a href="tg://user?id={uid}">@{uid}</a>' for uid in ping_users]) if ping_users else ""
                            tagged_forward_text = (
                                f"{project_tag}\n\n"
                                f"üê¶ **–ù–æ–≤–∏–π —Ç–≤—ñ—Ç –∑ Twitter**\n"
                                f"‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {project_name}\n"
                                f"‚Ä¢ –ü—Ä–æ—Ñ—ñ–ª—å: @{account}\n"
                                f"‚Ä¢ –ê–≤—Ç–æ—Ä: {author}\n"
                            )
                            if ping_mentions:
                                tagged_forward_text += f"‚Ä¢ –ü—ñ–Ω–≥: {ping_mentions}\n"
                            tagged_forward_text += (
                                f"‚Ä¢ –î–∞—Ç–∞: {formatted_date} ({time_ago})\n"
                                f"‚Ä¢ –¢–µ–∫—Å—Ç: {text}\n"
                                f"üîó {tweet.get('url', '')}"
                            )
                            if images:
                                tagged_forward_text += f"\nüì∑ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}"
                            
                            logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Twitter —Ç–≤—ñ—Ç –∑ —Ç–µ–≥–æ–º {project_tag} –≤ –∫–∞–Ω–∞–ª {clean_channel}")
                            
                            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                            data = {
                                'chat_id': normalize_chat_id(clean_channel),
                                'text': tagged_forward_text,
                            }
                            response = requests.post(url, data=data, timeout=3)
                            
                            if response.status_code == 200:
                                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ç–µ–≥–æ–º —è–∫—â–æ —î
                                if images:
                                    logger.info(f"üì∑ –ó–Ω–∞–π–¥–µ–Ω–æ {len(images)} –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {clean_channel}")
                                    for i, image_url in enumerate(images[:5]):
                                        try:
                                            image_caption = f"{project_tag} üì∑ Twitter –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}/{len(images)}" if len(images) > 1 else f"{project_tag} üì∑ Twitter –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
                                            success = download_and_send_image(image_url, clean_channel, image_caption)
                                            if success:
                                                logger.info(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑ —Ç–µ–≥–æ–º {project_tag}")
                                            else:
                                                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}")
                                            import time
                                            time.sleep(0.5)  # –ó–º–µ–Ω—à–µ–Ω–æ –∑–∞—Ç—Ä–∏–º–∫—É
                                        except Exception as e:
                                            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Twitter –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
                                
                                project_manager.add_sent_message(forward_key, clean_channel, user_id)
                                sent_targets.add(target_key)
                                tweet_successfully_sent = True
                                logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ Twitter —Ç–≤—ñ—Ç –≤ –∫–∞–Ω–∞–ª {clean_channel} –∑ —Ç–µ–≥–æ–º {project_tag}")
                            else:
                                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Twitter —Ç–≤—ñ—Ç–∞ –≤ –∫–∞–Ω–∞–ª {clean_channel}: {response.status_code}")
                    
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Twitter –ø—Ä–æ–µ–∫—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
                
                # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                if i + batch_size < len(users_with_forwarding):
                    import time
                    time.sleep(0.2)  # 0.2 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏
            
            # –¢–Ü–õ–¨–ö–ò –ü–Ü–°–õ–Ø –£–°–ü–Ü–®–ù–û–á –í–Ü–î–ü–†–ê–í–ö–ò —Ö–æ—á–∞ –± –æ–¥–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–æ–¥–∞—î–º–æ —Ç–≤—ñ—Ç –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
            if tweet_successfully_sent:
                global_sent_tweets[account].add(tweet_id)
                if content_key:
                    global_sent_tweets[account].add(content_key)
                logger.info(f"üìù –¢–≤—ñ—Ç {tweet_id} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ {account}")
                
                # –¢–∞–∫–æ–∂ –¥–æ–¥–∞—î–º–æ –¥–æ Twitter Monitor Adapter —è–∫—â–æ –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
                global twitter_monitor_adapter, twitter_monitor
                if twitter_monitor_adapter:
                    try:
                        twitter_monitor_adapter.mark_tweet_as_sent(account, tweet_id, content_key)
                        logger.debug(f"–¢–≤—ñ—Ç {tweet_id} –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ Twitter Monitor Adapter")
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–º—ñ—Ç–∫–∏ —Ç–≤—ñ—Ç–∞ –≤ Twitter Monitor Adapter: {e}")
                
                # –¢–∞–∫–æ–∂ –¥–æ–¥–∞—î–º–æ –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ Twitter Monitor —è–∫—â–æ –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è  
                if twitter_monitor:
                    try:
                        twitter_monitor.mark_tweet_as_sent(account, tweet_id, content_key)
                        twitter_monitor.save_seen_tweets()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
                        logger.debug(f"–¢–≤—ñ—Ç {tweet_id} –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ Twitter Monitor")
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–º—ñ—Ç–∫–∏ —Ç–≤—ñ—Ç–∞ –≤ Twitter Monitor: {e}")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ Twitter Monitor Adapter
                if twitter_monitor_adapter:
                    try:
                        twitter_monitor_adapter.save_seen_tweets()
                        logger.debug(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –∑–º—ñ–Ω–∏ –≤ Twitter Monitor Adapter")
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Twitter Monitor Adapter: {e}")
                
                # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –æ—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ —Ç–≤—ñ—Ç–∏
                if len(global_sent_tweets[account]) % 50 == 0:  # –ö–æ–∂–Ω—ñ 50 —Ç–≤—ñ—Ç—ñ–≤
                    cleanup_old_tweets()
            else:
                logger.warning(f"‚ö†Ô∏è –¢–≤—ñ—Ç {tweet_id} –ù–ï –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö - –∂–æ–¥–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–µ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ—é")
                    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Twitter —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")

async def start_discord_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Discord"""
    global discord_monitor
    
    if not DISCORD_AUTHORIZATION:
        logger.warning("Discord authorization —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")
        return
        
    if not discord_monitor:
        logger.warning("Discord –º–æ–Ω—ñ—Ç–æ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")
        return
        
    try:
        async with discord_monitor:
            # –î–æ–¥–∞—î–º–æ –≤—Å—ñ Discord –∫–∞–Ω–∞–ª–∏ –∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            for user_id, projects in project_manager.data['projects'].items():
                for project in projects:
                    if project['platform'] == 'discord':
                        discord_monitor.add_channel(project['url'])
                        
            channels_list = list(getattr(discord_monitor, 'channels', []))
            logger.info(f"üí¨ –ó–∞–ø—É—Å–∫ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è –∫–∞–Ω–∞–ª—ñ–≤: {channels_list}")
            logger.info("üîÑ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ...")
            await discord_monitor.start_monitoring(handle_discord_notifications_sync, 10)
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Discord: {e}")

async def start_twitter_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Twitter –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    global twitter_monitor
    
    if not twitter_monitor or not TWITTER_AUTH_TOKEN:
        logger.warning("Twitter auth_token –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        return
        
    try:
        async with twitter_monitor:
            # –î–æ–¥–∞—î–º–æ –≤—Å—ñ Twitter –∞–∫–∞—É–Ω—Ç–∏ –∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            for user_id, projects in project_manager.data['projects'].items():
                for project in projects:
                    if project['platform'] == 'twitter':
                        username = extract_twitter_username(project['url'])
                        if username:
                            twitter_monitor.add_account(username)
                            
            accounts_list = list(twitter_monitor.monitoring_accounts)
            logger.info(f"üê¶ –ó–∞–ø—É—Å–∫ Twitter API –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è –∞–∫–∞—É–Ω—Ç—ñ–≤: {accounts_list}")
            logger.info("üîÑ Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ...")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑ HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º
            while True:
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π HTML –ø–∞—Ä—Å–∏–Ω–≥
                    new_tweets = await twitter_monitor.check_new_tweets()
                    
                    if new_tweets:
                        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ç–≤—ñ—Ç –û–î–†–ê–ó–£ –ø—ñ—Å–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
                        for tweet in new_tweets:
                            try:
                                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
                                formatted_tweet = {
                                    'tweet_id': tweet.get('id', ''),
                                    'account': tweet.get('user', {}).get('screen_name', ''),
                                    'author': tweet.get('user', {}).get('name', ''),
                                    'text': tweet.get('text', ''),
                                    'url': tweet.get('url', ''),
                                    'timestamp': tweet.get('created_at', '')
                                }
                                
                                # –ú–ò–¢–¢–Ñ–í–û –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ç–≤—ñ—Ç (–º–∞—Å–∏–≤ –∑ 1 –µ–ª–µ–º–µ–Ω—Ç–æ–º)
                                handle_twitter_notifications_sync([formatted_tweet])
                                
                                # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ç–≤—ñ—Ç–∞–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limit
                                await asyncio.sleep(0.5)
                                
                            except Exception as e:
                                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç–≤—ñ—Ç–∞ {tweet.get('id', 'unknown')}: {e}")
                        
                        logger.info(f"Twitter API: –º–∏—Ç—Ç—î–≤–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ {len(new_tweets)} –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤")
                    
                    # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é (—à–≤–∏–¥—à–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥)
                    await asyncio.sleep(15)
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter: {e}")
                    await asyncio.sleep(30)  # –ö–æ—Ä–æ—Ç—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter: {e}")

async def start_twitter_monitor_adapter():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    global twitter_monitor_adapter
    
    if not twitter_monitor_adapter:
        logger.warning("Twitter Monitor Adapter –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        return
    
    try:
        twitter_monitor_adapter.monitoring_active = True
        
        if twitter_monitor_adapter.monitoring_accounts:
            accounts_list = list(twitter_monitor_adapter.monitoring_accounts)
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è –∞–∫–∞—É–Ω—Ç—ñ–≤: {accounts_list}")
            logger.info("üîÑ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ...")
        else:
            logger.info("üöÄ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ (–æ—á—ñ–∫—É—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤)")
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        while twitter_monitor_adapter.monitoring_active:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏ —á–µ—Ä–µ–∑ Twitter Monitor Adapter
                new_tweets = await twitter_monitor_adapter.check_new_tweets()
                
                if new_tweets:
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ç–≤—ñ—Ç –û–î–†–ê–ó–£ –ø—ñ—Å–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
                    for tweet in new_tweets:
                        try:
                            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
                            formatted_tweet = {
                                'tweet_id': tweet.get('id', ''),
                                'account': tweet.get('user', {}).get('screen_name', ''),
                                'author': tweet.get('user', {}).get('name', ''),
                                'text': tweet.get('text', ''),
                                'url': tweet.get('url', ''),
                                'timestamp': tweet.get('created_at', ''),
                                'images': tweet.get('images', []),  # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è!
                                'content_key': tweet.get('content_key')  # –î–æ–¥–∞—î–º–æ content_key —è–∫—â–æ —î
                            }
                            
                            # –ú–ò–¢–¢–Ñ–í–û –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ç–≤—ñ—Ç (–º–∞—Å–∏–≤ –∑ 1 –µ–ª–µ–º–µ–Ω—Ç–æ–º)
                            handle_twitter_notifications_sync([formatted_tweet])
                            
                            # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ç–≤—ñ—Ç–∞–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limit
                            await asyncio.sleep(0.5)
                            
                        except Exception as e:
                            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç–≤—ñ—Ç–∞ {tweet.get('id', 'unknown')}: {e}")
                    
                    logger.info(f"Twitter Monitor Adapter: –º–∏—Ç—Ç—î–≤–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ {len(new_tweets)} –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤")
                
                # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é (—à–≤–∏–¥—à–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É)
                await asyncio.sleep(10)
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                await asyncio.sleep(30)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ —Å–ø—Ä–æ–±–æ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter Monitor Adapter: {e}")
    finally:
        twitter_monitor_adapter.monitoring_active = False


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")

async def check_sessions(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω—ñ —Å–µ—Å—ñ—ó"""
    try:
        security_manager.check_expired_sessions(context.bot)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ–π: {e}")

async def cleanup_old_messages(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        project_manager.cleanup_old_messages(hours=24)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")

async def cleanup_access_sessions(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω—ñ —Å–µ—Å—ñ—ó –¥–æ—Å—Ç—É–ø—É"""
    try:
        access_manager.cleanup_expired_sessions()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π –¥–æ—Å—Ç—É–ø—É: {e}")

def _get_time_ago(dt: datetime) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å —Ç–æ–º—É"""
    try:
        from datetime import datetime, timezone
        now = datetime.now(timezone.utc)
        
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ dt –º–∞—î timezone
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)
        
        diff = now - dt
        
        total_seconds = int(diff.total_seconds())
        
        if total_seconds < 0:
            return "—â–æ–π–Ω–æ"
        elif total_seconds < 60:
            return f"{total_seconds} —Å–µ–∫—É–Ω–¥ —Ç–æ–º—É"
        elif total_seconds < 3600:
            minutes = total_seconds // 60
            return f"{minutes} —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É"
        elif total_seconds < 86400:
            hours = total_seconds // 3600
            return f"{hours} –≥–æ–¥–∏–Ω —Ç–æ–º—É"
        else:
            days = total_seconds // 86400
            return f"{days} –¥–Ω—ñ–≤ —Ç–æ–º—É"
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∞—Å—É: {e}")
        return ""



# –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤
@require_auth
async def accounts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–µ–∫—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    projects = project_manager.get_user_projects(user_id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É –∂ —Ñ—É–Ω–∫—Ü—ñ—é)
    twitter_adapter_accounts = project_manager.get_selenium_accounts()
    
    # –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
    twitter_projects = [p for p in projects if p['platform'] == 'twitter']
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫
    text = "üìã **–í–∞—à—ñ –∞–∫–∞—É–Ω—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:**\n\n"
    
    # Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç–∏
    if twitter_adapter_accounts:
        text += "üöÄ **Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç–∏:**\n"
        for i, username in enumerate(twitter_adapter_accounts, 1):
            account_info = project_manager.get_selenium_account_info(username)
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if account_info and account_info.get('is_active', True) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
            text += f"{i}. @{username} - {status}\n"
        text += "\n"
    
    # –ó–≤–∏—á–∞–π–Ω—ñ Twitter –ø—Ä–æ–µ–∫—Ç–∏
    if twitter_projects:
        text += "üê¶ **–ó–≤–∏—á–∞–π–Ω—ñ Twitter/X –∞–∫–∞—É–Ω—Ç–∏:**\n"
        for i, project in enumerate(twitter_projects, 1):
            twitter_username: Optional[str] = extract_twitter_username(project['url'])
            if twitter_username:
                text += f"{i}. @{twitter_username} ({project['name']})\n"
        text += "\n"
    
    # Discord –∫–∞–Ω–∞–ª–∏
    if discord_projects:
        text += "üí¨ **Discord –∫–∞–Ω–∞–ª–∏:**\n"
        for i, project in enumerate(discord_projects, 1):
            channel_id = extract_discord_channel_id(project['url'])
            text += f"{i}. –ö–∞–Ω–∞–ª {channel_id} ({project['name']})\n"
        text += "\n"
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤
    if not twitter_adapter_accounts and not twitter_projects and not discord_projects:
        text += "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.\n\n"
        text += "–î–æ–¥–∞–π—Ç–µ –∞–∫–∞—É–Ω—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:\n"
        text += "‚Ä¢ /twitter_add username - –¥–æ–¥–∞—Ç–∏ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç\n"
        text += "‚Ä¢ –ú–µ–Ω—é '–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç' - –¥–æ–¥–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –ø—Ä–æ–µ–∫—Ç"
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    text += "\nüîß **–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:**\n"
    text += "‚Ä¢ /twitter_add username - –¥–æ–¥–∞—Ç–∏ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç\n"
    text += "‚Ä¢ /twitter_remove username - –≤–∏–¥–∞–ª–∏—Ç–∏ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç\n"
    text += "‚Ä¢ /remove_twitter username - –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π Twitter –∞–∫–∞—É–Ω—Ç\n"
    text += "‚Ä¢ /remove_discord channel_id - –≤–∏–¥–∞–ª–∏—Ç–∏ Discord –∫–∞–Ω–∞–ª\n"
    text += "‚Ä¢ /accounts - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫"
    
    await update.message.reply_text(text, )

@require_auth
async def remove_twitter_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∏–¥–∞–ª–∏—Ç–∏ Twitter –∞–∫–∞—É–Ω—Ç –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å username Twitter –∞–∫–∞—É–Ω—Ç–∞!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /remove_twitter pilk_xz")
        return
    
    username = context.args[0].replace('@', '').strip()
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    projects = project_manager.get_user_projects(user_id)
    twitter_projects = [p for p in projects if p['platform'] == 'twitter']
    
    project_to_remove = None
    for project in twitter_projects:
        if extract_twitter_username(project['url']) == username:
            project_to_remove = project
            break
    
    if not project_to_remove:
        await update.message.reply_text(f"‚ùå Twitter –∞–∫–∞—É–Ω—Ç @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.")
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–µ–∫—Ç
    if project_manager.remove_project(user_id, project_to_remove['id']):
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        sync_monitors_with_projects()
        
        await update.message.reply_text(f"‚úÖ Twitter –∞–∫–∞—É–Ω—Ç @{username} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        
        # –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤
        global twitter_monitor_adapter
        if twitter_monitor_adapter and username in twitter_monitor_adapter.monitoring_accounts:
            twitter_monitor_adapter.monitoring_accounts.discard(username)
            if username in twitter_monitor_adapter.seen_tweets:
                del twitter_monitor_adapter.seen_tweets[username]
            await update.message.reply_text(f"‚úÖ –ê–∫–∞—É–Ω—Ç @{username} —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        global twitter_monitor
        try:
            if twitter_monitor:
                twitter_monitor.remove_account(username)
        except Exception:
            pass
        # –ü—ñ—Å–ª—è –∑–º—ñ–Ω ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω —É—Å—ñ—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤
        sync_monitors_with_projects()
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Twitter –∞–∫–∞—É–Ω—Ç–∞ @{username}.")


# Twitter Monitor Adapter –∫–æ–º–∞–Ω–¥–∏ (–æ—Å–Ω–æ–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥)

@require_auth
async def twitter_add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç –¥–ª—è Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    if not update.effective_user or not update.message:
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å username Twitter –∞–∫–∞—É–Ω—Ç–∞!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /twitter_add pilk_xz")
        return
    
    username = context.args[0].replace('@', '').strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π
    if username.lower() in ['twitter', 'x', 'elonmusk']:
        await update.message.reply_text("‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ Twitter –∞–∫–∞—É–Ω—Ç–∞!")
        return
    
    global twitter_monitor_adapter
    
    if not twitter_monitor_adapter:
        twitter_monitor_adapter = TwitterMonitorAdapter()
    
    # –î–æ–¥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É –∂ —Ñ—É–Ω–∫—Ü—ñ—é —â–æ —ñ –¥–ª—è Selenium)
    project_manager.add_selenium_account(username)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    sync_monitors_with_projects()
    
    # –î–æ–¥–∞—î–º–æ –∞–∫–∞—É–Ω—Ç –≤ –ø–æ—Ç–æ—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä
    if twitter_monitor_adapter.add_account(username):
        await update.message.reply_text(
            f"‚úÖ **–î–æ–¥–∞–Ω–æ Twitter –∞–∫–∞—É–Ω—Ç –¥–ª—è Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:**\n\n"
            f"‚Ä¢ Username: @{username}\n"
            f"‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö\n"
            f"‚Ä¢ –î–æ–¥–∞–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n\n"
            f"üöÄ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥ —á–µ—Ä–µ–∑ Twitter Monitor API!"
        )
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ @{username}")

@require_auth
async def twitter_test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    if not update.effective_user or not update.message:
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å username Twitter –∞–∫–∞—É–Ω—Ç–∞!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /twitter_test pilk_xz")
        return
    
    username = context.args[0].replace('@', '').strip()
    
    global twitter_monitor_adapter
    
    if not twitter_monitor_adapter:
        twitter_monitor_adapter = TwitterMonitorAdapter()
    
    await update.message.reply_text(f"üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è @{username}...")
    
    try:
        tweets = await twitter_monitor_adapter.get_user_tweets(username, limit=3)
        
        if tweets:
            result_text = f"‚úÖ **Twitter Monitor Adapter —Ç–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π!**\n\n–ó–Ω–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤—ñ—Ç—ñ–≤:\n\n"
            
            for i, tweet in enumerate(tweets, 1):
                text_preview = tweet['text'][:100] + "..." if len(tweet['text']) > 100 else tweet['text']
                result_text += f"{i}. {text_preview}\n"
                result_text += f"   üîó [–ü–µ—Ä–µ–π—Ç–∏]({tweet['url']})\n"
                if tweet.get('images'):
                    result_text += f"   üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(tweet['images'])}\n"
                result_text += "\n"
                
            await update.message.reply_text(result_text)
        else:
            await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–≤—ñ—Ç–∏ –¥–ª—è @{username}")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {str(e)}")

@require_auth
async def twitter_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    if not update.effective_user or not update.message:
        return
    
    global twitter_monitor_adapter
    
    if not twitter_monitor_adapter:
        twitter_monitor_adapter = TwitterMonitorAdapter()
    
    if not twitter_monitor_adapter.monitoring_accounts:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É! –î–æ–¥–∞–π—Ç–µ Twitter –∞–∫–∞—É–Ω—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.")
        return
    
    twitter_monitor_adapter.monitoring_active = True
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    import threading
    monitor_thread = threading.Thread(target=lambda: asyncio.run(start_twitter_monitor_adapter()))
    monitor_thread.daemon = True
    monitor_thread.start()
    
    accounts_list = list(twitter_monitor_adapter.monitoring_accounts)
    await update.message.reply_text(
        f"üöÄ **Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ!**\n\n"
        f"‚Ä¢ –ê–∫–∞—É–Ω—Ç—ñ–≤: {len(accounts_list)}\n"
        f"‚Ä¢ –°–ø–∏—Å–æ–∫: @{', @'.join(accounts_list)}\n\n"
        f"üîÑ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ..."
    )

@require_auth
async def twitter_stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó—É–ø–∏–Ω–∏—Ç–∏ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    if not update.effective_user or not update.message:
        return
    
    global twitter_monitor_adapter
    
    if twitter_monitor_adapter:
        twitter_monitor_adapter.monitoring_active = False
        await twitter_monitor_adapter.__aexit__(None, None, None)
        twitter_monitor_adapter = None
    
    await update.message.reply_text("‚èπÔ∏è **Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ!**")

@require_auth
async def twitter_remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∏–¥–∞–ª–∏—Ç–∏ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    if not update.effective_user or not update.message:
        return
    
    global twitter_monitor_adapter
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å username Twitter –∞–∫–∞—É–Ω—Ç–∞!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /twitter_remove pilk_xz")
        return
    
    username = context.args[0].replace('@', '').strip()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if project_manager.remove_selenium_account(username):
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        sync_monitors_with_projects()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∞
        if twitter_monitor_adapter and username in twitter_monitor_adapter.monitoring_accounts:
            twitter_monitor_adapter.monitoring_accounts.discard(username)
            if username in twitter_monitor_adapter.seen_tweets:
                del twitter_monitor_adapter.seen_tweets[username]
        
        await update.message.reply_text(
            f"‚úÖ **–í–∏–¥–∞–ª–µ–Ω–æ Twitter Monitor Adapter –∞–∫–∞—É–Ω—Ç:**\n\n"
            f"‚Ä¢ Username: @{username}\n"
            f"‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n"
            f"‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∞",
        )
    else:
        await update.message.reply_text(f"‚ùå –ê–∫–∞—É–Ω—Ç @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Twitter Monitor Adapter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")

@require_auth
async def test_tweet_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–≤—ñ—Ç—ñ–≤"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–≤—ñ—Ç
    test_tweet = {
        'tweet_id': 'test_' + str(int(time.time())),
        'account': 'irys_xyz',
        'author': 'Irys',
        'text': '–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–≤—ñ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è',
        'url': 'https://x.com/irys_xyz/status/test',
        'timestamp': datetime.now().isoformat(),
        'images': []
    }
    
    try:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–≤—ñ—Ç
        handle_twitter_notifications_sync([test_tweet])
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π —Ç–≤—ñ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–≤—ñ—Ç–∞: {e}")

@require_auth
async def test_discord_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    test_message = {
        'message_id': 'test_' + str(int(time.time())),
        'channel_id': '1413243132467871839',  # –ö–∞–Ω–∞–ª –∑ –ø—Ä–æ–µ–∫—Ç—É
        'author': 'Test User',
        'content': '–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–∏ Discord –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è',
        'url': 'https://discord.com/channels/1408570777275469866/1413243132467871839/test',
        'timestamp': datetime.now().isoformat(),
        'images': []
    }
    
    try:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        handle_discord_notifications_sync([test_message])
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–µ Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

@require_auth  
async def reset_discord_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not access_manager.is_admin(user_id):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n"
            "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –æ—á–∏—â–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é Discord.",
        )
        return
    
    try:
        # –û—á–∏—â–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        global discord_monitor
        if discord_monitor:
            discord_monitor.last_message_ids = {}
            logger.info("–û—á–∏—â–µ–Ω–æ —ñ—Å—Ç–æ—Ä—ñ—é Discord –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        
        await update.message.reply_text(
            "‚úÖ **Discord —ñ—Å—Ç–æ—Ä—ñ—è –æ—á–∏—â–µ–Ω–∞**\n\n"
            "–Ü—Å—Ç–æ—Ä—ñ—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å Discord –æ—á–∏—â–µ–Ω–∞. "
            "–ë–æ—Ç –º–æ–∂–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Discord –∫–∞–Ω–∞–ª—ñ–≤!",
        )
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è Discord —ñ—Å—Ç–æ—Ä—ñ—ó**\n\n{str(e)}",
        )

@require_auth
async def remove_discord_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∏–¥–∞–ª–∏—Ç–∏ Discord –∫–∞–Ω–∞–ª –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å ID Discord –∫–∞–Ω–∞–ª—É!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /remove_discord 1358806016648544326")
        return
    
    channel_id = context.args[0].strip()
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    projects = project_manager.get_user_projects(user_id)
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    
    project_to_remove = None
    for project in discord_projects:
        if extract_discord_channel_id(project['url']) == channel_id:
            project_to_remove = project
            break
    
    if not project_to_remove:
        await update.message.reply_text(f"‚ùå Discord –∫–∞–Ω–∞–ª {channel_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.")
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–µ–∫—Ç
    if project_manager.remove_project(user_id, project_to_remove['id']):
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        sync_monitors_with_projects()
        
        await update.message.reply_text(f"‚úÖ Discord –∫–∞–Ω–∞–ª {channel_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        
        # –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ –∑ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∞ —è–∫—â–æ –≤—ñ–Ω –∞–∫—Ç–∏–≤–Ω–∏–π
        global discord_monitor
        if discord_monitor and channel_id in discord_monitor.monitoring_channels:
            discord_monitor.monitoring_channels.discard(channel_id)
            if channel_id in discord_monitor.last_message_ids:
                del discord_monitor.last_message_ids[channel_id]
            await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        # –ü—ñ—Å–ª—è –∑–º—ñ–Ω ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω
        sync_monitors_with_projects()
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É {channel_id}.")


def extract_discord_channel_id(url: str) -> str:
    """–í–∏—Ç—è–≥—Ç–∏ channel_id –∑ Discord URL"""
    try:
        if not url:
            return ""
        
        import re
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ channel_id –≤ URL
        match = re.search(r'discord\.com/channels/\d+/(\d+)', url)
        if match:
            return match.group(1)
        
        # –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ ID (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏)
        if url.isdigit():
            return url
            
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ Discord channel_id –∑: {url}")
        return ""
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Discord channel_id –∑ '{url}': {e}")
        return ""

async def admin_create_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not access_manager.is_admin(user_id):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n"
            "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
        )
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /admin_create_user <telegram_id> <username> [password]\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /admin_create_user 123456789 JohnDoe mypassword",
        )
        return
    
    try:
        telegram_id = int(context.args[0])
        username = context.args[1]
        password = context.args[2] if len(context.args) > 2 else None
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id_created = access_manager.add_user(telegram_id, username or "Unknown", password or "")
        
        if user_id_created:
            await update.message.reply_text(
                f"‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!**\n\n"
                f"üë§ **Username:** {username}\n"
                f"üÜî **Telegram ID:** {telegram_id}\n"
                f"üîê **–ü–∞—Ä–æ–ª—å:** {password or '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'}\n"
                f"üëë **–†–æ–ª—å:** –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á\n\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ—é /login",
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–º–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î).",
            )
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
            "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /admin_create_user 123456789 JohnDoe",
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}",
        )

async def admin_create_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not access_manager.is_admin(user_id):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n"
            "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —ñ–Ω—à–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.",
        )
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /admin_create_admin <telegram_id> <username> [password]\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /admin_create_admin 123456789 AdminJohn adminpass123",
        )
        return
    
    try:
        telegram_id = int(context.args[0])
        username = context.args[1]
        password = context.args[2] if len(context.args) > 2 else None
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id_created = access_manager.create_admin_user(telegram_id, username or "Unknown", password or "")
        
        if user_id_created:
            await update.message.reply_text(
                f"‚úÖ **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!**\n\n"
                f"üë§ **Username:** {username}\n"
                f"üÜî **Telegram ID:** {telegram_id}\n"
                f"üîê **–ü–∞—Ä–æ–ª—å:** {password or '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'}\n"
                f"üëë **–†–æ–ª—å:** –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
                f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ—é /login",
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î).",
            )
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
            "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /admin_create_admin 123456789 AdminJohn",
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}",
        )

async def admin_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not access_manager.is_admin(user_id):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n"
            "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
        )
        return
    
    try:
        all_users = access_manager.get_all_users()
        
        if not all_users:
            await update.message.reply_text(
                "üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
                "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            )
            return
        
        users_text = "üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
        
        for i, user in enumerate(all_users[:20], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 20
            role_emoji = "üëë" if user.get('role', 'user') == 'admin' else "üë§"
            status_emoji = "‚úÖ" if user.get('is_active', True) else "‚ùå"
            
            users_text += (
                f"{i}. {role_emoji} **{user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}**\n"
                f"   üÜî ID: `{user.get('telegram_id')}`\n"
                f"   üìä –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
                f"   üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {user.get('created_at', '')[:10]}\n\n"
            )
        
        if len(all_users) > 20:
            users_text += f"... —Ç–∞ —â–µ {len(all_users) - 20} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n"
        
        users_text += f"**–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:** {len(all_users)}"
        
        await update.message.reply_text(users_text, )
        
    except Exception as e:
        if update.message:
            await update.message.reply_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n{str(e)}",
            )

async def reset_seen_tweets_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö seen_tweets (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not access_manager.is_admin(user_id):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n"
            "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –æ—á–∏—â–∞—Ç–∏ seen_tweets.",
        )
        return
    
    try:
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ—á–∏—â–µ–Ω–Ω—è seen_tweets
        success = reset_seen_tweets()
        
        if success:
            await update.message.reply_text(
                "‚úÖ **Seen_tweets –æ—á–∏—â–µ–Ω–æ**\n\n"
                "–í—Å—ñ —Ñ–∞–π–ª–∏ –∑ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–º–∏ —Ç–≤—ñ—Ç–∞–º–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.\n\n"
                "‚ö†Ô∏è **–£–í–ê–ì–ê:** –ë–æ—Ç –º–æ–∂–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ç–≤—ñ—Ç–∏! "
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É –æ–±–µ—Ä–µ–∂–Ω–æ.",
            )
        else:
            await update.message.reply_text(
                "‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è**\n\n"
                "–ù–µ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
            )
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è seen_tweets**\n\n{str(e)}",
        )

def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    global bot_instance
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∑ BOT_TOKEN")
        return
    
    if not DISCORD_AUTHORIZATION:
        logger.warning("AUTHORIZATION —Ç–æ–∫–µ–Ω –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(BOT_TOKEN).build()
    bot_instance = application.bot
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    
    # –ö–æ–º–∞–Ω–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    application.add_handler(CommandHandler("login", login_command))
    application.add_handler(CommandHandler("logout", logout_command))
    application.add_handler(CommandHandler("register", register_command))
    
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Twitter Monitor Adapter –∫–æ–º–∞–Ω–¥–∏ (–æ—Å–Ω–æ–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥) - —Ä–µ—î—Å—Ç—Ä—É—é—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ
    
    # –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤
    application.add_handler(CommandHandler("accounts", accounts_command))
    application.add_handler(CommandHandler("remove_twitter", remove_twitter_command))
    application.add_handler(CommandHandler("remove_discord", remove_discord_command))
    
    # –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è)
    application.add_handler(CommandHandler("forward_on", forward_enable_command))
    application.add_handler(CommandHandler("forward_off", forward_disable_command))
    application.add_handler(CommandHandler("forward_status", forward_status_command))
    application.add_handler(CommandHandler("forward_set_channel", forward_set_channel_command))
    application.add_handler(CommandHandler("forward_test", forward_test_command))
    application.add_handler(CommandHandler("thread_test", thread_test_command))
    application.add_handler(CommandHandler("setup", setup_quick_command))
    
    # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("admin_create_user", admin_create_user_command))
    application.add_handler(CommandHandler("admin_create_admin", admin_create_admin_command))
    application.add_handler(CommandHandler("admin_users", admin_users_command))
    application.add_handler(CommandHandler("reset_seen_tweets", reset_seen_tweets_command))
    
    # Twitter Monitor Adapter –∫–æ–º–∞–Ω–¥–∏ (–æ—Å–Ω–æ–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥)
    application.add_handler(CommandHandler("twitter_add", twitter_add_command))
    application.add_handler(CommandHandler("twitter_test", twitter_test_command))
    application.add_handler(CommandHandler("twitter_start", twitter_start_command))
    application.add_handler(CommandHandler("twitter_stop", twitter_stop_command))
    application.add_handler(CommandHandler("twitter_remove", twitter_remove_command))
    application.add_handler(CommandHandler("test_tweet", test_tweet_command))
    application.add_handler(CommandHandler("test_discord", test_discord_command))
    application.add_handler(CommandHandler("reset_discord_history", reset_discord_history_command))
    
    application.add_error_handler(error_handler)
    
    # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å–µ—Å—ñ–π (–∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É)
    job_queue = application.job_queue
    if job_queue:
        job_queue.run_repeating(check_sessions, interval=300, first=300)  # –ö–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
        
        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏)
        job_queue.run_repeating(cleanup_old_messages, interval=7200, first=7200)
        
        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π –¥–æ—Å—Ç—É–ø—É (–∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω)
        job_queue.run_repeating(cleanup_access_sessions, interval=1800, first=1800)  # –ö–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
    
        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤ (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)
        job_queue.run_repeating(lambda context: sync_monitors_with_projects(), interval=300, first=300)  # –ö–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    logger.info("üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:")
    logger.info(f"   ü§ñ BOT_TOKEN: {'‚úÖ –Ñ' if BOT_TOKEN else '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
    logger.info(f"   üê¶ TWITTER_AUTH_TOKEN: {'‚úÖ –Ñ' if TWITTER_AUTH_TOKEN else '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
    logger.info(f"   üí¨ DISCORD_AUTHORIZATION: {'‚úÖ –Ñ' if DISCORD_AUTHORIZATION else '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤
    try:
        total_users = len(project_manager.data.get('users', {}))
        total_projects = 0
        twitter_projects = 0
        discord_projects = 0
        
        for user_id, projects in project_manager.data.get('projects', {}).items():
            total_projects += len(projects)
            for project in projects:
                if project.get('platform') == 'twitter':
                    twitter_projects += 1
                elif project.get('platform') == 'discord':
                    discord_projects += 1
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏:")
        logger.info(f"   üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}")
        logger.info(f"   üìã –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {total_projects}")
        logger.info(f"   üê¶ Twitter –ø—Ä–æ–µ–∫—Ç—ñ–≤: {twitter_projects}")
        logger.info(f"   üí¨ Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤: {discord_projects}")
        
        if total_projects > 0:
            logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ–µ–∫—Ç–∏ - –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—â–µ–Ω—ñ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
        else:
            logger.info("‚ÑπÔ∏è –ü—Ä–æ–µ–∫—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –º–æ–Ω—ñ—Ç–æ—Ä–∏ –±—É–¥—É—Ç—å –≥–æ—Ç–æ–≤—ñ –¥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {e}")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Twitter Monitor Adapter (–æ—Å–Ω–æ–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥)
    global twitter_monitor_adapter
    try:
        twitter_monitor_adapter = TwitterMonitorAdapter()
        logger.info("‚úÖ Twitter Monitor Adapter —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –≤ –∞–¥–∞–ø—Ç–µ—Ä
        saved_accounts = project_manager.get_selenium_accounts()
        if saved_accounts:
            logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(saved_accounts)} –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ –≤ Twitter Monitor Adapter: {saved_accounts}")
            for username in saved_accounts:
                twitter_monitor_adapter.add_account(username)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Twitter Monitor Adapter: {e}")
        twitter_monitor_adapter = None
    
    
    # –ù–∞ —Å—Ç–∞—Ä—Ç—ñ –ø—Ä–æ–≤–æ–¥–∏–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤ –∑ –ø—Ä–æ–µ–∫—Ç–∞–º–∏/–±–∞–∑–æ—é
    # –¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤
    logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏...")
    sync_monitors_with_projects()

    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    try:
        twitter_accounts = len(getattr(twitter_monitor, 'monitoring_accounts', set())) if twitter_monitor else 0
        twitter_adapter_accounts = len(getattr(twitter_monitor_adapter, 'monitoring_accounts', set())) if twitter_monitor_adapter else 0
        discord_channels = len(getattr(discord_monitor, 'channels', [])) if discord_monitor else 0
        
        logger.info("üìà –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:")
        logger.info(f"   üê¶ Twitter API: {twitter_accounts} –∞–∫–∞—É–Ω—Ç—ñ–≤")
        logger.info(f"   üöÄ Twitter Monitor Adapter: {twitter_adapter_accounts} –∞–∫–∞—É–Ω—Ç—ñ–≤") 
        logger.info(f"   üí¨ Discord: {discord_channels} –∫–∞–Ω–∞–ª—ñ–≤")
        
        total_monitoring = twitter_accounts + twitter_adapter_accounts + discord_channels
        if total_monitoring > 0:
            logger.info(f"‚úÖ –í—Å—å–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤: {total_monitoring}")
            logger.info("üéØ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –≤—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏!")
        else:
            logger.info("‚ÑπÔ∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏ –≥–æ—Ç–æ–≤—ñ, –æ—á—ñ–∫—É—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
    
    logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—Å—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    try:
        application.run_polling()
    except KeyboardInterrupt:
        # –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ
        project_manager.save_data(force=True)
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ, –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

if __name__ == '__main__':
    main()